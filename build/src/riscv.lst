GAS LISTING /tmp/ccBQtR2X.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB47:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** using Body = void (*)(void*);
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** void Riscv::popSppSpie()
   8:src/riscv.cpp **** {
  12              		.loc 1 8 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 9 5
  21              		.loc 1 9 39 is_stmt 0
  22              	#APP
  23              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 30 is_stmt 0
  28              	# 10 "src/riscv.cpp" 1
  11              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 11 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE47:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB48:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  14:src/riscv.cpp **** {
GAS LISTING /tmp/ccBQtR2X.s 			page 2


  47              		.loc 1 14 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54 0030 23382103 		sd	s2,48(sp)
  55 0034 23343103 		sd	s3,40(sp)
  56              		.cfi_offset 1, -8
  57              		.cfi_offset 8, -16
  58              		.cfi_offset 9, -24
  59              		.cfi_offset 18, -32
  60              		.cfi_offset 19, -40
  61 0038 13040105 		addi	s0,sp,80
  62              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     uint64 scause = r_scause();
  63              		.loc 1 15 5
  64              	.LBB39:
  65              	.LBB40:
  66              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/19/22.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** //#include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../h/TCB.hpp"
  10:src/../h/riscv.hpp **** #include "../lib/console.h"
  11:src/../h/riscv.hpp **** #include "../h/Ksemaphore.hpp"
  12:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** //#include "../h/syscall_cpp.hpp"
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp **** //class TCB;
  16:src/../h/riscv.hpp **** class Riscv
  17:src/../h/riscv.hpp **** {
  18:src/../h/riscv.hpp **** public:
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  21:src/../h/riscv.hpp ****     static void popSppSpie();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  24:src/../h/riscv.hpp ****     static void pushRegisters();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  27:src/../h/riscv.hpp ****     static void popRegisters();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register scause
  30:src/../h/riscv.hpp ****     static uint64 r_scause();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register scause
  33:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register sepc
  36:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccBQtR2X.s 			page 3


  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register sepc
  39:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register stvec
  42:src/../h/riscv.hpp ****     static uint64 r_stvec();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register stvec
  45:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stval
  48:src/../h/riscv.hpp ****     static uint64 r_stval();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stval
  51:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     enum BitMaskSip
  54:src/../h/riscv.hpp ****     {
  55:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  56:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  57:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  58:src/../h/riscv.hpp ****     };
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // mask set register sip
  61:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask clear register sip
  64:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // read register sip
  67:src/../h/riscv.hpp ****     static uint64 r_sip();
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // write register sip
  70:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     enum BitMaskSstatus
  73:src/../h/riscv.hpp ****     {
  74:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  75:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  76:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  77:src/../h/riscv.hpp ****     };
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask set register sstatus
  80:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // mask clear register sstatus
  83:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // read register sstatus
  86:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // write register sstatus
  89:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a0;
  92:src/../h/riscv.hpp ****     static uint64 r_a0();
  93:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccBQtR2X.s 			page 4


  94:src/../h/riscv.hpp **** // supervisor trap
  95:src/../h/riscv.hpp ****     static void supervisorTrap();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp ****     // supervisor trap handler
 100:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
  67              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  68              		.loc 2 107 5
  69              		.loc 2 107 72 is_stmt 0
  70              	#APP
  71              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
  72              		csrr a5, scause
  73              	# 0 "" 2
  74              	#NO_APP
  75 0040 2338F4FA 		sd	a5,-80(s0)
  76              		.loc 2 108 5 is_stmt 1
  77              		.loc 2 108 12 is_stmt 0
  78 0044 033704FB 		ld	a4,-80(s0)
  79              	.LVL0:
  80              	.LBE40:
  81              	.LBE39:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  82              		.loc 1 17 5 is_stmt 1
  83              	.LBB41:
  84              		.loc 1 17 40 is_stmt 0
  85 0048 930687FF 		addi	a3,a4,-8
  86              		.loc 1 17 5
  87 004c 93071000 		li	a5,1
  88 0050 63F8D702 		bleu	a3,a5,.L27
  18:src/riscv.cpp ****     {
  19:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
  25:src/riscv.cpp ****             //mem_alloc(size_t size-a1)
  26:src/riscv.cpp ****             size_t a7;
  27:src/riscv.cpp ****             void *a;
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  32:src/riscv.cpp ****         }
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
  34:src/riscv.cpp ****             //mem_free
  35:src/riscv.cpp ****             void* a7;
GAS LISTING /tmp/ccBQtR2X.s 			page 5


  36:src/riscv.cpp ****             uint64 a;
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  41:src/riscv.cpp **** 
  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****         }
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
  45:src/riscv.cpp **** //            //thread_create(&myhandle-a1, body-a2, arg-a3)
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             TCB** tcb;
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  49:src/riscv.cpp ****             Body a2;
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  51:src/riscv.cpp ****             //arg
  52:src/riscv.cpp ****             void* a7;
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
  62:src/riscv.cpp ****             //thread_exit
  63:src/riscv.cpp ****             uint64 a;
  64:src/riscv.cpp ****             a=TCB::exitThread();
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  66:src/riscv.cpp ****         }
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
  68:src/riscv.cpp ****             //thread_dispatch()
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  70:src/riscv.cpp ****             TCB::dispatch();
  71:src/riscv.cpp ****         }
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
  74:src/riscv.cpp ****             //thread_start()
  75:src/riscv.cpp ****             TCB** tcb;
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  77:src/riscv.cpp **** //            TCB::putInScheduler(*tcb);
  78:src/riscv.cpp ****             Scheduler::put(*tcb);
  79:src/riscv.cpp ****         }
  80:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
  81:src/riscv.cpp ****             //thread_create2() bez stavljanja u scheduler
  82:src/riscv.cpp ****             TCB** tcb;
  83:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  84:src/riscv.cpp ****             Body a2;
  85:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  86:src/riscv.cpp ****             //arg
  87:src/riscv.cpp ****             void* a7;
  88:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  89:src/riscv.cpp **** 
  90:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
  91:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  92:src/riscv.cpp **** 
GAS LISTING /tmp/ccBQtR2X.s 			page 6


  93:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
  94:src/riscv.cpp ****         }
  95:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
  96:src/riscv.cpp ****             //sem_open a1-handle a2-init
  97:src/riscv.cpp **** 
  98:src/riscv.cpp ****             unsigned a2;
  99:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 100:src/riscv.cpp **** 
 101:src/riscv.cpp ****             Ksemaphore** sem;
 102:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 103:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 104:src/riscv.cpp **** 
 105:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 106:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 107:src/riscv.cpp **** 
 108:src/riscv.cpp ****         }
 109:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 110:src/riscv.cpp ****             //sem_close a1-handle
 111:src/riscv.cpp **** 
 112:src/riscv.cpp ****             uint64 a;
 113:src/riscv.cpp ****             Ksemaphore* sem;
 114:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 115:src/riscv.cpp **** 
 116:src/riscv.cpp ****             a=0;
 117:src/riscv.cpp ****             if(sem== nullptr){
 118:src/riscv.cpp ****                 a=1;
 119:src/riscv.cpp ****             }
 120:src/riscv.cpp ****             else{
 121:src/riscv.cpp ****                 sem->closeSemaphore();
 122:src/riscv.cpp ****             }
 123:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 124:src/riscv.cpp **** 
 125:src/riscv.cpp ****         }
 126:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 127:src/riscv.cpp ****             //sem_wait a1-id
 128:src/riscv.cpp **** 
 129:src/riscv.cpp ****             int a;
 130:src/riscv.cpp ****             Ksemaphore* a1;
 131:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
 132:src/riscv.cpp **** 
 133:src/riscv.cpp ****             a = a1->wait();
 134:src/riscv.cpp **** 
 135:src/riscv.cpp **** 
 136:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 137:src/riscv.cpp **** 
 138:src/riscv.cpp ****         }
 139:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 140:src/riscv.cpp ****             //sem_signal a1-id
 141:src/riscv.cpp **** 
 142:src/riscv.cpp ****             uint64 a;
 143:src/riscv.cpp ****             Ksemaphore* sem;
 144:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 145:src/riscv.cpp ****             a=sem->signal();
 146:src/riscv.cpp **** 
 147:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 148:src/riscv.cpp ****         }
 149:src/riscv.cpp **** 
GAS LISTING /tmp/ccBQtR2X.s 			page 7


 150:src/riscv.cpp **** //        TCB::dispatch();
 151:src/riscv.cpp **** 
 152:src/riscv.cpp ****         w_sstatus(sstatus);
 153:src/riscv.cpp ****         w_sepc(sepc);
 154:src/riscv.cpp **** 
 155:src/riscv.cpp **** 
 156:src/riscv.cpp ****     } else if (scause == 0x8000000000000001UL)
  89              		.loc 1 156 12 is_stmt 1
  90 0054 9307F0FF 		li	a5,-1
  91 0058 9397F703 		slli	a5,a5,63
  92 005c 93871700 		addi	a5,a5,1
  93 0060 6300F720 		beq	a4,a5,.L28
 157:src/riscv.cpp ****     {
 158:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 159:src/riscv.cpp **** //        TCB::timeSliceCounter++;
 160:src/riscv.cpp **** //        if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 161:src/riscv.cpp **** //        {
 162:src/riscv.cpp **** //            uint64 sepc = r_sepc();
 163:src/riscv.cpp **** //            uint64 sstatus = r_sstatus();
 164:src/riscv.cpp **** //            TCB::timeSliceCounter = 0;
 165:src/riscv.cpp **** //            TCB::dispatch();
 166:src/riscv.cpp **** //            w_sstatus(sstatus);
 167:src/riscv.cpp **** //            w_sepc(sepc);
 168:src/riscv.cpp **** //        }
 169:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 170:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL)
  94              		.loc 1 170 12
  95 0064 9307F0FF 		li	a5,-1
  96 0068 9397F703 		slli	a5,a5,63
  97 006c 93879700 		addi	a5,a5,9
  98 0070 631EF70A 		bne	a4,a5,.L3
 171:src/riscv.cpp ****     {
 172:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 173:src/riscv.cpp ****         console_handler();
  99              		.loc 1 173 9
 100              		.loc 1 173 24 is_stmt 0
 101 0074 97000000 		call	console_handler@plt
 101      E7800000 
 102              	.LVL1:
 103              	.LBE41:
 174:src/riscv.cpp ****     }else
 175:src/riscv.cpp ****     {
 176:src/riscv.cpp ****         // unexpected trap cause
 177:src/riscv.cpp ****     }
 178:src/riscv.cpp **** }...
 104              		.loc 1 178 1
 105 007c 6F00000B 		j	.L3
 106              	.LVL2:
 107              	.L27:
 108              	.LBB156:
 109              	.LBB42:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 110              		.loc 1 20 9 is_stmt 1
 111              	.LBB43:
 112              	.LBB44:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccBQtR2X.s 			page 8


 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 113              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 114              		.loc 2 119 5
 115              		.loc 2 119 64 is_stmt 0
 116              	#APP
 117              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 118              		csrr a5, sepc
 119              	# 0 "" 2
 120              	#NO_APP
 121 0084 2334F4FC 		sd	a5,-56(s0)
 122              		.loc 2 120 5 is_stmt 1
 123              		.loc 2 120 12 is_stmt 0
 124 0088 833484FC 		ld	s1,-56(s0)
 125              	.LBE44:
 126              	.LBE43:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 127              		.loc 1 20 34
 128 008c 93844400 		addi	s1,s1,4
 129              	.LVL3:
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 130              		.loc 1 21 9 is_stmt 1
 131              	.LBB45:
 132              	.LBB46:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144:src/../h/riscv.hpp ****     return stval;
 145:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccBQtR2X.s 			page 9


 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 133              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 134              		.loc 2 187 5
 135              		.loc 2 187 76 is_stmt 0
 136              	#APP
 137              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 138              		csrr a5, sstatus
 139              	# 0 "" 2
 140              	#NO_APP
 141 0094 2330F4FC 		sd	a5,-64(s0)
 142              		.loc 2 188 5 is_stmt 1
 143              		.loc 2 188 12 is_stmt 0
 144 0098 033904FC 		ld	s2,-64(s0)
 145              	.LVL4:
 146              	.LBE46:
GAS LISTING /tmp/ccBQtR2X.s 			page 10


 147              	.LBE45:
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
 148              		.loc 1 23 9 is_stmt 1
 149              	.LBB47:
 150              	.LBB48:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 194:src/../h/riscv.hpp **** }
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** 
 197:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 198:src/../h/riscv.hpp **** {
 199:src/../h/riscv.hpp ****     uint64 volatile a0;
 151              		.loc 2 199 5
 200:src/../h/riscv.hpp ****     __asm__ volatile ("mv %[a0], a0" : [a0] "=r"(a0));
 152              		.loc 2 200 5
 153              		.loc 2 200 54 is_stmt 0
 154              	#APP
 155              	# 200 "src/../h/riscv.hpp" 1
 201              	    return a0;
 156              		mv a5, a0
 157              	# 0 "" 2
 158              	#NO_APP
 159 00a0 233CF4FA 		sd	a5,-72(s0)
 160              		.loc 2 201 5 is_stmt 1
 161              		.loc 2 201 12 is_stmt 0
 162 00a4 833784FB 		ld	a5,-72(s0)
 163              	.LVL5:
 164              	.LBE48:
 165              	.LBE47:
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
 166              		.loc 1 24 9 is_stmt 1
 167              	.LBB49:
 168 00a8 13071000 		li	a4,1
 169              	.LVL6:
 170 00ac 6384E706 		beq	a5,a4,.L29
 171              	.LBE49:
 172              	.LBE42:
 173              	.LBE156:
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
 174              		.loc 1 33 14
 175              	.LBB157:
 176              	.LBB143:
 177              	.LBB128:
 178              	.LBB50:
 179 00b0 13072000 		li	a4,2
 180 00b4 638AE708 		beq	a5,a4,.L30
 181              	.LBE50:
 182              	.LBE128:
 183              	.LBE143:
 184              	.LBE157:
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
 185              		.loc 1 44 14
 186              	.LBB158:
GAS LISTING /tmp/ccBQtR2X.s 			page 11


 187              	.LBB144:
 188              	.LBB129:
 189              	.LBB117:
 190              	.LBB51:
 191 00b8 13071001 		li	a4,17
 192 00bc 6380E70A 		beq	a5,a4,.L31
 193              	.LBE51:
 194              	.LBE117:
 195              	.LBE129:
 196              	.LBE144:
 197              	.LBE158:
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
 198              		.loc 1 61 14
 199              	.LBB159:
 200              	.LBB145:
 201              	.LBB130:
 202              	.LBB118:
 203              	.LBB107:
 204              	.LBB52:
 205 00c0 13072001 		li	a4,18
 206 00c4 6384E70C 		beq	a5,a4,.L32
 207              	.LBE52:
 208              	.LBE107:
 209              	.LBE118:
 210              	.LBE130:
 211              	.LBE145:
 212              	.LBE159:
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
 213              		.loc 1 67 14
 214              	.LBB160:
 215              	.LBB146:
 216              	.LBB131:
 217              	.LBB119:
 218              	.LBB108:
 219              	.LBB97:
 220              	.LBB53:
 221 00c8 13073001 		li	a4,19
 222 00cc 6388E70C 		beq	a5,a4,.L33
 223              	.LBE53:
 224              	.LBE97:
 225              	.LBE108:
 226              	.LBE119:
 227              	.LBE131:
 228              	.LBE146:
 229              	.LBE160:
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
 230              		.loc 1 73 14
 231              	.LBB161:
 232              	.LBB147:
 233              	.LBB132:
 234              	.LBB120:
 235              	.LBB109:
 236              	.LBB98:
 237              	.LBB89:
 238              	.LBB54:
 239 00d0 13074001 		li	a4,20
 240 00d4 6380E70E 		beq	a5,a4,.L34
GAS LISTING /tmp/ccBQtR2X.s 			page 12


 241              	.LBE54:
 242              	.LBE89:
 243              	.LBE98:
 244              	.LBE109:
 245              	.LBE120:
 246              	.LBE132:
 247              	.LBE147:
 248              	.LBE161:
  80:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
 249              		.loc 1 80 14
 250              	.LBB162:
 251              	.LBB148:
 252              	.LBB133:
 253              	.LBB121:
 254              	.LBB110:
 255              	.LBB99:
 256              	.LBB90:
 257              	.LBB83:
 258              	.LBB55:
 259 00d8 13075001 		li	a4,21
 260 00dc 6386E70E 		beq	a5,a4,.L35
 261              	.LBE55:
 262              	.LBE83:
 263              	.LBE90:
 264              	.LBE99:
 265              	.LBE110:
 266              	.LBE121:
 267              	.LBE133:
 268              	.LBE148:
 269              	.LBE162:
  95:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
 270              		.loc 1 95 14
 271              	.LBB163:
 272              	.LBB149:
 273              	.LBB134:
 274              	.LBB122:
 275              	.LBB111:
 276              	.LBB100:
 277              	.LBB91:
 278              	.LBB84:
 279              	.LBB77:
 280              	.LBB56:
 281 00e0 13071002 		li	a4,33
 282 00e4 638AE710 		beq	a5,a4,.L36
 283              	.LBE56:
 284              	.LBE77:
 285              	.LBE84:
 286              	.LBE91:
 287              	.LBE100:
 288              	.LBE111:
 289              	.LBE122:
 290              	.LBE134:
 291              	.LBE149:
 292              	.LBE163:
 109:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 293              		.loc 1 109 14
 294              	.LBB164:
GAS LISTING /tmp/ccBQtR2X.s 			page 13


 295              	.LBB150:
 296              	.LBB135:
 297              	.LBB123:
 298              	.LBB112:
 299              	.LBB101:
 300              	.LBB92:
 301              	.LBB85:
 302              	.LBB78:
 303              	.LBB71:
 304              	.LBB57:
 305 00e8 13072002 		li	a4,34
 306 00ec 638EE712 		beq	a5,a4,.L37
 307              	.LBE57:
 308              	.LBE71:
 309              	.LBE78:
 310              	.LBE85:
 311              	.LBE92:
 312              	.LBE101:
 313              	.LBE112:
 314              	.LBE123:
 315              	.LBE135:
 316              	.LBE150:
 317              	.LBE164:
 126:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 318              		.loc 1 126 14
 319              	.LBB165:
 320              	.LBB151:
 321              	.LBB136:
 322              	.LBB124:
 323              	.LBB113:
 324              	.LBB102:
 325              	.LBB93:
 326              	.LBB86:
 327              	.LBB79:
 328              	.LBB72:
 329              	.LBB66:
 330              	.LBB58:
 331 00f0 13073002 		li	a4,35
 332 00f4 638CE714 		beq	a5,a4,.L38
 333              	.LBE58:
 334              	.LBE66:
 335              	.LBE72:
 336              	.LBE79:
 337              	.LBE86:
 338              	.LBE93:
 339              	.LBE102:
 340              	.LBE113:
 341              	.LBE124:
 342              	.LBE136:
 343              	.LBE151:
 344              	.LBE165:
 139:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 345              		.loc 1 139 14
 346              	.LBB166:
 347              	.LBB152:
 348              	.LBB137:
 349              	.LBB125:
GAS LISTING /tmp/ccBQtR2X.s 			page 14


 350              	.LBB114:
 351              	.LBB103:
 352              	.LBB94:
 353              	.LBB87:
 354              	.LBB80:
 355              	.LBB73:
 356              	.LBB67:
 357              	.LBB62:
 358              	.LBB59:
 359 00f8 13074002 		li	a4,36
 360 00fc 6394E702 		bne	a5,a4,.L6
 361              	.LBB60:
 142:src/riscv.cpp ****             uint64 a;
 362              		.loc 1 142 13
 143:src/riscv.cpp ****             Ksemaphore* sem;
 363              		.loc 1 143 13
 144:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 364              		.loc 1 144 13
 144:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 365              		.loc 1 144 63 is_stmt 0
 366              	#APP
 367              	# 144 "src/riscv.cpp" 1
 368              		mv a0, a1
 369              	# 0 "" 2
 370              	.LVL7:
 145:src/riscv.cpp ****             a=sem->signal();
 371              		.loc 1 145 13 is_stmt 1
 145:src/riscv.cpp ****             a=sem->signal();
 372              		.loc 1 145 26 is_stmt 0
 373              	#NO_APP
 374 0104 97000000 		call	_ZN10Ksemaphore6signalEv@plt
 374      E7800000 
 375              	.LVL8:
 147:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 376              		.loc 1 147 13 is_stmt 1
 147:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 377              		.loc 1 147 50 is_stmt 0
 378              	#APP
 379              	# 147 "src/riscv.cpp" 1
 380              		mv a0, a0
 381              	# 0 "" 2
 382              	#NO_APP
 383              	.LBE60:
 384 0110 6F004001 		j	.L6
 385              	.LVL9:
 386              	.L29:
 387              	.LBE59:
 388              	.LBE62:
 389              	.LBE67:
 390              	.LBE73:
 391              	.LBE80:
 392              	.LBE87:
 393              	.LBE94:
 394              	.LBE103:
 395              	.LBE114:
 396              	.LBE125:
 397              	.LBB126:
GAS LISTING /tmp/ccBQtR2X.s 			page 15


  26:src/riscv.cpp ****             size_t a7;
 398              		.loc 1 26 13 is_stmt 1
  27:src/riscv.cpp ****             void *a;
 399              		.loc 1 27 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 400              		.loc 1 28 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 401              		.loc 1 28 62 is_stmt 0
 402              	#APP
 403              	# 28 "src/riscv.cpp" 1
 404              		mv a0, a7
 405              	# 0 "" 2
 406              	.LVL10:
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 407              		.loc 1 30 13 is_stmt 1
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 408              		.loc 1 30 38 is_stmt 0
 409              	#NO_APP
 410 0118 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 410      E7800000 
 411              	.LVL11:
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 412              		.loc 1 31 13 is_stmt 1
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 413              		.loc 1 31 50 is_stmt 0
 414              	#APP
 415              	# 31 "src/riscv.cpp" 1
 416              		mv a0, a0
 417              	# 0 "" 2
 418              	.LVL12:
 419              	#NO_APP
 420              	.L6:
 421              	.LBE126:
 422              	.LBE137:
 152:src/riscv.cpp ****         w_sstatus(sstatus);
 423              		.loc 1 152 9 is_stmt 1
 424              	.LBB138:
 425              	.LBB139:
 193:src/../h/riscv.hpp **** }
 426              		.loc 2 193 5
 193:src/../h/riscv.hpp **** }
 427              		.loc 2 193 77 is_stmt 0
 428              	#APP
 429              	# 193 "src/../h/riscv.hpp" 1
 430              		csrw sstatus, s2
 431              	# 0 "" 2
 432              	.LVL13:
 433              	#NO_APP
 434              	.LBE139:
 435              	.LBE138:
 153:src/riscv.cpp ****         w_sepc(sepc);
 436              		.loc 1 153 9 is_stmt 1
 437              	.LBB140:
 438              	.LBB141:
 125:src/../h/riscv.hpp **** }
 439              		.loc 2 125 5
 125:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccBQtR2X.s 			page 16


 440              		.loc 2 125 65 is_stmt 0
 441              	#APP
 442              	# 125 "src/../h/riscv.hpp" 1
 443              		csrw sepc, s1
 444              	# 0 "" 2
 445              	.LVL14:
 446              	#NO_APP
 447              	.L3:
 448              	.LBE141:
 449              	.LBE140:
 450              	.LBE152:
 451              	.LBE166:
 452              		.loc 1 178 1
 453 012c 83308104 		ld	ra,72(sp)
 454              		.cfi_remember_state
 455              		.cfi_restore 1
 456 0130 03340104 		ld	s0,64(sp)
 457              		.cfi_restore 8
 458              		.cfi_def_cfa 2, 80
 459 0134 83348103 		ld	s1,56(sp)
 460              		.cfi_restore 9
 461 0138 03390103 		ld	s2,48(sp)
 462              		.cfi_restore 18
 463 013c 83398102 		ld	s3,40(sp)
 464              		.cfi_restore 19
 465 0140 13010105 		addi	sp,sp,80
 466              		.cfi_def_cfa_offset 0
 467 0144 67800000 		jr	ra
 468              	.LVL15:
 469              	.L30:
 470              		.cfi_restore_state
 471              	.LBB167:
 472              	.LBB153:
 473              	.LBB142:
 474              	.LBB127:
 475              	.LBB115:
  35:src/riscv.cpp ****             void* a7;
 476              		.loc 1 35 13 is_stmt 1
  36:src/riscv.cpp ****             uint64 a;
 477              		.loc 1 36 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 478              		.loc 1 37 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 479              		.loc 1 37 62 is_stmt 0
 480              	#APP
 481              	# 37 "src/riscv.cpp" 1
 482              		mv a0, a7
 483              	# 0 "" 2
 484              	.LVL16:
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 485              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 486              		.loc 1 39 36 is_stmt 0
 487              	#NO_APP
 488 014c 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 488      E7800000 
 489              	.LVL17:
GAS LISTING /tmp/ccBQtR2X.s 			page 17


  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 490              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 491              		.loc 1 40 50 is_stmt 0
 492              	#APP
 493              	# 40 "src/riscv.cpp" 1
 494              		mv a0, a0
 495              	# 0 "" 2
 496              	#NO_APP
 497              	.LBE115:
 498 0158 6FF0DFFC 		j	.L6
 499              	.LVL18:
 500              	.L31:
 501              	.LBB116:
 502              	.LBB104:
  47:src/riscv.cpp ****             TCB** tcb;
 503              		.loc 1 47 13 is_stmt 1
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 504              		.loc 1 48 13
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 505              		.loc 1 48 63 is_stmt 0
 506              	#APP
 507              	# 48 "src/riscv.cpp" 1
 508              		mv s3, a1
 509              	# 0 "" 2
 510              	.LVL19:
  49:src/riscv.cpp ****             Body a2;
 511              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 512              		.loc 1 50 13
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 513              		.loc 1 50 62 is_stmt 0
 514              	# 50 "src/riscv.cpp" 1
 515              		mv a0, a2
 516              	# 0 "" 2
 517              	.LVL20:
  52:src/riscv.cpp ****             void* a7;
 518              		.loc 1 52 13 is_stmt 1
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 519              		.loc 1 53 13
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 520              		.loc 1 53 62 is_stmt 0
 521              	# 53 "src/riscv.cpp" 1
 522              		mv a1, a7
 523              	# 0 "" 2
 524              	.LVL21:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 525              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 526              		.loc 1 55 37 is_stmt 0
 527              	#NO_APP
 528 0168 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 528      E7800000 
 529              	.LVL22:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 530              		.loc 1 55 18
 531 0170 23B0A900 		sd	a0,0(s3)
GAS LISTING /tmp/ccBQtR2X.s 			page 18


  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 532              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 533              		.loc 1 56 31 is_stmt 0
 534 0174 63880900 		beqz	s3,.L22
 535 0178 93070000 		li	a5,0
 536              	.L9:
 537              	.LVL23:
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 538              		.loc 1 58 13 is_stmt 1 discriminator 4
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 539              		.loc 1 58 51 is_stmt 0 discriminator 4
 540              	#APP
 541              	# 58 "src/riscv.cpp" 1
 542              		mv a0, a5
 543              	# 0 "" 2
 544              	#NO_APP
 545              	.LBE104:
 546 0180 6FF05FFA 		j	.L6
 547              	.LVL24:
 548              	.L22:
 549              	.LBB105:
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 550              		.loc 1 56 31
 551 0184 9307F0FF 		li	a5,-1
 552 0188 6FF05FFF 		j	.L9
 553              	.LVL25:
 554              	.L32:
 555              	.LBE105:
 556              	.LBB106:
 557              	.LBB95:
  63:src/riscv.cpp ****             uint64 a;
 558              		.loc 1 63 13 is_stmt 1
  64:src/riscv.cpp ****             a=TCB::exitThread();
 559              		.loc 1 64 13
  64:src/riscv.cpp ****             a=TCB::exitThread();
 560              		.loc 1 64 30 is_stmt 0
 561 018c 97000000 		call	_ZN3TCB10exitThreadEv@plt
 561      E7800000 
 562              	.LVL26:
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 563              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 564              		.loc 1 65 50 is_stmt 0
 565              	#APP
 566              	# 65 "src/riscv.cpp" 1
 567              		mv a0, a0
 568              	# 0 "" 2
 569              	#NO_APP
 570              	.LBE95:
 571 0198 6FF0DFF8 		j	.L6
 572              	.LVL27:
 573              	.L33:
 574              	.LBB96:
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 575              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
GAS LISTING /tmp/ccBQtR2X.s 			page 19


 576              		.loc 1 69 35 is_stmt 0
 577 019c 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 577      83B70700 
 578              	.LVL28:
 579 01a4 23B00700 		sd	zero,0(a5)
  70:src/riscv.cpp ****             TCB::dispatch();
 580              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             TCB::dispatch();
 581              		.loc 1 70 26 is_stmt 0
 582 01a8 97000000 		call	_ZN3TCB8dispatchEv@plt
 582      E7800000 
 583              	.LVL29:
 584 01b0 6FF05FF7 		j	.L6
 585              	.LVL30:
 586              	.L34:
 587              	.LBB88:
 588              	.LBB81:
  75:src/riscv.cpp ****             TCB** tcb;
 589              		.loc 1 75 13 is_stmt 1
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 590              		.loc 1 76 13
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 591              		.loc 1 76 63 is_stmt 0
 592              	#APP
 593              	# 76 "src/riscv.cpp" 1
 594              		mv a5, a1
 595              	# 0 "" 2
 596              	.LVL31:
  78:src/riscv.cpp ****             Scheduler::put(*tcb);
 597              		.loc 1 78 13 is_stmt 1
  78:src/riscv.cpp ****             Scheduler::put(*tcb);
 598              		.loc 1 78 27 is_stmt 0
 599              	#NO_APP
 600 01b8 03B50700 		ld	a0,0(a5)
 601 01bc 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 601      E7800000 
 602              	.LVL32:
 603              	.LBE81:
 604 01c4 6FF01FF6 		j	.L6
 605              	.LVL33:
 606              	.L35:
 607              	.LBB82:
 608              	.LBB74:
  82:src/riscv.cpp ****             TCB** tcb;
 609              		.loc 1 82 13 is_stmt 1
  83:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 610              		.loc 1 83 13
  83:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 611              		.loc 1 83 63 is_stmt 0
 612              	#APP
 613              	# 83 "src/riscv.cpp" 1
 614              		mv s3, a1
 615              	# 0 "" 2
 616              	.LVL34:
  84:src/riscv.cpp ****             Body a2;
 617              		.loc 1 84 13 is_stmt 1
  85:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
GAS LISTING /tmp/ccBQtR2X.s 			page 20


 618              		.loc 1 85 13
  85:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 619              		.loc 1 85 62 is_stmt 0
 620              	# 85 "src/riscv.cpp" 1
 621              		mv a0, a2
 622              	# 0 "" 2
 623              	.LVL35:
  87:src/riscv.cpp ****             void* a7;
 624              		.loc 1 87 13 is_stmt 1
  88:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 625              		.loc 1 88 13
  88:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 626              		.loc 1 88 62 is_stmt 0
 627              	# 88 "src/riscv.cpp" 1
 628              		mv a1, a7
 629              	# 0 "" 2
 630              	.LVL36:
  90:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 631              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 632              		.loc 1 90 62 is_stmt 0
 633              	#NO_APP
 634 01d4 97000000 		call	_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_@plt
 634      E7800000 
 635              	.LVL37:
  90:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 636              		.loc 1 90 18
 637 01dc 23B0A900 		sd	a0,0(s3)
  91:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 638              		.loc 1 91 13 is_stmt 1
  91:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 639              		.loc 1 91 31 is_stmt 0
 640 01e0 63880900 		beqz	s3,.L23
 641 01e4 93070000 		li	a5,0
 642              	.L14:
 643              	.LVL38:
  93:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 644              		.loc 1 93 13 is_stmt 1 discriminator 4
  93:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 645              		.loc 1 93 51 is_stmt 0 discriminator 4
 646              	#APP
 647              	# 93 "src/riscv.cpp" 1
 648              		mv a0, a5
 649              	# 0 "" 2
 650              	#NO_APP
 651              	.LBE74:
 652 01ec 6FF09FF3 		j	.L6
 653              	.LVL39:
 654              	.L23:
 655              	.LBB75:
  91:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 656              		.loc 1 91 31
 657 01f0 9307F0FF 		li	a5,-1
 658 01f4 6FF05FFF 		j	.L14
 659              	.LVL40:
 660              	.L36:
 661              	.LBE75:
GAS LISTING /tmp/ccBQtR2X.s 			page 21


 662              	.LBB76:
 663              	.LBB68:
  98:src/riscv.cpp ****             unsigned a2;
 664              		.loc 1 98 13 is_stmt 1
  99:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 665              		.loc 1 99 13
  99:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 666              		.loc 1 99 62 is_stmt 0
 667              	#APP
 668              	# 99 "src/riscv.cpp" 1
 669              		mv a0, a2
 670              	# 0 "" 2
 671              	#NO_APP
 672 01fc 1B050500 		sext.w	a0,a0
 673              	.LVL41:
 101:src/riscv.cpp ****             Ksemaphore** sem;
 674              		.loc 1 101 13 is_stmt 1
 102:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 675              		.loc 1 102 13
 102:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 676              		.loc 1 102 63 is_stmt 0
 677              	#APP
 678              	# 102 "src/riscv.cpp" 1
 679              		mv s3, a1
 680              	# 0 "" 2
 681              	.LVL42:
 103:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 682              		.loc 1 103 13 is_stmt 1
 103:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 683              		.loc 1 103 47 is_stmt 0
 684              	#NO_APP
 685 0204 97000000 		call	_ZN10Ksemaphore15createSemaphoreEj@plt
 685      E7800000 
 686              	.LVL43:
 103:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 687              		.loc 1 103 18
 688 020c 23B0A900 		sd	a0,0(s3)
 105:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 689              		.loc 1 105 13 is_stmt 1
 105:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 690              		.loc 1 105 38 is_stmt 0
 691 0210 63880900 		beqz	s3,.L24
 692 0214 93070000 		li	a5,0
 693              	.L16:
 694              	.LVL44:
 106:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 695              		.loc 1 106 13 is_stmt 1 discriminator 4
 106:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 696              		.loc 1 106 50 is_stmt 0 discriminator 4
 697              	#APP
 698              	# 106 "src/riscv.cpp" 1
 699              		mv a0, a5
 700              	# 0 "" 2
 701              	#NO_APP
 702              	.LBE68:
 703 021c 6FF09FF0 		j	.L6
 704              	.LVL45:
GAS LISTING /tmp/ccBQtR2X.s 			page 22


 705              	.L24:
 706              	.LBB69:
 105:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 707              		.loc 1 105 38
 708 0220 9307F0FF 		li	a5,-1
 709 0224 6FF05FFF 		j	.L16
 710              	.LVL46:
 711              	.L37:
 712              	.LBE69:
 713              	.LBB70:
 714              	.LBB63:
 112:src/riscv.cpp ****             uint64 a;
 715              		.loc 1 112 13 is_stmt 1
 113:src/riscv.cpp ****             Ksemaphore* sem;
 716              		.loc 1 113 13
 114:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 717              		.loc 1 114 13
 114:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 718              		.loc 1 114 63 is_stmt 0
 719              	#APP
 720              	# 114 "src/riscv.cpp" 1
 721              		mv a0, a1
 722              	# 0 "" 2
 723              	.LVL47:
 116:src/riscv.cpp ****             a=0;
 724              		.loc 1 116 13 is_stmt 1
 117:src/riscv.cpp ****             if(sem== nullptr){
 725              		.loc 1 117 13
 726              	#NO_APP
 727 022c 630C0500 		beqz	a0,.L25
 121:src/riscv.cpp ****                 sem->closeSemaphore();
 728              		.loc 1 121 17
 121:src/riscv.cpp ****                 sem->closeSemaphore();
 729              		.loc 1 121 36 is_stmt 0
 730 0230 97000000 		call	_ZN10Ksemaphore14closeSemaphoreEv@plt
 730      E7800000 
 731              	.LVL48:
 116:src/riscv.cpp ****             a=0;
 732              		.loc 1 116 14
 733 0238 93070000 		li	a5,0
 734              	.L18:
 735              	.LVL49:
 123:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 736              		.loc 1 123 13 is_stmt 1
 123:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 737              		.loc 1 123 50 is_stmt 0
 738              	#APP
 739              	# 123 "src/riscv.cpp" 1
 740              		mv a0, a5
 741              	# 0 "" 2
 742              	#NO_APP
 743              	.LBE63:
 744 0240 6FF05FEE 		j	.L6
 745              	.LVL50:
 746              	.L25:
 747              	.LBB64:
 118:src/riscv.cpp ****                 a=1;
GAS LISTING /tmp/ccBQtR2X.s 			page 23


 748              		.loc 1 118 18
 749 0244 93071000 		li	a5,1
 750              	.LVL51:
 751 0248 6FF05FFF 		j	.L18
 752              	.LVL52:
 753              	.L38:
 754              	.LBE64:
 755              	.LBB65:
 756              	.LBB61:
 129:src/riscv.cpp ****             int a;
 757              		.loc 1 129 13 is_stmt 1
 130:src/riscv.cpp ****             Ksemaphore* a1;
 758              		.loc 1 130 13
 131:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
 759              		.loc 1 131 13
 131:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
 760              		.loc 1 131 62 is_stmt 0
 761              	#APP
 762              	# 131 "src/riscv.cpp" 1
 763              		mv a0, a1
 764              	# 0 "" 2
 765              	.LVL53:
 133:src/riscv.cpp ****             a = a1->wait();
 766              		.loc 1 133 13 is_stmt 1
 133:src/riscv.cpp ****             a = a1->wait();
 767              		.loc 1 133 25 is_stmt 0
 768              	#NO_APP
 769 0250 97000000 		call	_ZN10Ksemaphore4waitEv@plt
 769      E7800000 
 770              	.LVL54:
 136:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 771              		.loc 1 136 13 is_stmt 1
 136:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 772              		.loc 1 136 50 is_stmt 0
 773              	#APP
 774              	# 136 "src/riscv.cpp" 1
 775              		mv a0, a0
 776              	# 0 "" 2
 777              	#NO_APP
 778              	.LBE61:
 779 025c 6FF09FEC 		j	.L6
 780              	.LVL55:
 781              	.L28:
 782              	.LBE65:
 783              	.LBE70:
 784              	.LBE76:
 785              	.LBE82:
 786              	.LBE88:
 787              	.LBE96:
 788              	.LBE106:
 789              	.LBE116:
 790              	.LBE127:
 791              	.LBE142:
 792              	.LBE153:
 169:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 793              		.loc 1 169 9 is_stmt 1
 794              	.LBB154:
GAS LISTING /tmp/ccBQtR2X.s 			page 24


 795              	.LBB155:
 159:src/../h/riscv.hpp **** }
 796              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 797              		.loc 2 159 64 is_stmt 0
 798 0260 93072000 		li	a5,2
 799              	#APP
 800              	# 159 "src/../h/riscv.hpp" 1
 160:src/../h/riscv.hpp **** 
 801              		csrc sip, a5
 802              	# 0 "" 2
 803              		.loc 2 160 1
 804              	#NO_APP
 805 0268 6FF05FEC 		j	.L3
 806              	.LBE155:
 807              	.LBE154:
 808              	.LBE167:
 809              		.cfi_endproc
 810              	.LFE48:
 812              	.Letext0:
 813              		.file 3 "src/../h/../h/../lib/hw.h"
 814              		.file 4 "src/../h/../h/MemoryAllocator.hpp"
 815              		.file 5 "src/../h/../h/scheduler.hpp"
 816              		.file 6 "src/../h/../h/list.hpp"
 817              		.file 7 "src/../h/../h/TCB.hpp"
 818              		.file 8 "src/../h/../h/Ksemaphore.hpp"
 819              		.file 9 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccBQtR2X.s 			page 25


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccBQtR2X.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccBQtR2X.s:13     .text:0000000000000000 .L0 
     /tmp/ccBQtR2X.s:14     .text:0000000000000000 .L0 
     /tmp/ccBQtR2X.s:15     .text:0000000000000004 .L0 
     /tmp/ccBQtR2X.s:17     .text:0000000000000008 .L0 
     /tmp/ccBQtR2X.s:19     .text:000000000000000c .L0 
     /tmp/ccBQtR2X.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/ccBQtR2X.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/ccBQtR2X.s:33     .text:0000000000000014 .L0 
     /tmp/ccBQtR2X.s:34     .text:0000000000000018 .L0 
     /tmp/ccBQtR2X.s:35     .text:0000000000000018 .L0 
     /tmp/ccBQtR2X.s:37     .text:000000000000001c .L0 
     /tmp/ccBQtR2X.s:39     .text:0000000000000020 .L0 
     /tmp/ccBQtR2X.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccBQtR2X.s:48     .text:0000000000000020 .L0 
     /tmp/ccBQtR2X.s:49     .text:0000000000000020 .L0 
     /tmp/ccBQtR2X.s:50     .text:0000000000000024 .L0 
     /tmp/ccBQtR2X.s:56     .text:0000000000000038 .L0 
     /tmp/ccBQtR2X.s:57     .text:0000000000000038 .L0 
     /tmp/ccBQtR2X.s:58     .text:0000000000000038 .L0 
     /tmp/ccBQtR2X.s:59     .text:0000000000000038 .L0 
     /tmp/ccBQtR2X.s:60     .text:0000000000000038 .L0 
     /tmp/ccBQtR2X.s:62     .text:000000000000003c .L0 
     /tmp/ccBQtR2X.s:67     .text:000000000000003c .L0 
     /tmp/ccBQtR2X.s:68     .text:000000000000003c .L0 
     /tmp/ccBQtR2X.s:69     .text:000000000000003c .L0 
  src/../h/riscv.hpp:107    .text:000000000000003c .L0 
     /tmp/ccBQtR2X.s:77     .text:0000000000000044 .L0 
     /tmp/ccBQtR2X.s:78     .text:0000000000000044 .L0 
     /tmp/ccBQtR2X.s:84     .text:0000000000000048 .L0 
     /tmp/ccBQtR2X.s:85     .text:0000000000000048 .L0 
     /tmp/ccBQtR2X.s:87     .text:000000000000004c .L0 
     /tmp/ccBQtR2X.s:90     .text:0000000000000054 .L0 
     /tmp/ccBQtR2X.s:95     .text:0000000000000064 .L0 
     /tmp/ccBQtR2X.s:100    .text:0000000000000074 .L0 
     /tmp/ccBQtR2X.s:101    .text:0000000000000074 .L0 
     /tmp/ccBQtR2X.s:105    .text:000000000000007c .L0 
     /tmp/ccBQtR2X.s:113    .text:0000000000000080 .L0 
     /tmp/ccBQtR2X.s:114    .text:0000000000000080 .L0 
     /tmp/ccBQtR2X.s:115    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000080 .L0 
     /tmp/ccBQtR2X.s:123    .text:0000000000000088 .L0 
     /tmp/ccBQtR2X.s:124    .text:0000000000000088 .L0 
     /tmp/ccBQtR2X.s:128    .text:000000000000008c .L0 
     /tmp/ccBQtR2X.s:133    .text:0000000000000090 .L0 
     /tmp/ccBQtR2X.s:134    .text:0000000000000090 .L0 
     /tmp/ccBQtR2X.s:135    .text:0000000000000090 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000090 .L0 
     /tmp/ccBQtR2X.s:143    .text:0000000000000098 .L0 
     /tmp/ccBQtR2X.s:144    .text:0000000000000098 .L0 
     /tmp/ccBQtR2X.s:151    .text:000000000000009c .L0 
     /tmp/ccBQtR2X.s:152    .text:000000000000009c .L0 
     /tmp/ccBQtR2X.s:153    .text:000000000000009c .L0 
GAS LISTING /tmp/ccBQtR2X.s 			page 26


  src/../h/riscv.hpp:200    .text:000000000000009c .L0 
     /tmp/ccBQtR2X.s:161    .text:00000000000000a4 .L0 
     /tmp/ccBQtR2X.s:162    .text:00000000000000a4 .L0 
     /tmp/ccBQtR2X.s:168    .text:00000000000000a8 .L0 
     /tmp/ccBQtR2X.s:179    .text:00000000000000b0 .L0 
     /tmp/ccBQtR2X.s:191    .text:00000000000000b8 .L0 
     /tmp/ccBQtR2X.s:205    .text:00000000000000c0 .L0 
     /tmp/ccBQtR2X.s:221    .text:00000000000000c8 .L0 
     /tmp/ccBQtR2X.s:239    .text:00000000000000d0 .L0 
     /tmp/ccBQtR2X.s:259    .text:00000000000000d8 .L0 
     /tmp/ccBQtR2X.s:281    .text:00000000000000e0 .L0 
     /tmp/ccBQtR2X.s:305    .text:00000000000000e8 .L0 
     /tmp/ccBQtR2X.s:331    .text:00000000000000f0 .L0 
     /tmp/ccBQtR2X.s:359    .text:00000000000000f8 .L0 
     /tmp/ccBQtR2X.s:363    .text:0000000000000100 .L0 
     /tmp/ccBQtR2X.s:364    .text:0000000000000100 .L0 
     /tmp/ccBQtR2X.s:365    .text:0000000000000100 .L0 
       src/riscv.cpp:144    .text:0000000000000100 .L0 
     /tmp/ccBQtR2X.s:372    .text:0000000000000104 .L0 
     /tmp/ccBQtR2X.s:374    .text:0000000000000104 .L0 
     /tmp/ccBQtR2X.s:377    .text:000000000000010c .L0 
       src/riscv.cpp:147    .text:000000000000010c .L0 
     /tmp/ccBQtR2X.s:399    .text:0000000000000114 .L0 
     /tmp/ccBQtR2X.s:400    .text:0000000000000114 .L0 
     /tmp/ccBQtR2X.s:401    .text:0000000000000114 .L0 
       src/riscv.cpp:28     .text:0000000000000114 .L0 
     /tmp/ccBQtR2X.s:408    .text:0000000000000118 .L0 
     /tmp/ccBQtR2X.s:410    .text:0000000000000118 .L0 
     /tmp/ccBQtR2X.s:413    .text:0000000000000120 .L0 
       src/riscv.cpp:31     .text:0000000000000120 .L0 
     /tmp/ccBQtR2X.s:426    .text:0000000000000124 .L0 
     /tmp/ccBQtR2X.s:427    .text:0000000000000124 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000124 .L0 
     /tmp/ccBQtR2X.s:439    .text:0000000000000128 .L0 
     /tmp/ccBQtR2X.s:440    .text:0000000000000128 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000128 .L0 
     /tmp/ccBQtR2X.s:453    .text:000000000000012c .L0 
     /tmp/ccBQtR2X.s:454    .text:0000000000000130 .L0 
     /tmp/ccBQtR2X.s:455    .text:0000000000000130 .L0 
     /tmp/ccBQtR2X.s:457    .text:0000000000000134 .L0 
     /tmp/ccBQtR2X.s:458    .text:0000000000000134 .L0 
     /tmp/ccBQtR2X.s:460    .text:0000000000000138 .L0 
     /tmp/ccBQtR2X.s:462    .text:000000000000013c .L0 
     /tmp/ccBQtR2X.s:464    .text:0000000000000140 .L0 
     /tmp/ccBQtR2X.s:466    .text:0000000000000144 .L0 
     /tmp/ccBQtR2X.s:470    .text:0000000000000148 .L0 
     /tmp/ccBQtR2X.s:477    .text:0000000000000148 .L0 
     /tmp/ccBQtR2X.s:478    .text:0000000000000148 .L0 
     /tmp/ccBQtR2X.s:479    .text:0000000000000148 .L0 
       src/riscv.cpp:37     .text:0000000000000148 .L0 
     /tmp/ccBQtR2X.s:486    .text:000000000000014c .L0 
     /tmp/ccBQtR2X.s:488    .text:000000000000014c .L0 
     /tmp/ccBQtR2X.s:491    .text:0000000000000154 .L0 
       src/riscv.cpp:40     .text:0000000000000154 .L0 
     /tmp/ccBQtR2X.s:504    .text:000000000000015c .L0 
     /tmp/ccBQtR2X.s:505    .text:000000000000015c .L0 
       src/riscv.cpp:48     .text:000000000000015c .L0 
GAS LISTING /tmp/ccBQtR2X.s 			page 27


     /tmp/ccBQtR2X.s:512    .text:0000000000000160 .L0 
     /tmp/ccBQtR2X.s:513    .text:0000000000000160 .L0 
       src/riscv.cpp:50     .text:0000000000000160 .L0 
     /tmp/ccBQtR2X.s:519    .text:0000000000000164 .L0 
     /tmp/ccBQtR2X.s:520    .text:0000000000000164 .L0 
       src/riscv.cpp:53     .text:0000000000000164 .L0 
     /tmp/ccBQtR2X.s:526    .text:0000000000000168 .L0 
     /tmp/ccBQtR2X.s:528    .text:0000000000000168 .L0 
     /tmp/ccBQtR2X.s:531    .text:0000000000000170 .L0 
     /tmp/ccBQtR2X.s:533    .text:0000000000000174 .L0 
     /tmp/ccBQtR2X.s:534    .text:0000000000000174 .L0 
     /tmp/ccBQtR2X.s:539    .text:000000000000017c .L0 
       src/riscv.cpp:58     .text:000000000000017c .L0 
     /tmp/ccBQtR2X.s:551    .text:0000000000000184 .L0 
     /tmp/ccBQtR2X.s:559    .text:000000000000018c .L0 
     /tmp/ccBQtR2X.s:560    .text:000000000000018c .L0 
     /tmp/ccBQtR2X.s:561    .text:000000000000018c .L0 
     /tmp/ccBQtR2X.s:564    .text:0000000000000194 .L0 
       src/riscv.cpp:65     .text:0000000000000194 .L0 
     /tmp/ccBQtR2X.s:576    .text:000000000000019c .L0 
     /tmp/ccBQtR2X.s:577    .text:000000000000019c .L0 
     /tmp/ccBQtR2X.s:581    .text:00000000000001a8 .L0 
     /tmp/ccBQtR2X.s:582    .text:00000000000001a8 .L0 
     /tmp/ccBQtR2X.s:590    .text:00000000000001b4 .L0 
     /tmp/ccBQtR2X.s:591    .text:00000000000001b4 .L0 
       src/riscv.cpp:76     .text:00000000000001b4 .L0 
     /tmp/ccBQtR2X.s:598    .text:00000000000001b8 .L0 
     /tmp/ccBQtR2X.s:600    .text:00000000000001b8 .L0 
     /tmp/ccBQtR2X.s:610    .text:00000000000001c8 .L0 
     /tmp/ccBQtR2X.s:611    .text:00000000000001c8 .L0 
       src/riscv.cpp:83     .text:00000000000001c8 .L0 
     /tmp/ccBQtR2X.s:618    .text:00000000000001cc .L0 
     /tmp/ccBQtR2X.s:619    .text:00000000000001cc .L0 
       src/riscv.cpp:85     .text:00000000000001cc .L0 
     /tmp/ccBQtR2X.s:625    .text:00000000000001d0 .L0 
     /tmp/ccBQtR2X.s:626    .text:00000000000001d0 .L0 
       src/riscv.cpp:88     .text:00000000000001d0 .L0 
     /tmp/ccBQtR2X.s:632    .text:00000000000001d4 .L0 
     /tmp/ccBQtR2X.s:634    .text:00000000000001d4 .L0 
     /tmp/ccBQtR2X.s:637    .text:00000000000001dc .L0 
     /tmp/ccBQtR2X.s:639    .text:00000000000001e0 .L0 
     /tmp/ccBQtR2X.s:640    .text:00000000000001e0 .L0 
     /tmp/ccBQtR2X.s:645    .text:00000000000001e8 .L0 
       src/riscv.cpp:93     .text:00000000000001e8 .L0 
     /tmp/ccBQtR2X.s:657    .text:00000000000001f0 .L0 
     /tmp/ccBQtR2X.s:665    .text:00000000000001f8 .L0 
     /tmp/ccBQtR2X.s:666    .text:00000000000001f8 .L0 
       src/riscv.cpp:99     .text:00000000000001f8 .L0 
     /tmp/ccBQtR2X.s:675    .text:0000000000000200 .L0 
     /tmp/ccBQtR2X.s:676    .text:0000000000000200 .L0 
       src/riscv.cpp:102    .text:0000000000000200 .L0 
     /tmp/ccBQtR2X.s:683    .text:0000000000000204 .L0 
     /tmp/ccBQtR2X.s:685    .text:0000000000000204 .L0 
     /tmp/ccBQtR2X.s:688    .text:000000000000020c .L0 
     /tmp/ccBQtR2X.s:690    .text:0000000000000210 .L0 
     /tmp/ccBQtR2X.s:691    .text:0000000000000210 .L0 
     /tmp/ccBQtR2X.s:696    .text:0000000000000218 .L0 
GAS LISTING /tmp/ccBQtR2X.s 			page 28


       src/riscv.cpp:106    .text:0000000000000218 .L0 
     /tmp/ccBQtR2X.s:708    .text:0000000000000220 .L0 
     /tmp/ccBQtR2X.s:716    .text:0000000000000228 .L0 
     /tmp/ccBQtR2X.s:717    .text:0000000000000228 .L0 
     /tmp/ccBQtR2X.s:718    .text:0000000000000228 .L0 
       src/riscv.cpp:114    .text:0000000000000228 .L0 
     /tmp/ccBQtR2X.s:725    .text:000000000000022c .L0 
     /tmp/ccBQtR2X.s:727    .text:000000000000022c .L0 
     /tmp/ccBQtR2X.s:729    .text:0000000000000230 .L0 
     /tmp/ccBQtR2X.s:730    .text:0000000000000230 .L0 
     /tmp/ccBQtR2X.s:733    .text:0000000000000238 .L0 
     /tmp/ccBQtR2X.s:737    .text:000000000000023c .L0 
       src/riscv.cpp:123    .text:000000000000023c .L0 
     /tmp/ccBQtR2X.s:749    .text:0000000000000244 .L0 
     /tmp/ccBQtR2X.s:758    .text:000000000000024c .L0 
     /tmp/ccBQtR2X.s:759    .text:000000000000024c .L0 
     /tmp/ccBQtR2X.s:760    .text:000000000000024c .L0 
       src/riscv.cpp:131    .text:000000000000024c .L0 
     /tmp/ccBQtR2X.s:767    .text:0000000000000250 .L0 
     /tmp/ccBQtR2X.s:769    .text:0000000000000250 .L0 
     /tmp/ccBQtR2X.s:772    .text:0000000000000258 .L0 
       src/riscv.cpp:136    .text:0000000000000258 .L0 
     /tmp/ccBQtR2X.s:796    .text:0000000000000260 .L0 
     /tmp/ccBQtR2X.s:797    .text:0000000000000260 .L0 
     /tmp/ccBQtR2X.s:798    .text:0000000000000260 .L0 
     /tmp/ccBQtR2X.s:805    .text:0000000000000268 .L0 
     /tmp/ccBQtR2X.s:809    .text:000000000000026c .L0 
     /tmp/ccBQtR2X.s:820    .text:000000000000026c .L0 
     /tmp/ccBQtR2X.s:577    .text:000000000000019c .L0 
     /tmp/ccBQtR2X.s:107    .text:0000000000000080 .L27
     /tmp/ccBQtR2X.s:781    .text:0000000000000260 .L28
     /tmp/ccBQtR2X.s:447    .text:000000000000012c .L3
     /tmp/ccBQtR2X.s:386    .text:0000000000000114 .L29
     /tmp/ccBQtR2X.s:469    .text:0000000000000148 .L30
     /tmp/ccBQtR2X.s:500    .text:000000000000015c .L31
     /tmp/ccBQtR2X.s:554    .text:000000000000018c .L32
     /tmp/ccBQtR2X.s:573    .text:000000000000019c .L33
     /tmp/ccBQtR2X.s:586    .text:00000000000001b4 .L34
     /tmp/ccBQtR2X.s:606    .text:00000000000001c8 .L35
     /tmp/ccBQtR2X.s:660    .text:00000000000001f8 .L36
     /tmp/ccBQtR2X.s:711    .text:0000000000000228 .L37
     /tmp/ccBQtR2X.s:753    .text:000000000000024c .L38
     /tmp/ccBQtR2X.s:420    .text:0000000000000124 .L6
     /tmp/ccBQtR2X.s:548    .text:0000000000000184 .L22
     /tmp/ccBQtR2X.s:536    .text:000000000000017c .L9
     /tmp/ccBQtR2X.s:654    .text:00000000000001f0 .L23
     /tmp/ccBQtR2X.s:642    .text:00000000000001e8 .L14
     /tmp/ccBQtR2X.s:705    .text:0000000000000220 .L24
     /tmp/ccBQtR2X.s:693    .text:0000000000000218 .L16
     /tmp/ccBQtR2X.s:746    .text:0000000000000244 .L25
     /tmp/ccBQtR2X.s:734    .text:000000000000023c .L18
     /tmp/ccBQtR2X.s:2548   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccBQtR2X.s:4289   .debug_str:000000000000096a .LASF179
     /tmp/ccBQtR2X.s:4345   .debug_str:0000000000000bcf .LASF180
     /tmp/ccBQtR2X.s:4083   .debug_str:00000000000002e9 .LASF181
     /tmp/ccBQtR2X.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccBQtR2X.s:812    .text:000000000000026c .Letext0
GAS LISTING /tmp/ccBQtR2X.s 			page 29


     /tmp/ccBQtR2X.s:3989   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccBQtR2X.s:4109   .debug_str:00000000000003be .LASF0
     /tmp/ccBQtR2X.s:4139   .debug_str:00000000000004bb .LASF1
     /tmp/ccBQtR2X.s:4235   .debug_str:00000000000007ec .LASF2
     /tmp/ccBQtR2X.s:4241   .debug_str:000000000000081c .LASF4
     /tmp/ccBQtR2X.s:4117   .debug_str:00000000000003f2 .LASF3
     /tmp/ccBQtR2X.s:4005   .debug_str:0000000000000072 .LASF5
     /tmp/ccBQtR2X.s:4203   .debug_str:00000000000006d1 .LASF6
     /tmp/ccBQtR2X.s:4129   .debug_str:000000000000047c .LASF7
     /tmp/ccBQtR2X.s:4081   .debug_str:00000000000002d9 .LASF8
     /tmp/ccBQtR2X.s:4091   .debug_str:000000000000033f .LASF9
     /tmp/ccBQtR2X.s:4029   .debug_str:0000000000000133 .LASF10
     /tmp/ccBQtR2X.s:4073   .debug_str:0000000000000289 .LASF11
     /tmp/ccBQtR2X.s:4043   .debug_str:0000000000000187 .LASF12
     /tmp/ccBQtR2X.s:4027   .debug_str:0000000000000123 .LASF13
     /tmp/ccBQtR2X.s:4277   .debug_str:0000000000000937 .LASF14
     /tmp/ccBQtR2X.s:4059   .debug_str:00000000000001e7 .LASF15
     /tmp/ccBQtR2X.s:4263   .debug_str:00000000000008a8 .LASF16
     /tmp/ccBQtR2X.s:4199   .debug_str:00000000000006b5 .LASF30
     /tmp/ccBQtR2X.s:4015   .debug_str:00000000000000b3 .LASF62
     /tmp/ccBQtR2X.s:4031   .debug_str:0000000000000142 .LASF17
     /tmp/ccBQtR2X.s:4013   .debug_str:00000000000000ae .LASF18
     /tmp/ccBQtR2X.s:4137   .debug_str:00000000000004b6 .LASF19
     /tmp/ccBQtR2X.s:4033   .debug_str:0000000000000147 .LASF20
     /tmp/ccBQtR2X.s:4181   .debug_str:000000000000063b .LASF21
     /tmp/ccBQtR2X.s:4259   .debug_str:0000000000000891 .LASF22
     /tmp/ccBQtR2X.s:4099   .debug_str:0000000000000370 .LASF23
     /tmp/ccBQtR2X.s:4205   .debug_str:00000000000006e4 .LASF25
     /tmp/ccBQtR2X.s:4297   .debug_str:0000000000000a57 .LASF24
     /tmp/ccBQtR2X.s:4057   .debug_str:00000000000001c6 .LASF26
     /tmp/ccBQtR2X.s:4339   .debug_str:0000000000000b9e .LASF84
     /tmp/ccBQtR2X.s:4171   .debug_str:00000000000005e4 .LASF86
     /tmp/ccBQtR2X.s:3991   .debug_str:0000000000000000 .LASF32
     /tmp/ccBQtR2X.s:4145   .debug_str:00000000000004df .LASF34
     /tmp/ccBQtR2X.s:4303   .debug_str:0000000000000a85 .LASF27
     /tmp/ccBQtR2X.s:4119   .debug_str:0000000000000404 .LASF28
     /tmp/ccBQtR2X.s:4285   .debug_str:000000000000095d .LASF29
     /tmp/ccBQtR2X.s:4079   .debug_str:00000000000002cf .LASF31
     /tmp/ccBQtR2X.s:4365   .debug_str:0000000000000c98 .LASF33
     /tmp/ccBQtR2X.s:4019   .debug_str:00000000000000cf .LASF35
     /tmp/ccBQtR2X.s:3995   .debug_str:000000000000000c .LASF36
     /tmp/ccBQtR2X.s:4197   .debug_str:00000000000006a2 .LASF37
     /tmp/ccBQtR2X.s:4257   .debug_str:0000000000000880 .LASF38
     /tmp/ccBQtR2X.s:4041   .debug_str:000000000000017e .LASF39
     /tmp/ccBQtR2X.s:4353   .debug_str:0000000000000c08 .LASF40
     /tmp/ccBQtR2X.s:4357   .debug_str:0000000000000c3b .LASF182
     /tmp/ccBQtR2X.s:4101   .debug_str:0000000000000376 .LASF183
     /tmp/ccBQtR2X.s:4347   .debug_str:0000000000000bdd .LASF41
     /tmp/ccBQtR2X.s:4127   .debug_str:000000000000045f .LASF42
     /tmp/ccBQtR2X.s:4325   .debug_str:0000000000000b54 .LASF43
     /tmp/ccBQtR2X.s:4311   .debug_str:0000000000000ab9 .LASF184
     /tmp/ccBQtR2X.s:4269   .debug_str:00000000000008d8 .LASF44
     /tmp/ccBQtR2X.s:4173   .debug_str:0000000000000610 .LASF45
     /tmp/ccBQtR2X.s:4265   .debug_str:00000000000008be .LASF46
     /tmp/ccBQtR2X.s:4071   .debug_str:0000000000000272 .LASF54
     /tmp/ccBQtR2X.s:4237   .debug_str:00000000000007fa .LASF185
     /tmp/ccBQtR2X.s:4229   .debug_str:00000000000007ba .LASF186
GAS LISTING /tmp/ccBQtR2X.s 			page 30


     /tmp/ccBQtR2X.s:4211   .debug_str:000000000000072c .LASF47
     /tmp/ccBQtR2X.s:4183   .debug_str:0000000000000640 .LASF48
     /tmp/ccBQtR2X.s:4135   .debug_str:00000000000004ad .LASF49
     /tmp/ccBQtR2X.s:4023   .debug_str:00000000000000ef .LASF50
     /tmp/ccBQtR2X.s:4159   .debug_str:0000000000000575 .LASF51
     /tmp/ccBQtR2X.s:4063   .debug_str:0000000000000223 .LASF52
     /tmp/ccBQtR2X.s:4201   .debug_str:00000000000006c5 .LASF53
     /tmp/ccBQtR2X.s:4327   .debug_str:0000000000000b5e .LASF55
     /tmp/ccBQtR2X.s:4373   .debug_str:0000000000000cc1 .LASF56
     /tmp/ccBQtR2X.s:4359   .debug_str:0000000000000c4f .LASF57
     /tmp/ccBQtR2X.s:4253   .debug_str:0000000000000861 .LASF58
     /tmp/ccBQtR2X.s:4169   .debug_str:00000000000005c7 .LASF59
     /tmp/ccBQtR2X.s:4225   .debug_str:00000000000007ac .LASF60
     /tmp/ccBQtR2X.s:3999   .debug_str:0000000000000024 .LASF61
     /tmp/ccBQtR2X.s:4281   .debug_str:000000000000094a .LASF63
     /tmp/ccBQtR2X.s:4021   .debug_str:00000000000000e1 .LASF97
     /tmp/ccBQtR2X.s:4149   .debug_str:000000000000050a .LASF99
     /tmp/ccBQtR2X.s:4039   .debug_str:0000000000000172 .LASF90
     /tmp/ccBQtR2X.s:4243   .debug_str:0000000000000823 .LASF64
     /tmp/ccBQtR2X.s:4003   .debug_str:0000000000000066 .LASF65
     /tmp/ccBQtR2X.s:4283   .debug_str:0000000000000952 .LASF66
     /tmp/ccBQtR2X.s:4177   .debug_str:000000000000061c .LASF67
     /tmp/ccBQtR2X.s:4017   .debug_str:00000000000000c3 .LASF68
     /tmp/ccBQtR2X.s:4305   .debug_str:0000000000000a8a .LASF69
     /tmp/ccBQtR2X.s:4147   .debug_str:00000000000004fd .LASF70
     /tmp/ccBQtR2X.s:4315   .debug_str:0000000000000ae2 .LASF71
     /tmp/ccBQtR2X.s:4193   .debug_str:000000000000068c .LASF174
     /tmp/ccBQtR2X.s:4219   .debug_str:000000000000077d .LASF72
     /tmp/ccBQtR2X.s:4165   .debug_str:000000000000059f .LASF73
     /tmp/ccBQtR2X.s:4175   .debug_str:0000000000000615 .LASF74
     /tmp/ccBQtR2X.s:4011   .debug_str:000000000000009d .LASF75
     /tmp/ccBQtR2X.s:4087   .debug_str:0000000000000317 .LASF76
     /tmp/ccBQtR2X.s:4163   .debug_str:0000000000000592 .LASF77
     /tmp/ccBQtR2X.s:4275   .debug_str:000000000000092a .LASF78
     /tmp/ccBQtR2X.s:4317   .debug_str:0000000000000afb .LASF79
     /tmp/ccBQtR2X.s:4061   .debug_str:00000000000001fd .LASF80
     /tmp/ccBQtR2X.s:4271   .debug_str:00000000000008dd .LASF81
     /tmp/ccBQtR2X.s:4069   .debug_str:0000000000000263 .LASF82
     /tmp/ccBQtR2X.s:4299   .debug_str:0000000000000a61 .LASF83
     /tmp/ccBQtR2X.s:4143   .debug_str:00000000000004d9 .LASF85
     /tmp/ccBQtR2X.s:4293   .debug_str:0000000000000a3d .LASF87
     /tmp/ccBQtR2X.s:4361   .debug_str:0000000000000c6a .LASF88
     /tmp/ccBQtR2X.s:4355   .debug_str:0000000000000c1a .LASF89
     /tmp/ccBQtR2X.s:4287   .debug_str:0000000000000962 .LASF187
     /tmp/ccBQtR2X.s:4213   .debug_str:000000000000073f .LASF91
     /tmp/ccBQtR2X.s:3993   .debug_str:0000000000000007 .LASF92
     /tmp/ccBQtR2X.s:4049   .debug_str:00000000000001ac .LASF93
     /tmp/ccBQtR2X.s:4301   .debug_str:0000000000000a7d .LASF94
     /tmp/ccBQtR2X.s:4295   .debug_str:0000000000000a4d .LASF95
     /tmp/ccBQtR2X.s:4261   .debug_str:000000000000089f .LASF96
     /tmp/ccBQtR2X.s:4045   .debug_str:0000000000000197 .LASF188
     /tmp/ccBQtR2X.s:4001   .debug_str:000000000000003e .LASF189
     /tmp/ccBQtR2X.s:4051   .debug_str:00000000000001b2 .LASF98
     /tmp/ccBQtR2X.s:4125   .debug_str:000000000000044c .LASF100
     /tmp/ccBQtR2X.s:4155   .debug_str:0000000000000543 .LASF101
     /tmp/ccBQtR2X.s:4313   .debug_str:0000000000000abe .LASF102
     /tmp/ccBQtR2X.s:4367   .debug_str:0000000000000ca5 .LASF103
GAS LISTING /tmp/ccBQtR2X.s 			page 31


     /tmp/ccBQtR2X.s:4209   .debug_str:0000000000000716 .LASF104
     /tmp/ccBQtR2X.s:4251   .debug_str:0000000000000850 .LASF105
     /tmp/ccBQtR2X.s:4227   .debug_str:00000000000007b5 .LASF106
     /tmp/ccBQtR2X.s:4141   .debug_str:00000000000004ce .LASF107
     /tmp/ccBQtR2X.s:4191   .debug_str:0000000000000678 .LASF108
     /tmp/ccBQtR2X.s:4053   .debug_str:00000000000001bb .LASF109
     /tmp/ccBQtR2X.s:4025   .debug_str:000000000000010c .LASF110
     /tmp/ccBQtR2X.s:4279   .debug_str:0000000000000943 .LASF111
     /tmp/ccBQtR2X.s:4009   .debug_str:0000000000000084 .LASF112
     /tmp/ccBQtR2X.s:4097   .debug_str:000000000000036a .LASF113
     /tmp/ccBQtR2X.s:4157   .debug_str:000000000000055c .LASF114
     /tmp/ccBQtR2X.s:4231   .debug_str:00000000000007d1 .LASF115
     /tmp/ccBQtR2X.s:4075   .debug_str:0000000000000298 .LASF116
     /tmp/ccBQtR2X.s:4291   .debug_str:0000000000000a2e .LASF117
     /tmp/ccBQtR2X.s:4217   .debug_str:000000000000075b .LASF118
     /tmp/ccBQtR2X.s:4107   .debug_str:00000000000003b8 .LASF119
     /tmp/ccBQtR2X.s:4151   .debug_str:0000000000000523 .LASF120
     /tmp/ccBQtR2X.s:3997   .debug_str:000000000000001c .LASF121
     /tmp/ccBQtR2X.s:4319   .debug_str:0000000000000b1b .LASF122
     /tmp/ccBQtR2X.s:4255   .debug_str:000000000000086c .LASF123
     /tmp/ccBQtR2X.s:4341   .debug_str:0000000000000bb2 .LASF124
     /tmp/ccBQtR2X.s:4187   .debug_str:000000000000065b .LASF125
     /tmp/ccBQtR2X.s:4329   .debug_str:0000000000000b7c .LASF126
     /tmp/ccBQtR2X.s:4133   .debug_str:00000000000004a2 .LASF190
     /tmp/ccBQtR2X.s:4121   .debug_str:0000000000000421 .LASF127
     /tmp/ccBQtR2X.s:4067   .debug_str:000000000000025a .LASF128
     /tmp/ccBQtR2X.s:4351   .debug_str:0000000000000bff .LASF129
     /tmp/ccBQtR2X.s:4095   .debug_str:000000000000035f .LASF130
     /tmp/ccBQtR2X.s:4105   .debug_str:00000000000003a0 .LASF131
     /tmp/ccBQtR2X.s:4249   .debug_str:0000000000000842 .LASF132
     /tmp/ccBQtR2X.s:4065   .debug_str:000000000000023f .LASF133
     /tmp/ccBQtR2X.s:4111   .debug_str:00000000000003cb .LASF134
     /tmp/ccBQtR2X.s:4321   .debug_str:0000000000000b35 .LASF135
     /tmp/ccBQtR2X.s:4309   .debug_str:0000000000000ab0 .LASF136
     /tmp/ccBQtR2X.s:4161   .debug_str:000000000000057d .LASF140
     /tmp/ccBQtR2X.s:4369   .debug_str:0000000000000cb0 .LASF137
     /tmp/ccBQtR2X.s:4189   .debug_str:0000000000000663 .LASF138
     /tmp/ccBQtR2X.s:4215   .debug_str:0000000000000754 .LASF139
     /tmp/ccBQtR2X.s:4221   .debug_str:0000000000000785 .LASF141
     /tmp/ccBQtR2X.s:4185   .debug_str:0000000000000654 .LASF142
     /tmp/ccBQtR2X.s:4131   .debug_str:000000000000048f .LASF143
     /tmp/ccBQtR2X.s:4343   .debug_str:0000000000000bc7 .LASF144
     /tmp/ccBQtR2X.s:4273   .debug_str:0000000000000916 .LASF145
     /tmp/ccBQtR2X.s:4179   .debug_str:0000000000000633 .LASF146
     /tmp/ccBQtR2X.s:4077   .debug_str:00000000000002bb .LASF147
     /tmp/ccBQtR2X.s:4153   .debug_str:000000000000053b .LASF148
     /tmp/ccBQtR2X.s:4223   .debug_str:0000000000000798 .LASF149
     /tmp/ccBQtR2X.s:4371   .debug_str:0000000000000cb9 .LASF150
     /tmp/ccBQtR2X.s:4115   .debug_str:00000000000003de .LASF151
     /tmp/ccBQtR2X.s:4047   .debug_str:00000000000001a5 .LASF152
     /tmp/ccBQtR2X.s:4245   .debug_str:0000000000000828 .LASF153
     /tmp/ccBQtR2X.s:4247   .debug_str:000000000000083b .LASF154
     /tmp/ccBQtR2X.s:4037   .debug_str:000000000000015f .LASF155
     /tmp/ccBQtR2X.s:4055   .debug_str:00000000000001c0 .LASF156
     /tmp/ccBQtR2X.s:4103   .debug_str:000000000000038e .LASF157
     /tmp/ccBQtR2X.s:4113   .debug_str:00000000000003d8 .LASF158
     /tmp/ccBQtR2X.s:4093   .debug_str:000000000000034d .LASF159
GAS LISTING /tmp/ccBQtR2X.s 			page 32


     /tmp/ccBQtR2X.s:4007   .debug_str:0000000000000079 .LASF160
     /tmp/ccBQtR2X.s:4239   .debug_str:0000000000000804 .LASF161
     /tmp/ccBQtR2X.s:4233   .debug_str:00000000000007e1 .LASF162
     /tmp/ccBQtR2X.s:4363   .debug_str:0000000000000c80 .LASF163
     /tmp/ccBQtR2X.s:4333   .debug_str:0000000000000b87 .LASF164
     /tmp/ccBQtR2X.s:4349   .debug_str:0000000000000be9 .LASF165
     /tmp/ccBQtR2X.s:4035   .debug_str:0000000000000155 .LASF166
     /tmp/ccBQtR2X.s:4167   .debug_str:00000000000005b1 .LASF167
     /tmp/ccBQtR2X.s:4337   .debug_str:0000000000000b99 .LASF168
     /tmp/ccBQtR2X.s:4195   .debug_str:0000000000000691 .LASF169
     /tmp/ccBQtR2X.s:4307   .debug_str:0000000000000aa1 .LASF170
     /tmp/ccBQtR2X.s:4089   .debug_str:0000000000000323 .LASF171
     /tmp/ccBQtR2X.s:4207   .debug_str:0000000000000701 .LASF172
     /tmp/ccBQtR2X.s:4123   .debug_str:000000000000042a .LASF173
     /tmp/ccBQtR2X.s:46     .text:0000000000000020 .LFB48
     /tmp/ccBQtR2X.s:810    .text:000000000000026c .LFE48
     /tmp/ccBQtR2X.s:4267   .debug_str:00000000000008d1 .LASF175
     /tmp/ccBQtR2X.s:3587   .debug_loc:0000000000000000 .LLST0
     /tmp/ccBQtR2X.s:3937   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccBQtR2X.s:4331   .debug_str:0000000000000b82 .LASF176
     /tmp/ccBQtR2X.s:3668   .debug_loc:0000000000000130 .LLST1
     /tmp/ccBQtR2X.s:4335   .debug_str:0000000000000b91 .LASF177
     /tmp/ccBQtR2X.s:3679   .debug_loc:0000000000000166 .LLST2
     /tmp/ccBQtR2X.s:3690   .debug_loc:000000000000019c .LLST3
     /tmp/ccBQtR2X.s:397    .text:0000000000000114 .LBB126
     /tmp/ccBQtR2X.s:421    .text:0000000000000124 .LBE126
     /tmp/ccBQtR2X.s:3749   .debug_loc:00000000000002b6 .LLST23
     /tmp/ccBQtR2X.s:3756   .debug_loc:00000000000002d9 .LLST24
     /tmp/ccBQtR2X.s:411    .text:0000000000000120 .LVL11
     /tmp/ccBQtR2X.s:475    .text:0000000000000148 .LBB115
     /tmp/ccBQtR2X.s:497    .text:0000000000000158 .LBE115
     /tmp/ccBQtR2X.s:3763   .debug_loc:00000000000002fc .LLST21
     /tmp/ccBQtR2X.s:3770   .debug_loc:000000000000031f .LLST22
     /tmp/ccBQtR2X.s:489    .text:0000000000000154 .LVL17
     /tmp/ccBQtR2X.s:3777   .debug_loc:0000000000000342 .LLST18
     /tmp/ccBQtR2X.s:3784   .debug_loc:0000000000000365 .LLST19
     /tmp/ccBQtR2X.s:3791   .debug_loc:0000000000000388 .LLST20
     /tmp/ccBQtR2X.s:529    .text:0000000000000170 .LVL22
     /tmp/ccBQtR2X.s:557    .text:000000000000018c .LBB95
     /tmp/ccBQtR2X.s:570    .text:0000000000000198 .LBE95
     /tmp/ccBQtR2X.s:3798   .debug_loc:00000000000003ab .LLST17
     /tmp/ccBQtR2X.s:562    .text:0000000000000194 .LVL26
     /tmp/ccBQtR2X.s:588    .text:00000000000001b4 .LBB81
     /tmp/ccBQtR2X.s:603    .text:00000000000001c4 .LBE81
     /tmp/ccBQtR2X.s:3805   .debug_loc:00000000000003ce .LLST16
     /tmp/ccBQtR2X.s:602    .text:00000000000001c4 .LVL32
     /tmp/ccBQtR2X.s:3812   .debug_loc:00000000000003f1 .LLST13
     /tmp/ccBQtR2X.s:3819   .debug_loc:0000000000000414 .LLST14
     /tmp/ccBQtR2X.s:3826   .debug_loc:0000000000000437 .LLST15
     /tmp/ccBQtR2X.s:635    .text:00000000000001dc .LVL37
     /tmp/ccBQtR2X.s:3833   .debug_loc:000000000000045a .LLST10
     /tmp/ccBQtR2X.s:3840   .debug_loc:000000000000047d .LLST11
     /tmp/ccBQtR2X.s:3847   .debug_loc:00000000000004a0 .LLST12
     /tmp/ccBQtR2X.s:686    .text:000000000000020c .LVL43
     /tmp/ccBQtR2X.s:3854   .debug_loc:00000000000004c3 .LLST8
     /tmp/ccBQtR2X.s:3871   .debug_loc:000000000000050e .LLST9
     /tmp/ccBQtR2X.s:731    .text:0000000000000238 .LVL48
GAS LISTING /tmp/ccBQtR2X.s 			page 33


     /tmp/ccBQtR2X.s:756    .text:000000000000024c .LBB61
     /tmp/ccBQtR2X.s:778    .text:000000000000025c .LBE61
     /tmp/ccBQtR2X.s:3882   .debug_loc:0000000000000544 .LLST6
     /tmp/ccBQtR2X.s:3889   .debug_loc:0000000000000567 .LLST7
     /tmp/ccBQtR2X.s:770    .text:0000000000000258 .LVL54
     /tmp/ccBQtR2X.s:361    .text:0000000000000100 .LBB60
     /tmp/ccBQtR2X.s:383    .text:0000000000000110 .LBE60
     /tmp/ccBQtR2X.s:3896   .debug_loc:000000000000058a .LLST4
     /tmp/ccBQtR2X.s:3903   .debug_loc:00000000000005ad .LLST5
     /tmp/ccBQtR2X.s:375    .text:000000000000010c .LVL8
     /tmp/ccBQtR2X.s:111    .text:0000000000000080 .LBB43
     /tmp/ccBQtR2X.s:126    .text:000000000000008c .LBE43
     /tmp/ccBQtR2X.s:131    .text:0000000000000090 .LBB45
     /tmp/ccBQtR2X.s:147    .text:000000000000009c .LBE45
     /tmp/ccBQtR2X.s:149    .text:000000000000009c .LBB47
     /tmp/ccBQtR2X.s:165    .text:00000000000000a8 .LBE47
     /tmp/ccBQtR2X.s:424    .text:0000000000000124 .LBB138
     /tmp/ccBQtR2X.s:435    .text:0000000000000128 .LBE138
     /tmp/ccBQtR2X.s:3910   .debug_loc:00000000000005d0 .LLST25
     /tmp/ccBQtR2X.s:437    .text:0000000000000128 .LBB140
     /tmp/ccBQtR2X.s:449    .text:000000000000012c .LBE140
     /tmp/ccBQtR2X.s:3917   .debug_loc:00000000000005f3 .LLST26
     /tmp/ccBQtR2X.s:583    .text:00000000000001b0 .LVL29
     /tmp/ccBQtR2X.s:64     .text:000000000000003c .LBB39
     /tmp/ccBQtR2X.s:81     .text:0000000000000048 .LBE39
     /tmp/ccBQtR2X.s:794    .text:0000000000000260 .LBB154
     /tmp/ccBQtR2X.s:807    .text:000000000000026c .LBE154
     /tmp/ccBQtR2X.s:102    .text:000000000000007c .LVL1
     /tmp/ccBQtR2X.s:10     .text:0000000000000000 .LFB47
     /tmp/ccBQtR2X.s:40     .text:0000000000000020 .LFE47
     /tmp/ccBQtR2X.s:4323   .debug_str:0000000000000b4f .LASF178
     /tmp/ccBQtR2X.s:4085   .debug_str:0000000000000307 .LASF191
     /tmp/ccBQtR2X.s:79     .text:0000000000000048 .LVL0
     /tmp/ccBQtR2X.s:106    .text:0000000000000080 .LVL2
     /tmp/ccBQtR2X.s:169    .text:00000000000000ac .LVL6
     /tmp/ccBQtR2X.s:385    .text:0000000000000114 .LVL9
     /tmp/ccBQtR2X.s:468    .text:0000000000000148 .LVL15
     /tmp/ccBQtR2X.s:499    .text:000000000000015c .LVL18
     /tmp/ccBQtR2X.s:553    .text:000000000000018c .LVL25
     /tmp/ccBQtR2X.s:572    .text:000000000000019c .LVL27
     /tmp/ccBQtR2X.s:585    .text:00000000000001b4 .LVL30
     /tmp/ccBQtR2X.s:605    .text:00000000000001c8 .LVL33
     /tmp/ccBQtR2X.s:659    .text:00000000000001f8 .LVL40
     /tmp/ccBQtR2X.s:710    .text:0000000000000228 .LVL46
     /tmp/ccBQtR2X.s:745    .text:0000000000000244 .LVL50
     /tmp/ccBQtR2X.s:780    .text:0000000000000260 .LVL55
     /tmp/ccBQtR2X.s:129    .text:0000000000000090 .LVL3
     /tmp/ccBQtR2X.s:445    .text:000000000000012c .LVL14
     /tmp/ccBQtR2X.s:145    .text:000000000000009c .LVL4
     /tmp/ccBQtR2X.s:163    .text:00000000000000a8 .LVL5
     /tmp/ccBQtR2X.s:537    .text:000000000000017c .LVL23
     /tmp/ccBQtR2X.s:547    .text:0000000000000184 .LVL24
     /tmp/ccBQtR2X.s:578    .text:00000000000001a4 .LVL28
     /tmp/ccBQtR2X.s:596    .text:00000000000001b8 .LVL31
     /tmp/ccBQtR2X.s:643    .text:00000000000001e8 .LVL38
     /tmp/ccBQtR2X.s:653    .text:00000000000001f0 .LVL39
     /tmp/ccBQtR2X.s:750    .text:0000000000000248 .LVL51
GAS LISTING /tmp/ccBQtR2X.s 			page 34


     /tmp/ccBQtR2X.s:752    .text:000000000000024c .LVL52
     /tmp/ccBQtR2X.s:406    .text:0000000000000118 .LVL10
     /tmp/ccBQtR2X.s:418    .text:0000000000000124 .LVL12
     /tmp/ccBQtR2X.s:484    .text:000000000000014c .LVL16
     /tmp/ccBQtR2X.s:510    .text:0000000000000160 .LVL19
     /tmp/ccBQtR2X.s:517    .text:0000000000000164 .LVL20
     /tmp/ccBQtR2X.s:524    .text:0000000000000168 .LVL21
     /tmp/ccBQtR2X.s:616    .text:00000000000001cc .LVL34
     /tmp/ccBQtR2X.s:623    .text:00000000000001d0 .LVL35
     /tmp/ccBQtR2X.s:630    .text:00000000000001d4 .LVL36
     /tmp/ccBQtR2X.s:673    .text:0000000000000200 .LVL41
     /tmp/ccBQtR2X.s:681    .text:0000000000000204 .LVL42
     /tmp/ccBQtR2X.s:694    .text:0000000000000218 .LVL44
     /tmp/ccBQtR2X.s:704    .text:0000000000000220 .LVL45
     /tmp/ccBQtR2X.s:723    .text:000000000000022c .LVL47
     /tmp/ccBQtR2X.s:735    .text:000000000000023c .LVL49
     /tmp/ccBQtR2X.s:765    .text:0000000000000250 .LVL53
     /tmp/ccBQtR2X.s:370    .text:0000000000000104 .LVL7
     /tmp/ccBQtR2X.s:432    .text:0000000000000128 .LVL13
     /tmp/ccBQtR2X.s:821    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccBQtR2X.s:109    .text:0000000000000080 .LBB42
     /tmp/ccBQtR2X.s:172    .text:00000000000000b0 .LBE42
     /tmp/ccBQtR2X.s:176    .text:00000000000000b0 .LBB143
     /tmp/ccBQtR2X.s:183    .text:00000000000000b8 .LBE143
     /tmp/ccBQtR2X.s:187    .text:00000000000000b8 .LBB144
     /tmp/ccBQtR2X.s:196    .text:00000000000000c0 .LBE144
     /tmp/ccBQtR2X.s:200    .text:00000000000000c0 .LBB145
     /tmp/ccBQtR2X.s:211    .text:00000000000000c8 .LBE145
     /tmp/ccBQtR2X.s:215    .text:00000000000000c8 .LBB146
     /tmp/ccBQtR2X.s:228    .text:00000000000000d0 .LBE146
     /tmp/ccBQtR2X.s:232    .text:00000000000000d0 .LBB147
     /tmp/ccBQtR2X.s:247    .text:00000000000000d8 .LBE147
     /tmp/ccBQtR2X.s:251    .text:00000000000000d8 .LBB148
     /tmp/ccBQtR2X.s:268    .text:00000000000000e0 .LBE148
     /tmp/ccBQtR2X.s:272    .text:00000000000000e0 .LBB149
     /tmp/ccBQtR2X.s:291    .text:00000000000000e8 .LBE149
     /tmp/ccBQtR2X.s:295    .text:00000000000000e8 .LBB150
     /tmp/ccBQtR2X.s:316    .text:00000000000000f0 .LBE150
     /tmp/ccBQtR2X.s:320    .text:00000000000000f0 .LBB151
     /tmp/ccBQtR2X.s:343    .text:00000000000000f8 .LBE151
     /tmp/ccBQtR2X.s:347    .text:00000000000000f8 .LBB152
     /tmp/ccBQtR2X.s:450    .text:000000000000012c .LBE152
     /tmp/ccBQtR2X.s:472    .text:0000000000000148 .LBB153
     /tmp/ccBQtR2X.s:792    .text:0000000000000260 .LBE153
     /tmp/ccBQtR2X.s:714    .text:0000000000000228 .LBB63
     /tmp/ccBQtR2X.s:743    .text:0000000000000240 .LBE63
     /tmp/ccBQtR2X.s:747    .text:0000000000000244 .LBB64
     /tmp/ccBQtR2X.s:754    .text:000000000000024c .LBE64
     /tmp/ccBQtR2X.s:663    .text:00000000000001f8 .LBB68
     /tmp/ccBQtR2X.s:702    .text:000000000000021c .LBE68
     /tmp/ccBQtR2X.s:706    .text:0000000000000220 .LBB69
     /tmp/ccBQtR2X.s:712    .text:0000000000000228 .LBE69
     /tmp/ccBQtR2X.s:608    .text:00000000000001c8 .LBB74
     /tmp/ccBQtR2X.s:651    .text:00000000000001ec .LBE74
     /tmp/ccBQtR2X.s:655    .text:00000000000001f0 .LBB75
     /tmp/ccBQtR2X.s:661    .text:00000000000001f8 .LBE75
     /tmp/ccBQtR2X.s:502    .text:000000000000015c .LBB104
GAS LISTING /tmp/ccBQtR2X.s 			page 35


     /tmp/ccBQtR2X.s:545    .text:0000000000000180 .LBE104
     /tmp/ccBQtR2X.s:549    .text:0000000000000184 .LBB105
     /tmp/ccBQtR2X.s:555    .text:000000000000018c .LBE105

UNDEFINED SYMBOLS
console_handler
_ZN10Ksemaphore6signalEv
_ZN15MemoryAllocator6mallocEm
_ZN15MemoryAllocator4freeEPv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN9Scheduler3putEP3TCB
_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_
_ZN10Ksemaphore15createSemaphoreEj
_ZN10Ksemaphore14closeSemaphoreEv
_ZN10Ksemaphore4waitEv
