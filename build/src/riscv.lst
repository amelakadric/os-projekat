GAS LISTING /tmp/ccCMElxB.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB48:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** using Body = void (*)(void*);
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** void Riscv::popSppSpie()
   8:src/riscv.cpp **** {
  12              		.loc 1 8 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 9 5
  21              		.loc 1 9 39 is_stmt 0
  22              	#APP
  23              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 30 is_stmt 0
  28              	# 10 "src/riscv.cpp" 1
  11              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 11 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE48:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB49:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  14:src/riscv.cpp **** {
GAS LISTING /tmp/ccCMElxB.s 			page 2


  47              		.loc 1 14 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54 0030 23382103 		sd	s2,48(sp)
  55 0034 23343103 		sd	s3,40(sp)
  56              		.cfi_offset 1, -8
  57              		.cfi_offset 8, -16
  58              		.cfi_offset 9, -24
  59              		.cfi_offset 18, -32
  60              		.cfi_offset 19, -40
  61 0038 13040105 		addi	s0,sp,80
  62              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     uint64 scause = r_scause();
  63              		.loc 1 15 5
  64              	.LBB43:
  65              	.LBB44:
  66              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/19/22.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** //#include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../h/TCB.hpp"
  10:src/../h/riscv.hpp **** #include "../lib/console.h"
  11:src/../h/riscv.hpp **** #include "../h/Ksemaphore.hpp"
  12:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** //#include "../h/syscall_cpp.hpp"
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp **** //class TCB;
  16:src/../h/riscv.hpp **** class Riscv
  17:src/../h/riscv.hpp **** {
  18:src/../h/riscv.hpp **** public:
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  21:src/../h/riscv.hpp ****     static void popSppSpie();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  24:src/../h/riscv.hpp ****     static void pushRegisters();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  27:src/../h/riscv.hpp ****     static void popRegisters();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register scause
  30:src/../h/riscv.hpp ****     static uint64 r_scause();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register scause
  33:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register sepc
  36:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccCMElxB.s 			page 3


  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register sepc
  39:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register stvec
  42:src/../h/riscv.hpp ****     static uint64 r_stvec();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register stvec
  45:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stval
  48:src/../h/riscv.hpp ****     static uint64 r_stval();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stval
  51:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     enum BitMaskSip
  54:src/../h/riscv.hpp ****     {
  55:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  56:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  57:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  58:src/../h/riscv.hpp ****     };
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // mask set register sip
  61:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask clear register sip
  64:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // read register sip
  67:src/../h/riscv.hpp ****     static uint64 r_sip();
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // write register sip
  70:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     enum BitMaskSstatus
  73:src/../h/riscv.hpp ****     {
  74:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  75:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  76:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  77:src/../h/riscv.hpp ****     };
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask set register sstatus
  80:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // mask clear register sstatus
  83:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // read register sstatus
  86:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // write register sstatus
  89:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a0;
  92:src/../h/riscv.hpp ****     static uint64 r_a0();
  93:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccCMElxB.s 			page 4


  94:src/../h/riscv.hpp **** // supervisor trap
  95:src/../h/riscv.hpp ****     static void supervisorTrap();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp ****     // supervisor trap handler
 100:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
  67              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  68              		.loc 2 107 5
  69              		.loc 2 107 72 is_stmt 0
  70              	#APP
  71              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
  72              		csrr a5, scause
  73              	# 0 "" 2
  74              	#NO_APP
  75 0040 2338F4FA 		sd	a5,-80(s0)
  76              		.loc 2 108 5 is_stmt 1
  77              		.loc 2 108 12 is_stmt 0
  78 0044 033704FB 		ld	a4,-80(s0)
  79              	.LVL0:
  80              	.LBE44:
  81              	.LBE43:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  82              		.loc 1 17 5 is_stmt 1
  83              	.LBB45:
  84              		.loc 1 17 40 is_stmt 0
  85 0048 930687FF 		addi	a3,a4,-8
  86              		.loc 1 17 5
  87 004c 93071000 		li	a5,1
  88 0050 63F8D702 		bleu	a3,a5,.L32
  18:src/riscv.cpp ****     {
  19:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
  25:src/riscv.cpp ****             //mem_alloc(size_t size-a1)
  26:src/riscv.cpp ****             size_t a7;
  27:src/riscv.cpp ****             void *a;
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  32:src/riscv.cpp ****         }
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
  34:src/riscv.cpp ****             //mem_free
  35:src/riscv.cpp ****             void* a7;
GAS LISTING /tmp/ccCMElxB.s 			page 5


  36:src/riscv.cpp ****             uint64 a;
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  41:src/riscv.cpp **** 
  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****         }
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
  45:src/riscv.cpp **** //            //thread_create(&myhandle-a1, body-a2, arg-a3)
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             TCB** tcb;
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  49:src/riscv.cpp ****             Body a2;
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  51:src/riscv.cpp ****             //arg
  52:src/riscv.cpp ****             void* a7;
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
  62:src/riscv.cpp ****             //thread_exit
  63:src/riscv.cpp ****             uint64 a;
  64:src/riscv.cpp ****             a=TCB::exitThread();
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  66:src/riscv.cpp ****         }
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
  68:src/riscv.cpp ****             //thread_dispatch()
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  70:src/riscv.cpp ****             TCB::dispatch();
  71:src/riscv.cpp ****         }
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
  74:src/riscv.cpp ****             //thread_start()
  75:src/riscv.cpp ****             TCB** tcb;
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
  78:src/riscv.cpp ****         }
  79:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
  80:src/riscv.cpp ****             //thread_create2() bez stavljanja u scheduler
  81:src/riscv.cpp ****             TCB** tcb;
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  83:src/riscv.cpp ****             Body a2;
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  85:src/riscv.cpp ****             //arg
  86:src/riscv.cpp ****             void* a7;
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
GAS LISTING /tmp/ccCMElxB.s 			page 6


  93:src/riscv.cpp ****         }
  94:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
  95:src/riscv.cpp ****             //sem_open a1-handle a2-init
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****             unsigned a2;
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****             Ksemaphore** sem;
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 103:src/riscv.cpp **** 
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****         }
 108:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 109:src/riscv.cpp ****             //sem_close a1-handle
 110:src/riscv.cpp **** 
 111:src/riscv.cpp ****             uint64 a;
 112:src/riscv.cpp ****             Ksemaphore* sem;
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****             a=0;
 116:src/riscv.cpp ****             if(sem== nullptr){
 117:src/riscv.cpp ****                 a=1;
 118:src/riscv.cpp ****             }
 119:src/riscv.cpp ****             else{
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 121:src/riscv.cpp ****             }
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 123:src/riscv.cpp **** 
 124:src/riscv.cpp ****         }
 125:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 126:src/riscv.cpp ****             //sem_wait a1-id
 127:src/riscv.cpp **** 
 128:src/riscv.cpp ****             int a;
 129:src/riscv.cpp ****             Ksemaphore* a7;
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 131:src/riscv.cpp **** 
 132:src/riscv.cpp ****             if(a7!= nullptr){
 133:src/riscv.cpp ****                 a = a7->wait();
 134:src/riscv.cpp ****             }
 135:src/riscv.cpp ****             else{
 136:src/riscv.cpp ****                 a=-1;
 137:src/riscv.cpp ****             }
 138:src/riscv.cpp **** 
 139:src/riscv.cpp **** 
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 141:src/riscv.cpp **** 
 142:src/riscv.cpp ****         }
 143:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 144:src/riscv.cpp ****             //sem_signal a1-id
 145:src/riscv.cpp **** 
 146:src/riscv.cpp ****             uint64 a;
 147:src/riscv.cpp ****             Ksemaphore* sem;
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 149:src/riscv.cpp ****             if(sem!= nullptr) {
GAS LISTING /tmp/ccCMElxB.s 			page 7


 150:src/riscv.cpp ****                 a = sem->signal();
 151:src/riscv.cpp ****             }else {
 152:src/riscv.cpp ****                 a=1;
 153:src/riscv.cpp ****             }
 154:src/riscv.cpp **** 
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 156:src/riscv.cpp ****         }
 157:src/riscv.cpp ****         else if (a0 == 0x0000000000000016UL){
 158:src/riscv.cpp ****             uint64 a;
 159:src/riscv.cpp ****             TCB* t;
 160:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 161:src/riscv.cpp ****             a= t->getId();
 162:src/riscv.cpp **** 
 163:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 164:src/riscv.cpp **** 
 165:src/riscv.cpp ****         }
 166:src/riscv.cpp **** 
 167:src/riscv.cpp **** //        TCB::dispatch();
 168:src/riscv.cpp **** 
 169:src/riscv.cpp ****         w_sstatus(sstatus);
 170:src/riscv.cpp ****         w_sepc(sepc);
 171:src/riscv.cpp **** 
 172:src/riscv.cpp **** 
 173:src/riscv.cpp ****     } else if (scause == 0x8000000000000001UL)
  89              		.loc 1 173 12 is_stmt 1
  90 0054 9307F0FF 		li	a5,-1
  91 0058 9397F703 		slli	a5,a5,63
  92 005c 93871700 		addi	a5,a5,1
  93 0060 6308F722 		beq	a4,a5,.L33
 174:src/riscv.cpp ****     {
 175:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 176:src/riscv.cpp **** //        TCB::timeSliceCounter++;
 177:src/riscv.cpp **** //        if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 178:src/riscv.cpp **** //        {
 179:src/riscv.cpp **** //            uint64 sepc = r_sepc();
 180:src/riscv.cpp **** //            uint64 sstatus = r_sstatus();
 181:src/riscv.cpp **** //            TCB::timeSliceCounter = 0;
 182:src/riscv.cpp **** //            TCB::dispatch();
 183:src/riscv.cpp **** //            w_sstatus(sstatus);
 184:src/riscv.cpp **** //            w_sepc(sepc);
 185:src/riscv.cpp **** //        }
 186:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 187:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL)
  94              		.loc 1 187 12
  95 0064 9307F0FF 		li	a5,-1
  96 0068 9397F703 		slli	a5,a5,63
  97 006c 93879700 		addi	a5,a5,9
  98 0070 6310F70C 		bne	a4,a5,.L3
 188:src/riscv.cpp ****     {
 189:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 190:src/riscv.cpp ****         console_handler();
  99              		.loc 1 190 9
 100              		.loc 1 190 24 is_stmt 0
 101 0074 97000000 		call	console_handler@plt
 101      E7800000 
 102              	.LVL1:
 103              	.LBE45:
GAS LISTING /tmp/ccCMElxB.s 			page 8


 191:src/riscv.cpp ****     }else
 192:src/riscv.cpp ****     {
 193:src/riscv.cpp ****         // unexpected trap cause
 194:src/riscv.cpp ****     }
 195:src/riscv.cpp **** }...
 104              		.loc 1 195 1
 105 007c 6F00400B 		j	.L3
 106              	.LVL2:
 107              	.L32:
 108              	.LBB179:
 109              	.LBB46:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 110              		.loc 1 20 9 is_stmt 1
 111              	.LBB47:
 112              	.LBB48:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 113              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 114              		.loc 2 119 5
 115              		.loc 2 119 64 is_stmt 0
 116              	#APP
 117              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 118              		csrr a5, sepc
 119              	# 0 "" 2
 120              	#NO_APP
 121 0084 2334F4FC 		sd	a5,-56(s0)
 122              		.loc 2 120 5 is_stmt 1
 123              		.loc 2 120 12 is_stmt 0
 124 0088 833484FC 		ld	s1,-56(s0)
 125              	.LBE48:
 126              	.LBE47:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 127              		.loc 1 20 34
 128 008c 93844400 		addi	s1,s1,4
 129              	.LVL3:
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 130              		.loc 1 21 9 is_stmt 1
 131              	.LBB49:
 132              	.LBB50:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
GAS LISTING /tmp/ccCMElxB.s 			page 9


 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144:src/../h/riscv.hpp ****     return stval;
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
GAS LISTING /tmp/ccCMElxB.s 			page 10


 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 133              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 134              		.loc 2 187 5
 135              		.loc 2 187 76 is_stmt 0
 136              	#APP
 137              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 138              		csrr a5, sstatus
 139              	# 0 "" 2
 140              	#NO_APP
 141 0094 2330F4FC 		sd	a5,-64(s0)
 142              		.loc 2 188 5 is_stmt 1
 143              		.loc 2 188 12 is_stmt 0
 144 0098 033904FC 		ld	s2,-64(s0)
 145              	.LVL4:
 146              	.LBE50:
 147              	.LBE49:
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
 148              		.loc 1 23 9 is_stmt 1
 149              	.LBB51:
 150              	.LBB52:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 194:src/../h/riscv.hpp **** }
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** 
 197:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 198:src/../h/riscv.hpp **** {
 199:src/../h/riscv.hpp ****     uint64 volatile a0;
 151              		.loc 2 199 5
 200:src/../h/riscv.hpp ****     __asm__ volatile ("mv %[a0], a0" : [a0] "=r"(a0));
 152              		.loc 2 200 5
 153              		.loc 2 200 54 is_stmt 0
 154              	#APP
 155              	# 200 "src/../h/riscv.hpp" 1
 201              	    return a0;
 156              		mv a5, a0
 157              	# 0 "" 2
 158              	#NO_APP
 159 00a0 233CF4FA 		sd	a5,-72(s0)
 160              		.loc 2 201 5 is_stmt 1
 161              		.loc 2 201 12 is_stmt 0
 162 00a4 833784FB 		ld	a5,-72(s0)
 163              	.LVL5:
 164              	.LBE52:
 165              	.LBE51:
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
 166              		.loc 1 24 9 is_stmt 1
 167              	.LBB53:
 168 00a8 13071000 		li	a4,1
 169              	.LVL6:
 170 00ac 6386E706 		beq	a5,a4,.L34
 171              	.LBE53:
GAS LISTING /tmp/ccCMElxB.s 			page 11


 172              	.LBE46:
 173              	.LBE179:
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
 174              		.loc 1 33 14
 175              	.LBB180:
 176              	.LBB165:
 177              	.LBB149:
 178              	.LBB54:
 179 00b0 13072000 		li	a4,2
 180 00b4 638CE708 		beq	a5,a4,.L35
 181              	.LBE54:
 182              	.LBE149:
 183              	.LBE165:
 184              	.LBE180:
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
 185              		.loc 1 44 14
 186              	.LBB181:
 187              	.LBB166:
 188              	.LBB150:
 189              	.LBB137:
 190              	.LBB55:
 191 00b8 13071001 		li	a4,17
 192 00bc 6382E70A 		beq	a5,a4,.L36
 193              	.LBE55:
 194              	.LBE137:
 195              	.LBE150:
 196              	.LBE166:
 197              	.LBE181:
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
 198              		.loc 1 61 14
 199              	.LBB182:
 200              	.LBB167:
 201              	.LBB151:
 202              	.LBB138:
 203              	.LBB126:
 204              	.LBB56:
 205 00c0 13072001 		li	a4,18
 206 00c4 6386E70C 		beq	a5,a4,.L37
 207              	.LBE56:
 208              	.LBE126:
 209              	.LBE138:
 210              	.LBE151:
 211              	.LBE167:
 212              	.LBE182:
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
 213              		.loc 1 67 14
 214              	.LBB183:
 215              	.LBB168:
 216              	.LBB152:
 217              	.LBB139:
 218              	.LBB127:
 219              	.LBB115:
 220              	.LBB57:
 221 00c8 13073001 		li	a4,19
 222 00cc 638AE70C 		beq	a5,a4,.L38
 223              	.LBE57:
 224              	.LBE115:
GAS LISTING /tmp/ccCMElxB.s 			page 12


 225              	.LBE127:
 226              	.LBE139:
 227              	.LBE152:
 228              	.LBE168:
 229              	.LBE183:
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
 230              		.loc 1 73 14
 231              	.LBB184:
 232              	.LBB169:
 233              	.LBB153:
 234              	.LBB140:
 235              	.LBB128:
 236              	.LBB116:
 237              	.LBB106:
 238              	.LBB58:
 239 00d0 13074001 		li	a4,20
 240 00d4 6382E70E 		beq	a5,a4,.L39
 241              	.LBE58:
 242              	.LBE106:
 243              	.LBE116:
 244              	.LBE128:
 245              	.LBE140:
 246              	.LBE153:
 247              	.LBE169:
 248              	.LBE184:
  79:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
 249              		.loc 1 79 14
 250              	.LBB185:
 251              	.LBB170:
 252              	.LBB154:
 253              	.LBB141:
 254              	.LBB129:
 255              	.LBB117:
 256              	.LBB107:
 257              	.LBB99:
 258              	.LBB59:
 259 00d8 13075001 		li	a4,21
 260 00dc 6388E70E 		beq	a5,a4,.L40
 261              	.LBE59:
 262              	.LBE99:
 263              	.LBE107:
 264              	.LBE117:
 265              	.LBE129:
 266              	.LBE141:
 267              	.LBE154:
 268              	.LBE170:
 269              	.LBE185:
  94:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
 270              		.loc 1 94 14
 271              	.LBB186:
 272              	.LBB171:
 273              	.LBB155:
 274              	.LBB142:
 275              	.LBB130:
 276              	.LBB118:
 277              	.LBB108:
 278              	.LBB100:
GAS LISTING /tmp/ccCMElxB.s 			page 13


 279              	.LBB92:
 280              	.LBB60:
 281 00e0 13071002 		li	a4,33
 282 00e4 638CE710 		beq	a5,a4,.L41
 283              	.LBE60:
 284              	.LBE92:
 285              	.LBE100:
 286              	.LBE108:
 287              	.LBE118:
 288              	.LBE130:
 289              	.LBE142:
 290              	.LBE155:
 291              	.LBE171:
 292              	.LBE186:
 108:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 293              		.loc 1 108 14
 294              	.LBB187:
 295              	.LBB172:
 296              	.LBB156:
 297              	.LBB143:
 298              	.LBB131:
 299              	.LBB119:
 300              	.LBB109:
 301              	.LBB101:
 302              	.LBB93:
 303              	.LBB85:
 304              	.LBB61:
 305 00e8 13072002 		li	a4,34
 306 00ec 6380E714 		beq	a5,a4,.L42
 307              	.LBE61:
 308              	.LBE85:
 309              	.LBE93:
 310              	.LBE101:
 311              	.LBE109:
 312              	.LBE119:
 313              	.LBE131:
 314              	.LBE143:
 315              	.LBE156:
 316              	.LBE172:
 317              	.LBE187:
 125:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 318              		.loc 1 125 14
 319              	.LBB188:
 320              	.LBB173:
 321              	.LBB157:
 322              	.LBB144:
 323              	.LBB132:
 324              	.LBB120:
 325              	.LBB110:
 326              	.LBB102:
 327              	.LBB94:
 328              	.LBB86:
 329              	.LBB79:
 330              	.LBB62:
 331 00f0 13073002 		li	a4,35
 332 00f4 638EE714 		beq	a5,a4,.L43
 333              	.LBE62:
GAS LISTING /tmp/ccCMElxB.s 			page 14


 334              	.LBE79:
 335              	.LBE86:
 336              	.LBE94:
 337              	.LBE102:
 338              	.LBE110:
 339              	.LBE120:
 340              	.LBE132:
 341              	.LBE144:
 342              	.LBE157:
 343              	.LBE173:
 344              	.LBE188:
 143:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 345              		.loc 1 143 14
 346              	.LBB189:
 347              	.LBB174:
 348              	.LBB158:
 349              	.LBB145:
 350              	.LBB133:
 351              	.LBB121:
 352              	.LBB111:
 353              	.LBB103:
 354              	.LBB95:
 355              	.LBB87:
 356              	.LBB80:
 357              	.LBB74:
 358              	.LBB63:
 359 00f8 13074002 		li	a4,36
 360 00fc 638AE716 		beq	a5,a4,.L44
 361              	.LBE63:
 362              	.LBE74:
 363              	.LBE80:
 364              	.LBE87:
 365              	.LBE95:
 366              	.LBE103:
 367              	.LBE111:
 368              	.LBE121:
 369              	.LBE133:
 370              	.LBE145:
 371              	.LBE158:
 372              	.LBE174:
 373              	.LBE189:
 157:src/riscv.cpp ****         else if (a0 == 0x0000000000000016UL){
 374              		.loc 1 157 14
 375              	.LBB190:
 376              	.LBB175:
 377              	.LBB159:
 378              	.LBB146:
 379              	.LBB134:
 380              	.LBB122:
 381              	.LBB112:
 382              	.LBB104:
 383              	.LBB96:
 384              	.LBB88:
 385              	.LBB81:
 386              	.LBB75:
 387              	.LBB70:
 388              	.LBB64:
GAS LISTING /tmp/ccCMElxB.s 			page 15


 389 0100 13076001 		li	a4,22
 390 0104 6392E702 		bne	a5,a4,.L6
 391              	.LBB65:
 158:src/riscv.cpp ****             uint64 a;
 392              		.loc 1 158 13
 159:src/riscv.cpp ****             TCB* t;
 393              		.loc 1 159 13
 160:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 394              		.loc 1 160 13
 160:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 395              		.loc 1 160 61 is_stmt 0
 396              	#APP
 397              	# 160 "src/riscv.cpp" 1
 398              		mv a5, a1
 399              	# 0 "" 2
 400              	.LVL7:
 161:src/riscv.cpp ****             a= t->getId();
 401              		.loc 1 161 13 is_stmt 1
 402              	#NO_APP
 403              	.LBB66:
 404              	.LBB67:
 405              		.file 3 "src/../h/../h/TCB.hpp"
   1:src/../h/../h/TCB.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   2:src/../h/../h/TCB.hpp **** #define PROJECT_BASE_TCB_HPP
   3:src/../h/../h/TCB.hpp **** 
   4:src/../h/../h/TCB.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/TCB.hpp **** #include "scheduler.hpp"
   6:src/../h/../h/TCB.hpp **** #include "MemoryAllocator.hpp"
   7:src/../h/../h/TCB.hpp **** 
   8:src/../h/../h/TCB.hpp **** typedef TCB* thread_t;
   9:src/../h/../h/TCB.hpp **** 
  10:src/../h/../h/TCB.hpp **** 
  11:src/../h/../h/TCB.hpp **** class TCB
  12:src/../h/../h/TCB.hpp **** {
  13:src/../h/../h/TCB.hpp **** 
  14:src/../h/../h/TCB.hpp ****     static void threadWrapper();
  15:src/../h/../h/TCB.hpp **** public:
  16:src/../h/../h/TCB.hpp ****     using Body = void (*)(void*);
  17:src/../h/../h/TCB.hpp ****     TCB();
  18:src/../h/../h/TCB.hpp **** 
  19:src/../h/../h/TCB.hpp ****     ~TCB() { delete[] stack; }
  20:src/../h/../h/TCB.hpp **** 
  21:src/../h/../h/TCB.hpp ****     bool isFinished() const { return finished; }
  22:src/../h/../h/TCB.hpp **** 
  23:src/../h/../h/TCB.hpp **** 
  24:src/../h/../h/TCB.hpp ****     void setFinished(bool value) { finished = value; }
  25:src/../h/../h/TCB.hpp **** 
  26:src/../h/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
  27:src/../h/../h/TCB.hpp **** 
  28:src/../h/../h/TCB.hpp ****     Body getBody() { return this->body;}
  29:src/../h/../h/TCB.hpp ****     void* getArg() {return this->arg;}
  30:src/../h/../h/TCB.hpp ****     uint64 getId() {return this->id;}
 406              		.loc 3 30 21
 407              		.loc 3 30 34 is_stmt 0
 408 010c 83B78703 		ld	a5,56(a5)
 409              	.LVL8:
 410              	.LBE67:
GAS LISTING /tmp/ccCMElxB.s 			page 16


 411              	.LBE66:
 163:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 412              		.loc 1 163 13 is_stmt 1
 163:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 413              		.loc 1 163 50 is_stmt 0
 414              	#APP
 415              	# 163 "src/riscv.cpp" 1
 416              		mv a0, a5
 417              	# 0 "" 2
 418              	#NO_APP
 419              	.LBE65:
 420 0114 6F004001 		j	.L6
 421              	.LVL9:
 422              	.L34:
 423              	.LBE64:
 424              	.LBE70:
 425              	.LBE75:
 426              	.LBE81:
 427              	.LBE88:
 428              	.LBE96:
 429              	.LBE104:
 430              	.LBE112:
 431              	.LBE122:
 432              	.LBE134:
 433              	.LBE146:
 434              	.LBB147:
  26:src/riscv.cpp ****             size_t a7;
 435              		.loc 1 26 13 is_stmt 1
  27:src/riscv.cpp ****             void *a;
 436              		.loc 1 27 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 437              		.loc 1 28 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 438              		.loc 1 28 62 is_stmt 0
 439              	#APP
 440              	# 28 "src/riscv.cpp" 1
 441              		mv a0, a7
 442              	# 0 "" 2
 443              	.LVL10:
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 444              		.loc 1 30 13 is_stmt 1
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 445              		.loc 1 30 38 is_stmt 0
 446              	#NO_APP
 447 011c 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 447      E7800000 
 448              	.LVL11:
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 449              		.loc 1 31 13 is_stmt 1
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 450              		.loc 1 31 50 is_stmt 0
 451              	#APP
 452              	# 31 "src/riscv.cpp" 1
 453              		mv a0, a0
 454              	# 0 "" 2
 455              	.LVL12:
 456              	#NO_APP
GAS LISTING /tmp/ccCMElxB.s 			page 17


 457              	.L6:
 458              	.LBE147:
 459              	.LBE159:
 169:src/riscv.cpp ****         w_sstatus(sstatus);
 460              		.loc 1 169 9 is_stmt 1
 461              	.LBB160:
 462              	.LBB161:
 193:src/../h/riscv.hpp **** }
 463              		.loc 2 193 5
 193:src/../h/riscv.hpp **** }
 464              		.loc 2 193 77 is_stmt 0
 465              	#APP
 466              	# 193 "src/../h/riscv.hpp" 1
 467              		csrw sstatus, s2
 468              	# 0 "" 2
 469              	.LVL13:
 470              	#NO_APP
 471              	.LBE161:
 472              	.LBE160:
 170:src/riscv.cpp ****         w_sepc(sepc);
 473              		.loc 1 170 9 is_stmt 1
 474              	.LBB162:
 475              	.LBB163:
 125:src/../h/riscv.hpp **** }
 476              		.loc 2 125 5
 125:src/../h/riscv.hpp **** }
 477              		.loc 2 125 65 is_stmt 0
 478              	#APP
 479              	# 125 "src/../h/riscv.hpp" 1
 480              		csrw sepc, s1
 481              	# 0 "" 2
 482              	.LVL14:
 483              	#NO_APP
 484              	.L3:
 485              	.LBE163:
 486              	.LBE162:
 487              	.LBE175:
 488              	.LBE190:
 489              		.loc 1 195 1
 490 0130 83308104 		ld	ra,72(sp)
 491              		.cfi_remember_state
 492              		.cfi_restore 1
 493 0134 03340104 		ld	s0,64(sp)
 494              		.cfi_restore 8
 495              		.cfi_def_cfa 2, 80
 496 0138 83348103 		ld	s1,56(sp)
 497              		.cfi_restore 9
 498 013c 03390103 		ld	s2,48(sp)
 499              		.cfi_restore 18
 500 0140 83398102 		ld	s3,40(sp)
 501              		.cfi_restore 19
 502 0144 13010105 		addi	sp,sp,80
 503              		.cfi_def_cfa_offset 0
 504 0148 67800000 		jr	ra
 505              	.LVL15:
 506              	.L35:
 507              		.cfi_restore_state
GAS LISTING /tmp/ccCMElxB.s 			page 18


 508              	.LBB191:
 509              	.LBB176:
 510              	.LBB164:
 511              	.LBB148:
 512              	.LBB135:
  35:src/riscv.cpp ****             void* a7;
 513              		.loc 1 35 13 is_stmt 1
  36:src/riscv.cpp ****             uint64 a;
 514              		.loc 1 36 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 515              		.loc 1 37 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 516              		.loc 1 37 62 is_stmt 0
 517              	#APP
 518              	# 37 "src/riscv.cpp" 1
 519              		mv a0, a7
 520              	# 0 "" 2
 521              	.LVL16:
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 522              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 523              		.loc 1 39 36 is_stmt 0
 524              	#NO_APP
 525 0150 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 525      E7800000 
 526              	.LVL17:
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 527              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 528              		.loc 1 40 50 is_stmt 0
 529              	#APP
 530              	# 40 "src/riscv.cpp" 1
 531              		mv a0, a0
 532              	# 0 "" 2
 533              	#NO_APP
 534              	.LBE135:
 535 015c 6FF0DFFC 		j	.L6
 536              	.LVL18:
 537              	.L36:
 538              	.LBB136:
 539              	.LBB123:
  47:src/riscv.cpp ****             TCB** tcb;
 540              		.loc 1 47 13 is_stmt 1
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 541              		.loc 1 48 13
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 542              		.loc 1 48 63 is_stmt 0
 543              	#APP
 544              	# 48 "src/riscv.cpp" 1
 545              		mv s3, a1
 546              	# 0 "" 2
 547              	.LVL19:
  49:src/riscv.cpp ****             Body a2;
 548              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 549              		.loc 1 50 13
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
GAS LISTING /tmp/ccCMElxB.s 			page 19


 550              		.loc 1 50 62 is_stmt 0
 551              	# 50 "src/riscv.cpp" 1
 552              		mv a0, a2
 553              	# 0 "" 2
 554              	.LVL20:
  52:src/riscv.cpp ****             void* a7;
 555              		.loc 1 52 13 is_stmt 1
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 556              		.loc 1 53 13
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 557              		.loc 1 53 62 is_stmt 0
 558              	# 53 "src/riscv.cpp" 1
 559              		mv a1, a7
 560              	# 0 "" 2
 561              	.LVL21:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 562              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 563              		.loc 1 55 37 is_stmt 0
 564              	#NO_APP
 565 016c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 565      E7800000 
 566              	.LVL22:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 567              		.loc 1 55 18
 568 0174 23B0A900 		sd	a0,0(s3)
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 569              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 570              		.loc 1 56 31 is_stmt 0
 571 0178 63880900 		beqz	s3,.L25
 572 017c 93070000 		li	a5,0
 573              	.L9:
 574              	.LVL23:
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 575              		.loc 1 58 13 is_stmt 1 discriminator 4
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 576              		.loc 1 58 51 is_stmt 0 discriminator 4
 577              	#APP
 578              	# 58 "src/riscv.cpp" 1
 579              		mv a0, a5
 580              	# 0 "" 2
 581              	#NO_APP
 582              	.LBE123:
 583 0184 6FF05FFA 		j	.L6
 584              	.LVL24:
 585              	.L25:
 586              	.LBB124:
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 587              		.loc 1 56 31
 588 0188 9307F0FF 		li	a5,-1
 589 018c 6FF05FFF 		j	.L9
 590              	.LVL25:
 591              	.L37:
 592              	.LBE124:
 593              	.LBB125:
 594              	.LBB113:
GAS LISTING /tmp/ccCMElxB.s 			page 20


  63:src/riscv.cpp ****             uint64 a;
 595              		.loc 1 63 13 is_stmt 1
  64:src/riscv.cpp ****             a=TCB::exitThread();
 596              		.loc 1 64 13
  64:src/riscv.cpp ****             a=TCB::exitThread();
 597              		.loc 1 64 30 is_stmt 0
 598 0190 97000000 		call	_ZN3TCB10exitThreadEv@plt
 598      E7800000 
 599              	.LVL26:
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 600              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 601              		.loc 1 65 50 is_stmt 0
 602              	#APP
 603              	# 65 "src/riscv.cpp" 1
 604              		mv a0, a0
 605              	# 0 "" 2
 606              	#NO_APP
 607              	.LBE113:
 608 019c 6FF0DFF8 		j	.L6
 609              	.LVL27:
 610              	.L38:
 611              	.LBB114:
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 612              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 613              		.loc 1 69 35 is_stmt 0
 614 01a0 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 614      83B70700 
 615              	.LVL28:
 616 01a8 23B00700 		sd	zero,0(a5)
  70:src/riscv.cpp ****             TCB::dispatch();
 617              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             TCB::dispatch();
 618              		.loc 1 70 26 is_stmt 0
 619 01ac 97000000 		call	_ZN3TCB8dispatchEv@plt
 619      E7800000 
 620              	.LVL29:
 621 01b4 6FF05FF7 		j	.L6
 622              	.LVL30:
 623              	.L39:
 624              	.LBB105:
 625              	.LBB97:
  75:src/riscv.cpp ****             TCB** tcb;
 626              		.loc 1 75 13 is_stmt 1
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 627              		.loc 1 76 13
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 628              		.loc 1 76 63 is_stmt 0
 629              	#APP
 630              	# 76 "src/riscv.cpp" 1
 631              		mv a5, a1
 632              	# 0 "" 2
 633              	.LVL31:
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
 634              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
GAS LISTING /tmp/ccCMElxB.s 			page 21


 635              		.loc 1 77 27 is_stmt 0
 636              	#NO_APP
 637 01bc 03B50700 		ld	a0,0(a5)
 638 01c0 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 638      E7800000 
 639              	.LVL32:
 640              	.LBE97:
 641 01c8 6FF01FF6 		j	.L6
 642              	.LVL33:
 643              	.L40:
 644              	.LBB98:
 645              	.LBB89:
  81:src/riscv.cpp ****             TCB** tcb;
 646              		.loc 1 81 13 is_stmt 1
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 647              		.loc 1 82 13
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 648              		.loc 1 82 63 is_stmt 0
 649              	#APP
 650              	# 82 "src/riscv.cpp" 1
 651              		mv s3, a1
 652              	# 0 "" 2
 653              	.LVL34:
  83:src/riscv.cpp ****             Body a2;
 654              		.loc 1 83 13 is_stmt 1
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 655              		.loc 1 84 13
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 656              		.loc 1 84 62 is_stmt 0
 657              	# 84 "src/riscv.cpp" 1
 658              		mv a0, a2
 659              	# 0 "" 2
 660              	.LVL35:
  86:src/riscv.cpp ****             void* a7;
 661              		.loc 1 86 13 is_stmt 1
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 662              		.loc 1 87 13
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 663              		.loc 1 87 62 is_stmt 0
 664              	# 87 "src/riscv.cpp" 1
 665              		mv a1, a7
 666              	# 0 "" 2
 667              	.LVL36:
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 668              		.loc 1 89 13 is_stmt 1
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 669              		.loc 1 89 62 is_stmt 0
 670              	#NO_APP
 671 01d8 97000000 		call	_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_@plt
 671      E7800000 
 672              	.LVL37:
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 673              		.loc 1 89 18
 674 01e0 23B0A900 		sd	a0,0(s3)
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 675              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
GAS LISTING /tmp/ccCMElxB.s 			page 22


 676              		.loc 1 90 31 is_stmt 0
 677 01e4 63880900 		beqz	s3,.L26
 678 01e8 93070000 		li	a5,0
 679              	.L14:
 680              	.LVL38:
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 681              		.loc 1 92 13 is_stmt 1 discriminator 4
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 682              		.loc 1 92 51 is_stmt 0 discriminator 4
 683              	#APP
 684              	# 92 "src/riscv.cpp" 1
 685              		mv a0, a5
 686              	# 0 "" 2
 687              	#NO_APP
 688              	.LBE89:
 689 01f0 6FF09FF3 		j	.L6
 690              	.LVL39:
 691              	.L26:
 692              	.LBB90:
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 693              		.loc 1 90 31
 694 01f4 9307F0FF 		li	a5,-1
 695 01f8 6FF05FFF 		j	.L14
 696              	.LVL40:
 697              	.L41:
 698              	.LBE90:
 699              	.LBB91:
 700              	.LBB82:
  97:src/riscv.cpp ****             unsigned a2;
 701              		.loc 1 97 13 is_stmt 1
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 702              		.loc 1 98 13
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 703              		.loc 1 98 62 is_stmt 0
 704              	#APP
 705              	# 98 "src/riscv.cpp" 1
 706              		mv a0, a2
 707              	# 0 "" 2
 708              	#NO_APP
 709 0200 1B050500 		sext.w	a0,a0
 710              	.LVL41:
 100:src/riscv.cpp ****             Ksemaphore** sem;
 711              		.loc 1 100 13 is_stmt 1
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 712              		.loc 1 101 13
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 713              		.loc 1 101 63 is_stmt 0
 714              	#APP
 715              	# 101 "src/riscv.cpp" 1
 716              		mv s3, a1
 717              	# 0 "" 2
 718              	.LVL42:
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 719              		.loc 1 102 13 is_stmt 1
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 720              		.loc 1 102 47 is_stmt 0
 721              	#NO_APP
GAS LISTING /tmp/ccCMElxB.s 			page 23


 722 0208 97000000 		call	_ZN10Ksemaphore15createSemaphoreEj@plt
 722      E7800000 
 723              	.LVL43:
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 724              		.loc 1 102 18
 725 0210 23B0A900 		sd	a0,0(s3)
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 726              		.loc 1 104 13 is_stmt 1
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 727              		.loc 1 104 38 is_stmt 0
 728 0214 63880900 		beqz	s3,.L27
 729 0218 93070000 		li	a5,0
 730              	.L16:
 731              	.LVL44:
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 732              		.loc 1 105 13 is_stmt 1 discriminator 4
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 733              		.loc 1 105 50 is_stmt 0 discriminator 4
 734              	#APP
 735              	# 105 "src/riscv.cpp" 1
 736              		mv a0, a5
 737              	# 0 "" 2
 738              	#NO_APP
 739              	.LBE82:
 740 0220 6FF09FF0 		j	.L6
 741              	.LVL45:
 742              	.L27:
 743              	.LBB83:
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 744              		.loc 1 104 38
 745 0224 9307F0FF 		li	a5,-1
 746 0228 6FF05FFF 		j	.L16
 747              	.LVL46:
 748              	.L42:
 749              	.LBE83:
 750              	.LBB84:
 751              	.LBB76:
 111:src/riscv.cpp ****             uint64 a;
 752              		.loc 1 111 13 is_stmt 1
 112:src/riscv.cpp ****             Ksemaphore* sem;
 753              		.loc 1 112 13
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 754              		.loc 1 113 13
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 755              		.loc 1 113 63 is_stmt 0
 756              	#APP
 757              	# 113 "src/riscv.cpp" 1
 758              		mv a0, a1
 759              	# 0 "" 2
 760              	.LVL47:
 115:src/riscv.cpp ****             a=0;
 761              		.loc 1 115 13 is_stmt 1
 116:src/riscv.cpp ****             if(sem== nullptr){
 762              		.loc 1 116 13
 763              	#NO_APP
 764 0230 630C0500 		beqz	a0,.L28
 120:src/riscv.cpp ****                 sem->closeSemaphore();
GAS LISTING /tmp/ccCMElxB.s 			page 24


 765              		.loc 1 120 17
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 766              		.loc 1 120 36 is_stmt 0
 767 0234 97000000 		call	_ZN10Ksemaphore14closeSemaphoreEv@plt
 767      E7800000 
 768              	.LVL48:
 115:src/riscv.cpp ****             a=0;
 769              		.loc 1 115 14
 770 023c 93070000 		li	a5,0
 771              	.L18:
 772              	.LVL49:
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 773              		.loc 1 122 13 is_stmt 1
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 774              		.loc 1 122 50 is_stmt 0
 775              	#APP
 776              	# 122 "src/riscv.cpp" 1
 777              		mv a0, a5
 778              	# 0 "" 2
 779              	#NO_APP
 780              	.LBE76:
 781 0244 6FF05FEE 		j	.L6
 782              	.LVL50:
 783              	.L28:
 784              	.LBB77:
 117:src/riscv.cpp ****                 a=1;
 785              		.loc 1 117 18
 786 0248 93071000 		li	a5,1
 787              	.LVL51:
 788 024c 6FF05FFF 		j	.L18
 789              	.LVL52:
 790              	.L43:
 791              	.LBE77:
 792              	.LBB78:
 793              	.LBB71:
 128:src/riscv.cpp ****             int a;
 794              		.loc 1 128 13 is_stmt 1
 129:src/riscv.cpp ****             Ksemaphore* a7;
 795              		.loc 1 129 13
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 796              		.loc 1 130 13
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 797              		.loc 1 130 62 is_stmt 0
 798              	#APP
 799              	# 130 "src/riscv.cpp" 1
 800              		mv a0, a7
 801              	# 0 "" 2
 802              	.LVL53:
 132:src/riscv.cpp ****             if(a7!= nullptr){
 803              		.loc 1 132 13 is_stmt 1
 804              	#NO_APP
 805 0254 630A0500 		beqz	a0,.L29
 133:src/riscv.cpp ****                 a = a7->wait();
 806              		.loc 1 133 17
 133:src/riscv.cpp ****                 a = a7->wait();
 807              		.loc 1 133 29 is_stmt 0
 808 0258 97000000 		call	_ZN10Ksemaphore4waitEv@plt
GAS LISTING /tmp/ccCMElxB.s 			page 25


 808      E7800000 
 809              	.LVL54:
 810              	.L20:
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 811              		.loc 1 140 13 is_stmt 1
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 812              		.loc 1 140 50 is_stmt 0
 813              	#APP
 814              	# 140 "src/riscv.cpp" 1
 815              		mv a0, a0
 816              	# 0 "" 2
 817              	#NO_APP
 818              	.LBE71:
 819 0264 6FF05FEC 		j	.L6
 820              	.LVL55:
 821              	.L29:
 822              	.LBB72:
 136:src/riscv.cpp ****                 a=-1;
 823              		.loc 1 136 18
 824 0268 1305F0FF 		li	a0,-1
 825              	.LVL56:
 826 026c 6FF05FFF 		j	.L20
 827              	.L44:
 828              	.LBE72:
 829              	.LBB73:
 830              	.LBB68:
 146:src/riscv.cpp ****             uint64 a;
 831              		.loc 1 146 13 is_stmt 1
 147:src/riscv.cpp ****             Ksemaphore* sem;
 832              		.loc 1 147 13
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 833              		.loc 1 148 13
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 834              		.loc 1 148 63 is_stmt 0
 835              	#APP
 836              	# 148 "src/riscv.cpp" 1
 837              		mv a0, a7
 838              	# 0 "" 2
 839              	.LVL57:
 149:src/riscv.cpp ****             if(sem!= nullptr) {
 840              		.loc 1 149 13 is_stmt 1
 841              	#NO_APP
 842 0274 630A0500 		beqz	a0,.L30
 150:src/riscv.cpp ****                 a = sem->signal();
 843              		.loc 1 150 17
 150:src/riscv.cpp ****                 a = sem->signal();
 844              		.loc 1 150 32 is_stmt 0
 845 0278 97000000 		call	_ZN10Ksemaphore6signalEv@plt
 845      E7800000 
 846              	.LVL58:
 847              	.L22:
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 848              		.loc 1 155 13 is_stmt 1
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 849              		.loc 1 155 50 is_stmt 0
 850              	#APP
 851              	# 155 "src/riscv.cpp" 1
GAS LISTING /tmp/ccCMElxB.s 			page 26


 852              		mv a0, a0
 853              	# 0 "" 2
 854              	#NO_APP
 855              	.LBE68:
 856 0284 6FF05FEA 		j	.L6
 857              	.LVL59:
 858              	.L30:
 859              	.LBB69:
 152:src/riscv.cpp ****                 a=1;
 860              		.loc 1 152 18
 861 0288 13051000 		li	a0,1
 862              	.LVL60:
 863 028c 6FF05FFF 		j	.L22
 864              	.LVL61:
 865              	.L33:
 866              	.LBE69:
 867              	.LBE73:
 868              	.LBE78:
 869              	.LBE84:
 870              	.LBE91:
 871              	.LBE98:
 872              	.LBE105:
 873              	.LBE114:
 874              	.LBE125:
 875              	.LBE136:
 876              	.LBE148:
 877              	.LBE164:
 878              	.LBE176:
 186:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 879              		.loc 1 186 9 is_stmt 1
 880              	.LBB177:
 881              	.LBB178:
 159:src/../h/riscv.hpp **** }
 882              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 883              		.loc 2 159 64 is_stmt 0
 884 0290 93072000 		li	a5,2
 885              	#APP
 886              	# 159 "src/../h/riscv.hpp" 1
 160:src/../h/riscv.hpp **** 
 887              		csrc sip, a5
 888              	# 0 "" 2
 889              		.loc 2 160 1
 890              	#NO_APP
 891 0298 6FF09FE9 		j	.L3
 892              	.LBE178:
 893              	.LBE177:
 894              	.LBE191:
 895              		.cfi_endproc
 896              	.LFE49:
 898              	.Letext0:
 899              		.file 4 "src/../h/../h/../lib/hw.h"
 900              		.file 5 "src/../h/../h/MemoryAllocator.hpp"
 901              		.file 6 "src/../h/../h/scheduler.hpp"
 902              		.file 7 "src/../h/../h/list.hpp"
 903              		.file 8 "src/../h/../h/Ksemaphore.hpp"
 904              		.file 9 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccCMElxB.s 			page 27


GAS LISTING /tmp/ccCMElxB.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccCMElxB.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccCMElxB.s:13     .text:0000000000000000 .L0 
     /tmp/ccCMElxB.s:14     .text:0000000000000000 .L0 
     /tmp/ccCMElxB.s:15     .text:0000000000000004 .L0 
     /tmp/ccCMElxB.s:17     .text:0000000000000008 .L0 
     /tmp/ccCMElxB.s:19     .text:000000000000000c .L0 
     /tmp/ccCMElxB.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/ccCMElxB.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/ccCMElxB.s:33     .text:0000000000000014 .L0 
     /tmp/ccCMElxB.s:34     .text:0000000000000018 .L0 
     /tmp/ccCMElxB.s:35     .text:0000000000000018 .L0 
     /tmp/ccCMElxB.s:37     .text:000000000000001c .L0 
     /tmp/ccCMElxB.s:39     .text:0000000000000020 .L0 
     /tmp/ccCMElxB.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccCMElxB.s:48     .text:0000000000000020 .L0 
     /tmp/ccCMElxB.s:49     .text:0000000000000020 .L0 
     /tmp/ccCMElxB.s:50     .text:0000000000000024 .L0 
     /tmp/ccCMElxB.s:56     .text:0000000000000038 .L0 
     /tmp/ccCMElxB.s:57     .text:0000000000000038 .L0 
     /tmp/ccCMElxB.s:58     .text:0000000000000038 .L0 
     /tmp/ccCMElxB.s:59     .text:0000000000000038 .L0 
     /tmp/ccCMElxB.s:60     .text:0000000000000038 .L0 
     /tmp/ccCMElxB.s:62     .text:000000000000003c .L0 
     /tmp/ccCMElxB.s:67     .text:000000000000003c .L0 
     /tmp/ccCMElxB.s:68     .text:000000000000003c .L0 
     /tmp/ccCMElxB.s:69     .text:000000000000003c .L0 
  src/../h/riscv.hpp:107    .text:000000000000003c .L0 
     /tmp/ccCMElxB.s:77     .text:0000000000000044 .L0 
     /tmp/ccCMElxB.s:78     .text:0000000000000044 .L0 
     /tmp/ccCMElxB.s:84     .text:0000000000000048 .L0 
     /tmp/ccCMElxB.s:85     .text:0000000000000048 .L0 
     /tmp/ccCMElxB.s:87     .text:000000000000004c .L0 
     /tmp/ccCMElxB.s:90     .text:0000000000000054 .L0 
     /tmp/ccCMElxB.s:95     .text:0000000000000064 .L0 
     /tmp/ccCMElxB.s:100    .text:0000000000000074 .L0 
     /tmp/ccCMElxB.s:101    .text:0000000000000074 .L0 
     /tmp/ccCMElxB.s:105    .text:000000000000007c .L0 
     /tmp/ccCMElxB.s:113    .text:0000000000000080 .L0 
     /tmp/ccCMElxB.s:114    .text:0000000000000080 .L0 
     /tmp/ccCMElxB.s:115    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000080 .L0 
     /tmp/ccCMElxB.s:123    .text:0000000000000088 .L0 
     /tmp/ccCMElxB.s:124    .text:0000000000000088 .L0 
     /tmp/ccCMElxB.s:128    .text:000000000000008c .L0 
     /tmp/ccCMElxB.s:133    .text:0000000000000090 .L0 
     /tmp/ccCMElxB.s:134    .text:0000000000000090 .L0 
     /tmp/ccCMElxB.s:135    .text:0000000000000090 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000090 .L0 
     /tmp/ccCMElxB.s:143    .text:0000000000000098 .L0 
     /tmp/ccCMElxB.s:144    .text:0000000000000098 .L0 
     /tmp/ccCMElxB.s:151    .text:000000000000009c .L0 
     /tmp/ccCMElxB.s:152    .text:000000000000009c .L0 
     /tmp/ccCMElxB.s:153    .text:000000000000009c .L0 
GAS LISTING /tmp/ccCMElxB.s 			page 29


  src/../h/riscv.hpp:200    .text:000000000000009c .L0 
     /tmp/ccCMElxB.s:161    .text:00000000000000a4 .L0 
     /tmp/ccCMElxB.s:162    .text:00000000000000a4 .L0 
     /tmp/ccCMElxB.s:168    .text:00000000000000a8 .L0 
     /tmp/ccCMElxB.s:179    .text:00000000000000b0 .L0 
     /tmp/ccCMElxB.s:191    .text:00000000000000b8 .L0 
     /tmp/ccCMElxB.s:205    .text:00000000000000c0 .L0 
     /tmp/ccCMElxB.s:221    .text:00000000000000c8 .L0 
     /tmp/ccCMElxB.s:239    .text:00000000000000d0 .L0 
     /tmp/ccCMElxB.s:259    .text:00000000000000d8 .L0 
     /tmp/ccCMElxB.s:281    .text:00000000000000e0 .L0 
     /tmp/ccCMElxB.s:305    .text:00000000000000e8 .L0 
     /tmp/ccCMElxB.s:331    .text:00000000000000f0 .L0 
     /tmp/ccCMElxB.s:359    .text:00000000000000f8 .L0 
     /tmp/ccCMElxB.s:389    .text:0000000000000100 .L0 
     /tmp/ccCMElxB.s:393    .text:0000000000000108 .L0 
     /tmp/ccCMElxB.s:394    .text:0000000000000108 .L0 
     /tmp/ccCMElxB.s:395    .text:0000000000000108 .L0 
       src/riscv.cpp:160    .text:0000000000000108 .L0 
     /tmp/ccCMElxB.s:406    .text:000000000000010c .L0 
     /tmp/ccCMElxB.s:407    .text:000000000000010c .L0 
     /tmp/ccCMElxB.s:408    .text:000000000000010c .L0 
     /tmp/ccCMElxB.s:413    .text:0000000000000110 .L0 
       src/riscv.cpp:163    .text:0000000000000110 .L0 
     /tmp/ccCMElxB.s:436    .text:0000000000000118 .L0 
     /tmp/ccCMElxB.s:437    .text:0000000000000118 .L0 
     /tmp/ccCMElxB.s:438    .text:0000000000000118 .L0 
       src/riscv.cpp:28     .text:0000000000000118 .L0 
     /tmp/ccCMElxB.s:445    .text:000000000000011c .L0 
     /tmp/ccCMElxB.s:447    .text:000000000000011c .L0 
     /tmp/ccCMElxB.s:450    .text:0000000000000124 .L0 
       src/riscv.cpp:31     .text:0000000000000124 .L0 
     /tmp/ccCMElxB.s:463    .text:0000000000000128 .L0 
     /tmp/ccCMElxB.s:464    .text:0000000000000128 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000128 .L0 
     /tmp/ccCMElxB.s:476    .text:000000000000012c .L0 
     /tmp/ccCMElxB.s:477    .text:000000000000012c .L0 
  src/../h/riscv.hpp:125    .text:000000000000012c .L0 
     /tmp/ccCMElxB.s:490    .text:0000000000000130 .L0 
     /tmp/ccCMElxB.s:491    .text:0000000000000134 .L0 
     /tmp/ccCMElxB.s:492    .text:0000000000000134 .L0 
     /tmp/ccCMElxB.s:494    .text:0000000000000138 .L0 
     /tmp/ccCMElxB.s:495    .text:0000000000000138 .L0 
     /tmp/ccCMElxB.s:497    .text:000000000000013c .L0 
     /tmp/ccCMElxB.s:499    .text:0000000000000140 .L0 
     /tmp/ccCMElxB.s:501    .text:0000000000000144 .L0 
     /tmp/ccCMElxB.s:503    .text:0000000000000148 .L0 
     /tmp/ccCMElxB.s:507    .text:000000000000014c .L0 
     /tmp/ccCMElxB.s:514    .text:000000000000014c .L0 
     /tmp/ccCMElxB.s:515    .text:000000000000014c .L0 
     /tmp/ccCMElxB.s:516    .text:000000000000014c .L0 
       src/riscv.cpp:37     .text:000000000000014c .L0 
     /tmp/ccCMElxB.s:523    .text:0000000000000150 .L0 
     /tmp/ccCMElxB.s:525    .text:0000000000000150 .L0 
     /tmp/ccCMElxB.s:528    .text:0000000000000158 .L0 
       src/riscv.cpp:40     .text:0000000000000158 .L0 
     /tmp/ccCMElxB.s:541    .text:0000000000000160 .L0 
GAS LISTING /tmp/ccCMElxB.s 			page 30


     /tmp/ccCMElxB.s:542    .text:0000000000000160 .L0 
       src/riscv.cpp:48     .text:0000000000000160 .L0 
     /tmp/ccCMElxB.s:549    .text:0000000000000164 .L0 
     /tmp/ccCMElxB.s:550    .text:0000000000000164 .L0 
       src/riscv.cpp:50     .text:0000000000000164 .L0 
     /tmp/ccCMElxB.s:556    .text:0000000000000168 .L0 
     /tmp/ccCMElxB.s:557    .text:0000000000000168 .L0 
       src/riscv.cpp:53     .text:0000000000000168 .L0 
     /tmp/ccCMElxB.s:563    .text:000000000000016c .L0 
     /tmp/ccCMElxB.s:565    .text:000000000000016c .L0 
     /tmp/ccCMElxB.s:568    .text:0000000000000174 .L0 
     /tmp/ccCMElxB.s:570    .text:0000000000000178 .L0 
     /tmp/ccCMElxB.s:571    .text:0000000000000178 .L0 
     /tmp/ccCMElxB.s:576    .text:0000000000000180 .L0 
       src/riscv.cpp:58     .text:0000000000000180 .L0 
     /tmp/ccCMElxB.s:588    .text:0000000000000188 .L0 
     /tmp/ccCMElxB.s:596    .text:0000000000000190 .L0 
     /tmp/ccCMElxB.s:597    .text:0000000000000190 .L0 
     /tmp/ccCMElxB.s:598    .text:0000000000000190 .L0 
     /tmp/ccCMElxB.s:601    .text:0000000000000198 .L0 
       src/riscv.cpp:65     .text:0000000000000198 .L0 
     /tmp/ccCMElxB.s:613    .text:00000000000001a0 .L0 
     /tmp/ccCMElxB.s:614    .text:00000000000001a0 .L0 
     /tmp/ccCMElxB.s:618    .text:00000000000001ac .L0 
     /tmp/ccCMElxB.s:619    .text:00000000000001ac .L0 
     /tmp/ccCMElxB.s:627    .text:00000000000001b8 .L0 
     /tmp/ccCMElxB.s:628    .text:00000000000001b8 .L0 
       src/riscv.cpp:76     .text:00000000000001b8 .L0 
     /tmp/ccCMElxB.s:635    .text:00000000000001bc .L0 
     /tmp/ccCMElxB.s:637    .text:00000000000001bc .L0 
     /tmp/ccCMElxB.s:647    .text:00000000000001cc .L0 
     /tmp/ccCMElxB.s:648    .text:00000000000001cc .L0 
       src/riscv.cpp:82     .text:00000000000001cc .L0 
     /tmp/ccCMElxB.s:655    .text:00000000000001d0 .L0 
     /tmp/ccCMElxB.s:656    .text:00000000000001d0 .L0 
       src/riscv.cpp:84     .text:00000000000001d0 .L0 
     /tmp/ccCMElxB.s:662    .text:00000000000001d4 .L0 
     /tmp/ccCMElxB.s:663    .text:00000000000001d4 .L0 
       src/riscv.cpp:87     .text:00000000000001d4 .L0 
     /tmp/ccCMElxB.s:669    .text:00000000000001d8 .L0 
     /tmp/ccCMElxB.s:671    .text:00000000000001d8 .L0 
     /tmp/ccCMElxB.s:674    .text:00000000000001e0 .L0 
     /tmp/ccCMElxB.s:676    .text:00000000000001e4 .L0 
     /tmp/ccCMElxB.s:677    .text:00000000000001e4 .L0 
     /tmp/ccCMElxB.s:682    .text:00000000000001ec .L0 
       src/riscv.cpp:92     .text:00000000000001ec .L0 
     /tmp/ccCMElxB.s:694    .text:00000000000001f4 .L0 
     /tmp/ccCMElxB.s:702    .text:00000000000001fc .L0 
     /tmp/ccCMElxB.s:703    .text:00000000000001fc .L0 
       src/riscv.cpp:98     .text:00000000000001fc .L0 
     /tmp/ccCMElxB.s:712    .text:0000000000000204 .L0 
     /tmp/ccCMElxB.s:713    .text:0000000000000204 .L0 
       src/riscv.cpp:101    .text:0000000000000204 .L0 
     /tmp/ccCMElxB.s:720    .text:0000000000000208 .L0 
     /tmp/ccCMElxB.s:722    .text:0000000000000208 .L0 
     /tmp/ccCMElxB.s:725    .text:0000000000000210 .L0 
     /tmp/ccCMElxB.s:727    .text:0000000000000214 .L0 
GAS LISTING /tmp/ccCMElxB.s 			page 31


     /tmp/ccCMElxB.s:728    .text:0000000000000214 .L0 
     /tmp/ccCMElxB.s:733    .text:000000000000021c .L0 
       src/riscv.cpp:105    .text:000000000000021c .L0 
     /tmp/ccCMElxB.s:745    .text:0000000000000224 .L0 
     /tmp/ccCMElxB.s:753    .text:000000000000022c .L0 
     /tmp/ccCMElxB.s:754    .text:000000000000022c .L0 
     /tmp/ccCMElxB.s:755    .text:000000000000022c .L0 
       src/riscv.cpp:113    .text:000000000000022c .L0 
     /tmp/ccCMElxB.s:762    .text:0000000000000230 .L0 
     /tmp/ccCMElxB.s:764    .text:0000000000000230 .L0 
     /tmp/ccCMElxB.s:766    .text:0000000000000234 .L0 
     /tmp/ccCMElxB.s:767    .text:0000000000000234 .L0 
     /tmp/ccCMElxB.s:770    .text:000000000000023c .L0 
     /tmp/ccCMElxB.s:774    .text:0000000000000240 .L0 
       src/riscv.cpp:122    .text:0000000000000240 .L0 
     /tmp/ccCMElxB.s:786    .text:0000000000000248 .L0 
     /tmp/ccCMElxB.s:795    .text:0000000000000250 .L0 
     /tmp/ccCMElxB.s:796    .text:0000000000000250 .L0 
     /tmp/ccCMElxB.s:797    .text:0000000000000250 .L0 
       src/riscv.cpp:130    .text:0000000000000250 .L0 
     /tmp/ccCMElxB.s:805    .text:0000000000000254 .L0 
     /tmp/ccCMElxB.s:807    .text:0000000000000258 .L0 
     /tmp/ccCMElxB.s:808    .text:0000000000000258 .L0 
     /tmp/ccCMElxB.s:812    .text:0000000000000260 .L0 
       src/riscv.cpp:140    .text:0000000000000260 .L0 
     /tmp/ccCMElxB.s:824    .text:0000000000000268 .L0 
     /tmp/ccCMElxB.s:832    .text:0000000000000270 .L0 
     /tmp/ccCMElxB.s:833    .text:0000000000000270 .L0 
     /tmp/ccCMElxB.s:834    .text:0000000000000270 .L0 
       src/riscv.cpp:148    .text:0000000000000270 .L0 
     /tmp/ccCMElxB.s:842    .text:0000000000000274 .L0 
     /tmp/ccCMElxB.s:844    .text:0000000000000278 .L0 
     /tmp/ccCMElxB.s:845    .text:0000000000000278 .L0 
     /tmp/ccCMElxB.s:849    .text:0000000000000280 .L0 
       src/riscv.cpp:155    .text:0000000000000280 .L0 
     /tmp/ccCMElxB.s:861    .text:0000000000000288 .L0 
     /tmp/ccCMElxB.s:882    .text:0000000000000290 .L0 
     /tmp/ccCMElxB.s:883    .text:0000000000000290 .L0 
     /tmp/ccCMElxB.s:884    .text:0000000000000290 .L0 
     /tmp/ccCMElxB.s:891    .text:0000000000000298 .L0 
     /tmp/ccCMElxB.s:895    .text:000000000000029c .L0 
     /tmp/ccCMElxB.s:905    .text:000000000000029c .L0 
     /tmp/ccCMElxB.s:614    .text:00000000000001a0 .L0 
     /tmp/ccCMElxB.s:107    .text:0000000000000080 .L32
     /tmp/ccCMElxB.s:865    .text:0000000000000290 .L33
     /tmp/ccCMElxB.s:484    .text:0000000000000130 .L3
     /tmp/ccCMElxB.s:422    .text:0000000000000118 .L34
     /tmp/ccCMElxB.s:506    .text:000000000000014c .L35
     /tmp/ccCMElxB.s:537    .text:0000000000000160 .L36
     /tmp/ccCMElxB.s:591    .text:0000000000000190 .L37
     /tmp/ccCMElxB.s:610    .text:00000000000001a0 .L38
     /tmp/ccCMElxB.s:623    .text:00000000000001b8 .L39
     /tmp/ccCMElxB.s:643    .text:00000000000001cc .L40
     /tmp/ccCMElxB.s:697    .text:00000000000001fc .L41
     /tmp/ccCMElxB.s:748    .text:000000000000022c .L42
     /tmp/ccCMElxB.s:790    .text:0000000000000250 .L43
     /tmp/ccCMElxB.s:827    .text:0000000000000270 .L44
GAS LISTING /tmp/ccCMElxB.s 			page 32


     /tmp/ccCMElxB.s:457    .text:0000000000000128 .L6
     /tmp/ccCMElxB.s:585    .text:0000000000000188 .L25
     /tmp/ccCMElxB.s:573    .text:0000000000000180 .L9
     /tmp/ccCMElxB.s:691    .text:00000000000001f4 .L26
     /tmp/ccCMElxB.s:679    .text:00000000000001ec .L14
     /tmp/ccCMElxB.s:742    .text:0000000000000224 .L27
     /tmp/ccCMElxB.s:730    .text:000000000000021c .L16
     /tmp/ccCMElxB.s:783    .text:0000000000000248 .L28
     /tmp/ccCMElxB.s:771    .text:0000000000000240 .L18
     /tmp/ccCMElxB.s:821    .text:0000000000000268 .L29
     /tmp/ccCMElxB.s:810    .text:0000000000000260 .L20
     /tmp/ccCMElxB.s:858    .text:0000000000000288 .L30
     /tmp/ccCMElxB.s:847    .text:0000000000000280 .L22
     /tmp/ccCMElxB.s:2698   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccCMElxB.s:4536   .debug_str:0000000000000979 .LASF182
     /tmp/ccCMElxB.s:4592   .debug_str:0000000000000bda .LASF183
     /tmp/ccCMElxB.s:4328   .debug_str:00000000000002f6 .LASF184
     /tmp/ccCMElxB.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccCMElxB.s:898    .text:000000000000029c .Letext0
     /tmp/ccCMElxB.s:4230   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccCMElxB.s:4354   .debug_str:00000000000003cb .LASF0
     /tmp/ccCMElxB.s:4384   .debug_str:00000000000004c8 .LASF1
     /tmp/ccCMElxB.s:4480   .debug_str:00000000000007f1 .LASF2
     /tmp/ccCMElxB.s:4486   .debug_str:0000000000000821 .LASF4
     /tmp/ccCMElxB.s:4362   .debug_str:00000000000003ff .LASF3
     /tmp/ccCMElxB.s:4246   .debug_str:0000000000000073 .LASF5
     /tmp/ccCMElxB.s:4448   .debug_str:00000000000006d6 .LASF6
     /tmp/ccCMElxB.s:4374   .debug_str:0000000000000489 .LASF7
     /tmp/ccCMElxB.s:4326   .debug_str:00000000000002e6 .LASF8
     /tmp/ccCMElxB.s:4336   .debug_str:000000000000034c .LASF9
     /tmp/ccCMElxB.s:4270   .debug_str:0000000000000134 .LASF10
     /tmp/ccCMElxB.s:4316   .debug_str:0000000000000291 .LASF11
     /tmp/ccCMElxB.s:4284   .debug_str:0000000000000188 .LASF12
     /tmp/ccCMElxB.s:4268   .debug_str:0000000000000124 .LASF13
     /tmp/ccCMElxB.s:4522   .debug_str:000000000000093c .LASF14
     /tmp/ccCMElxB.s:4302   .debug_str:00000000000001ef .LASF15
     /tmp/ccCMElxB.s:4508   .debug_str:00000000000008ad .LASF16
     /tmp/ccCMElxB.s:4444   .debug_str:00000000000006ba .LASF30
     /tmp/ccCMElxB.s:4256   .debug_str:00000000000000b4 .LASF62
     /tmp/ccCMElxB.s:4272   .debug_str:0000000000000143 .LASF17
     /tmp/ccCMElxB.s:4254   .debug_str:00000000000000af .LASF18
     /tmp/ccCMElxB.s:4382   .debug_str:00000000000004c3 .LASF19
     /tmp/ccCMElxB.s:4274   .debug_str:0000000000000148 .LASF20
     /tmp/ccCMElxB.s:4426   .debug_str:000000000000063f .LASF21
     /tmp/ccCMElxB.s:4504   .debug_str:0000000000000896 .LASF22
     /tmp/ccCMElxB.s:4344   .debug_str:000000000000037d .LASF23
     /tmp/ccCMElxB.s:4450   .debug_str:00000000000006e9 .LASF25
     /tmp/ccCMElxB.s:4544   .debug_str:0000000000000a66 .LASF24
     /tmp/ccCMElxB.s:4300   .debug_str:00000000000001ce .LASF26
     /tmp/ccCMElxB.s:4586   .debug_str:0000000000000ba9 .LASF86
     /tmp/ccCMElxB.s:4416   .debug_str:00000000000005e8 .LASF88
     /tmp/ccCMElxB.s:4232   .debug_str:0000000000000000 .LASF32
     /tmp/ccCMElxB.s:4390   .debug_str:00000000000004ec .LASF34
     /tmp/ccCMElxB.s:4550   .debug_str:0000000000000a94 .LASF27
     /tmp/ccCMElxB.s:4364   .debug_str:0000000000000411 .LASF28
     /tmp/ccCMElxB.s:4530   .debug_str:0000000000000962 .LASF29
     /tmp/ccCMElxB.s:4324   .debug_str:00000000000002dc .LASF31
GAS LISTING /tmp/ccCMElxB.s 			page 33


     /tmp/ccCMElxB.s:4614   .debug_str:0000000000000cbc .LASF33
     /tmp/ccCMElxB.s:4260   .debug_str:00000000000000d0 .LASF35
     /tmp/ccCMElxB.s:4236   .debug_str:000000000000000c .LASF36
     /tmp/ccCMElxB.s:4442   .debug_str:00000000000006a7 .LASF37
     /tmp/ccCMElxB.s:4502   .debug_str:0000000000000885 .LASF38
     /tmp/ccCMElxB.s:4282   .debug_str:000000000000017f .LASF39
     /tmp/ccCMElxB.s:4602   .debug_str:0000000000000c2c .LASF40
     /tmp/ccCMElxB.s:4606   .debug_str:0000000000000c5f .LASF185
     /tmp/ccCMElxB.s:4346   .debug_str:0000000000000383 .LASF186
     /tmp/ccCMElxB.s:4594   .debug_str:0000000000000be8 .LASF41
     /tmp/ccCMElxB.s:4372   .debug_str:000000000000046c .LASF42
     /tmp/ccCMElxB.s:4572   .debug_str:0000000000000b63 .LASF43
     /tmp/ccCMElxB.s:4558   .debug_str:0000000000000ac8 .LASF187
     /tmp/ccCMElxB.s:4514   .debug_str:00000000000008dd .LASF44
     /tmp/ccCMElxB.s:4418   .debug_str:0000000000000614 .LASF45
     /tmp/ccCMElxB.s:4510   .debug_str:00000000000008c3 .LASF46
     /tmp/ccCMElxB.s:4314   .debug_str:000000000000027a .LASF54
     /tmp/ccCMElxB.s:4482   .debug_str:00000000000007ff .LASF188
     /tmp/ccCMElxB.s:4474   .debug_str:00000000000007bf .LASF189
     /tmp/ccCMElxB.s:4456   .debug_str:0000000000000731 .LASF47
     /tmp/ccCMElxB.s:4428   .debug_str:0000000000000644 .LASF48
     /tmp/ccCMElxB.s:4380   .debug_str:00000000000004ba .LASF49
     /tmp/ccCMElxB.s:4264   .debug_str:00000000000000f0 .LASF50
     /tmp/ccCMElxB.s:4404   .debug_str:0000000000000579 .LASF51
     /tmp/ccCMElxB.s:4306   .debug_str:000000000000022b .LASF52
     /tmp/ccCMElxB.s:4446   .debug_str:00000000000006ca .LASF53
     /tmp/ccCMElxB.s:4574   .debug_str:0000000000000b6d .LASF55
     /tmp/ccCMElxB.s:4622   .debug_str:0000000000000ce5 .LASF56
     /tmp/ccCMElxB.s:4608   .debug_str:0000000000000c73 .LASF57
     /tmp/ccCMElxB.s:4498   .debug_str:0000000000000866 .LASF58
     /tmp/ccCMElxB.s:4414   .debug_str:00000000000005cb .LASF59
     /tmp/ccCMElxB.s:4470   .debug_str:00000000000007b1 .LASF60
     /tmp/ccCMElxB.s:4240   .debug_str:0000000000000025 .LASF61
     /tmp/ccCMElxB.s:4526   .debug_str:000000000000094f .LASF63
     /tmp/ccCMElxB.s:4262   .debug_str:00000000000000e2 .LASF99
     /tmp/ccCMElxB.s:4394   .debug_str:0000000000000517 .LASF101
     /tmp/ccCMElxB.s:4280   .debug_str:0000000000000173 .LASF92
     /tmp/ccCMElxB.s:4488   .debug_str:0000000000000828 .LASF64
     /tmp/ccCMElxB.s:4244   .debug_str:0000000000000067 .LASF65
     /tmp/ccCMElxB.s:4528   .debug_str:0000000000000957 .LASF66
     /tmp/ccCMElxB.s:4422   .debug_str:0000000000000620 .LASF67
     /tmp/ccCMElxB.s:4258   .debug_str:00000000000000c4 .LASF68
     /tmp/ccCMElxB.s:4552   .debug_str:0000000000000a99 .LASF69
     /tmp/ccCMElxB.s:4392   .debug_str:000000000000050a .LASF70
     /tmp/ccCMElxB.s:4562   .debug_str:0000000000000af1 .LASF71
     /tmp/ccCMElxB.s:4438   .debug_str:0000000000000691 .LASF177
     /tmp/ccCMElxB.s:4464   .debug_str:0000000000000782 .LASF72
     /tmp/ccCMElxB.s:4410   .debug_str:00000000000005a3 .LASF73
     /tmp/ccCMElxB.s:4420   .debug_str:0000000000000619 .LASF74
     /tmp/ccCMElxB.s:4252   .debug_str:000000000000009e .LASF75
     /tmp/ccCMElxB.s:4580   .debug_str:0000000000000b96 .LASF76
     /tmp/ccCMElxB.s:4400   .debug_str:0000000000000550 .LASF77
     /tmp/ccCMElxB.s:4332   .debug_str:0000000000000324 .LASF78
     /tmp/ccCMElxB.s:4408   .debug_str:0000000000000596 .LASF79
     /tmp/ccCMElxB.s:4520   .debug_str:000000000000092f .LASF80
     /tmp/ccCMElxB.s:4564   .debug_str:0000000000000b0a .LASF81
     /tmp/ccCMElxB.s:4304   .debug_str:0000000000000205 .LASF82
GAS LISTING /tmp/ccCMElxB.s 			page 34


     /tmp/ccCMElxB.s:4516   .debug_str:00000000000008e2 .LASF83
     /tmp/ccCMElxB.s:4312   .debug_str:000000000000026b .LASF84
     /tmp/ccCMElxB.s:4546   .debug_str:0000000000000a70 .LASF85
     /tmp/ccCMElxB.s:4388   .debug_str:00000000000004e6 .LASF87
     /tmp/ccCMElxB.s:4540   .debug_str:0000000000000a4c .LASF89
     /tmp/ccCMElxB.s:4610   .debug_str:0000000000000c8e .LASF90
     /tmp/ccCMElxB.s:4604   .debug_str:0000000000000c3e .LASF91
     /tmp/ccCMElxB.s:4534   .debug_str:0000000000000971 .LASF190
     /tmp/ccCMElxB.s:4458   .debug_str:0000000000000744 .LASF93
     /tmp/ccCMElxB.s:4234   .debug_str:0000000000000007 .LASF94
     /tmp/ccCMElxB.s:4292   .debug_str:00000000000001b4 .LASF95
     /tmp/ccCMElxB.s:4548   .debug_str:0000000000000a8c .LASF96
     /tmp/ccCMElxB.s:4542   .debug_str:0000000000000a5c .LASF97
     /tmp/ccCMElxB.s:4506   .debug_str:00000000000008a4 .LASF98
     /tmp/ccCMElxB.s:4288   .debug_str:000000000000019f .LASF191
     /tmp/ccCMElxB.s:4242   .debug_str:000000000000003f .LASF192
     /tmp/ccCMElxB.s:4294   .debug_str:00000000000001ba .LASF100
     /tmp/ccCMElxB.s:4370   .debug_str:0000000000000459 .LASF102
     /tmp/ccCMElxB.s:4598   .debug_str:0000000000000c0a .LASF103
     /tmp/ccCMElxB.s:4560   .debug_str:0000000000000acd .LASF104
     /tmp/ccCMElxB.s:4616   .debug_str:0000000000000cc9 .LASF105
     /tmp/ccCMElxB.s:4454   .debug_str:000000000000071b .LASF106
     /tmp/ccCMElxB.s:4496   .debug_str:0000000000000855 .LASF107
     /tmp/ccCMElxB.s:4238   .debug_str:000000000000001c .LASF108
     /tmp/ccCMElxB.s:4472   .debug_str:00000000000007ba .LASF109
     /tmp/ccCMElxB.s:4386   .debug_str:00000000000004db .LASF110
     /tmp/ccCMElxB.s:4436   .debug_str:000000000000067d .LASF111
     /tmp/ccCMElxB.s:4296   .debug_str:00000000000001c3 .LASF112
     /tmp/ccCMElxB.s:4266   .debug_str:000000000000010d .LASF113
     /tmp/ccCMElxB.s:4524   .debug_str:0000000000000948 .LASF114
     /tmp/ccCMElxB.s:4250   .debug_str:0000000000000085 .LASF115
     /tmp/ccCMElxB.s:4342   .debug_str:0000000000000377 .LASF116
     /tmp/ccCMElxB.s:4402   .debug_str:0000000000000560 .LASF117
     /tmp/ccCMElxB.s:4476   .debug_str:00000000000007d6 .LASF118
     /tmp/ccCMElxB.s:4318   .debug_str:00000000000002a0 .LASF119
     /tmp/ccCMElxB.s:4538   .debug_str:0000000000000a3d .LASF120
     /tmp/ccCMElxB.s:4462   .debug_str:0000000000000760 .LASF121
     /tmp/ccCMElxB.s:4352   .debug_str:00000000000003c5 .LASF122
     /tmp/ccCMElxB.s:4396   .debug_str:0000000000000530 .LASF123
     /tmp/ccCMElxB.s:4430   .debug_str:0000000000000658 .LASF124
     /tmp/ccCMElxB.s:4566   .debug_str:0000000000000b2a .LASF125
     /tmp/ccCMElxB.s:4500   .debug_str:0000000000000871 .LASF126
     /tmp/ccCMElxB.s:4588   .debug_str:0000000000000bbd .LASF127
     /tmp/ccCMElxB.s:4432   .debug_str:0000000000000660 .LASF128
     /tmp/ccCMElxB.s:4576   .debug_str:0000000000000b8b .LASF129
     /tmp/ccCMElxB.s:4378   .debug_str:00000000000004af .LASF193
     /tmp/ccCMElxB.s:4366   .debug_str:000000000000042e .LASF130
     /tmp/ccCMElxB.s:4310   .debug_str:0000000000000262 .LASF131
     /tmp/ccCMElxB.s:4600   .debug_str:0000000000000c23 .LASF132
     /tmp/ccCMElxB.s:4340   .debug_str:000000000000036c .LASF133
     /tmp/ccCMElxB.s:4350   .debug_str:00000000000003ad .LASF134
     /tmp/ccCMElxB.s:4494   .debug_str:0000000000000847 .LASF135
     /tmp/ccCMElxB.s:4308   .debug_str:0000000000000247 .LASF136
     /tmp/ccCMElxB.s:4356   .debug_str:00000000000003d8 .LASF137
     /tmp/ccCMElxB.s:4568   .debug_str:0000000000000b44 .LASF138
     /tmp/ccCMElxB.s:4556   .debug_str:0000000000000abf .LASF139
     /tmp/ccCMElxB.s:4406   .debug_str:0000000000000581 .LASF143
GAS LISTING /tmp/ccCMElxB.s 			page 35


     /tmp/ccCMElxB.s:4618   .debug_str:0000000000000cd4 .LASF140
     /tmp/ccCMElxB.s:4434   .debug_str:0000000000000668 .LASF141
     /tmp/ccCMElxB.s:4460   .debug_str:0000000000000759 .LASF142
     /tmp/ccCMElxB.s:4466   .debug_str:000000000000078a .LASF144
     /tmp/ccCMElxB.s:4286   .debug_str:0000000000000198 .LASF145
     /tmp/ccCMElxB.s:4376   .debug_str:000000000000049c .LASF146
     /tmp/ccCMElxB.s:4590   .debug_str:0000000000000bd2 .LASF147
     /tmp/ccCMElxB.s:4518   .debug_str:000000000000091b .LASF148
     /tmp/ccCMElxB.s:4424   .debug_str:0000000000000637 .LASF149
     /tmp/ccCMElxB.s:4320   .debug_str:00000000000002c3 .LASF150
     /tmp/ccCMElxB.s:4398   .debug_str:0000000000000548 .LASF151
     /tmp/ccCMElxB.s:4468   .debug_str:000000000000079d .LASF152
     /tmp/ccCMElxB.s:4620   .debug_str:0000000000000cdd .LASF153
     /tmp/ccCMElxB.s:4360   .debug_str:00000000000003eb .LASF154
     /tmp/ccCMElxB.s:4290   .debug_str:00000000000001ad .LASF155
     /tmp/ccCMElxB.s:4490   .debug_str:000000000000082d .LASF156
     /tmp/ccCMElxB.s:4492   .debug_str:0000000000000840 .LASF157
     /tmp/ccCMElxB.s:4278   .debug_str:0000000000000160 .LASF158
     /tmp/ccCMElxB.s:4298   .debug_str:00000000000001c8 .LASF159
     /tmp/ccCMElxB.s:4348   .debug_str:000000000000039b .LASF160
     /tmp/ccCMElxB.s:4358   .debug_str:00000000000003e5 .LASF161
     /tmp/ccCMElxB.s:4338   .debug_str:000000000000035a .LASF162
     /tmp/ccCMElxB.s:4248   .debug_str:000000000000007a .LASF163
     /tmp/ccCMElxB.s:4484   .debug_str:0000000000000809 .LASF164
     /tmp/ccCMElxB.s:4478   .debug_str:00000000000007e6 .LASF165
     /tmp/ccCMElxB.s:4612   .debug_str:0000000000000ca4 .LASF166
     /tmp/ccCMElxB.s:4532   .debug_str:0000000000000967 .LASF167
     /tmp/ccCMElxB.s:4596   .debug_str:0000000000000bf4 .LASF168
     /tmp/ccCMElxB.s:4276   .debug_str:0000000000000156 .LASF169
     /tmp/ccCMElxB.s:4412   .debug_str:00000000000005b5 .LASF170
     /tmp/ccCMElxB.s:4584   .debug_str:0000000000000ba4 .LASF171
     /tmp/ccCMElxB.s:4440   .debug_str:0000000000000696 .LASF172
     /tmp/ccCMElxB.s:4554   .debug_str:0000000000000ab0 .LASF173
     /tmp/ccCMElxB.s:4334   .debug_str:0000000000000330 .LASF174
     /tmp/ccCMElxB.s:4452   .debug_str:0000000000000706 .LASF175
     /tmp/ccCMElxB.s:4368   .debug_str:0000000000000437 .LASF176
     /tmp/ccCMElxB.s:46     .text:0000000000000020 .LFB49
     /tmp/ccCMElxB.s:896    .text:000000000000029c .LFE49
     /tmp/ccCMElxB.s:4512   .debug_str:00000000000008d6 .LASF178
     /tmp/ccCMElxB.s:3778   .debug_loc:0000000000000000 .LLST0
     /tmp/ccCMElxB.s:4164   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccCMElxB.s:4578   .debug_str:0000000000000b91 .LASF179
     /tmp/ccCMElxB.s:3865   .debug_loc:0000000000000145 .LLST1
     /tmp/ccCMElxB.s:4582   .debug_str:0000000000000b9c .LASF180
     /tmp/ccCMElxB.s:3876   .debug_loc:000000000000017b .LLST2
     /tmp/ccCMElxB.s:3887   .debug_loc:00000000000001b1 .LLST3
     /tmp/ccCMElxB.s:434    .text:0000000000000118 .LBB147
     /tmp/ccCMElxB.s:458    .text:0000000000000128 .LBE147
     /tmp/ccCMElxB.s:3954   .debug_loc:00000000000002f1 .LLST26
     /tmp/ccCMElxB.s:3961   .debug_loc:0000000000000314 .LLST27
     /tmp/ccCMElxB.s:448    .text:0000000000000124 .LVL11
     /tmp/ccCMElxB.s:512    .text:000000000000014c .LBB135
     /tmp/ccCMElxB.s:534    .text:000000000000015c .LBE135
     /tmp/ccCMElxB.s:3968   .debug_loc:0000000000000337 .LLST24
     /tmp/ccCMElxB.s:3975   .debug_loc:000000000000035a .LLST25
     /tmp/ccCMElxB.s:526    .text:0000000000000158 .LVL17
     /tmp/ccCMElxB.s:3982   .debug_loc:000000000000037d .LLST21
GAS LISTING /tmp/ccCMElxB.s 			page 36


     /tmp/ccCMElxB.s:3989   .debug_loc:00000000000003a0 .LLST22
     /tmp/ccCMElxB.s:3996   .debug_loc:00000000000003c3 .LLST23
     /tmp/ccCMElxB.s:566    .text:0000000000000174 .LVL22
     /tmp/ccCMElxB.s:594    .text:0000000000000190 .LBB113
     /tmp/ccCMElxB.s:607    .text:000000000000019c .LBE113
     /tmp/ccCMElxB.s:4003   .debug_loc:00000000000003e6 .LLST20
     /tmp/ccCMElxB.s:599    .text:0000000000000198 .LVL26
     /tmp/ccCMElxB.s:625    .text:00000000000001b8 .LBB97
     /tmp/ccCMElxB.s:640    .text:00000000000001c8 .LBE97
     /tmp/ccCMElxB.s:4010   .debug_loc:0000000000000409 .LLST19
     /tmp/ccCMElxB.s:639    .text:00000000000001c8 .LVL32
     /tmp/ccCMElxB.s:4017   .debug_loc:000000000000042c .LLST16
     /tmp/ccCMElxB.s:4024   .debug_loc:000000000000044f .LLST17
     /tmp/ccCMElxB.s:4031   .debug_loc:0000000000000472 .LLST18
     /tmp/ccCMElxB.s:672    .text:00000000000001e0 .LVL37
     /tmp/ccCMElxB.s:4038   .debug_loc:0000000000000495 .LLST13
     /tmp/ccCMElxB.s:4045   .debug_loc:00000000000004b8 .LLST14
     /tmp/ccCMElxB.s:4052   .debug_loc:00000000000004db .LLST15
     /tmp/ccCMElxB.s:723    .text:0000000000000210 .LVL43
     /tmp/ccCMElxB.s:4059   .debug_loc:00000000000004fe .LLST11
     /tmp/ccCMElxB.s:4076   .debug_loc:0000000000000549 .LLST12
     /tmp/ccCMElxB.s:768    .text:000000000000023c .LVL48
     /tmp/ccCMElxB.s:4087   .debug_loc:000000000000057f .LLST9
     /tmp/ccCMElxB.s:4094   .debug_loc:00000000000005a2 .LLST10
     /tmp/ccCMElxB.s:809    .text:0000000000000260 .LVL54
     /tmp/ccCMElxB.s:4105   .debug_loc:00000000000005d8 .LLST7
     /tmp/ccCMElxB.s:4112   .debug_loc:00000000000005fb .LLST8
     /tmp/ccCMElxB.s:846    .text:0000000000000280 .LVL58
     /tmp/ccCMElxB.s:391    .text:0000000000000108 .LBB65
     /tmp/ccCMElxB.s:419    .text:0000000000000114 .LBE65
     /tmp/ccCMElxB.s:4123   .debug_loc:0000000000000631 .LLST4
     /tmp/ccCMElxB.s:4130   .debug_loc:0000000000000654 .LLST5
     /tmp/ccCMElxB.s:403    .text:000000000000010c .LBB66
     /tmp/ccCMElxB.s:411    .text:0000000000000110 .LBE66
     /tmp/ccCMElxB.s:111    .text:0000000000000080 .LBB47
     /tmp/ccCMElxB.s:126    .text:000000000000008c .LBE47
     /tmp/ccCMElxB.s:131    .text:0000000000000090 .LBB49
     /tmp/ccCMElxB.s:147    .text:000000000000009c .LBE49
     /tmp/ccCMElxB.s:149    .text:000000000000009c .LBB51
     /tmp/ccCMElxB.s:165    .text:00000000000000a8 .LBE51
     /tmp/ccCMElxB.s:461    .text:0000000000000128 .LBB160
     /tmp/ccCMElxB.s:472    .text:000000000000012c .LBE160
     /tmp/ccCMElxB.s:4137   .debug_loc:0000000000000677 .LLST28
     /tmp/ccCMElxB.s:474    .text:000000000000012c .LBB162
     /tmp/ccCMElxB.s:486    .text:0000000000000130 .LBE162
     /tmp/ccCMElxB.s:4144   .debug_loc:000000000000069a .LLST29
     /tmp/ccCMElxB.s:620    .text:00000000000001b4 .LVL29
     /tmp/ccCMElxB.s:64     .text:000000000000003c .LBB43
     /tmp/ccCMElxB.s:81     .text:0000000000000048 .LBE43
     /tmp/ccCMElxB.s:880    .text:0000000000000290 .LBB177
     /tmp/ccCMElxB.s:893    .text:000000000000029c .LBE177
     /tmp/ccCMElxB.s:102    .text:000000000000007c .LVL1
     /tmp/ccCMElxB.s:10     .text:0000000000000000 .LFB48
     /tmp/ccCMElxB.s:40     .text:0000000000000020 .LFE48
     /tmp/ccCMElxB.s:4570   .debug_str:0000000000000b5e .LASF181
     /tmp/ccCMElxB.s:4322   .debug_str:00000000000002d7 .LASF194
     /tmp/ccCMElxB.s:4330   .debug_str:0000000000000314 .LASF195
GAS LISTING /tmp/ccCMElxB.s 			page 37


     /tmp/ccCMElxB.s:79     .text:0000000000000048 .LVL0
     /tmp/ccCMElxB.s:106    .text:0000000000000080 .LVL2
     /tmp/ccCMElxB.s:169    .text:00000000000000ac .LVL6
     /tmp/ccCMElxB.s:505    .text:000000000000014c .LVL15
     /tmp/ccCMElxB.s:536    .text:0000000000000160 .LVL18
     /tmp/ccCMElxB.s:590    .text:0000000000000190 .LVL25
     /tmp/ccCMElxB.s:609    .text:00000000000001a0 .LVL27
     /tmp/ccCMElxB.s:622    .text:00000000000001b8 .LVL30
     /tmp/ccCMElxB.s:642    .text:00000000000001cc .LVL33
     /tmp/ccCMElxB.s:696    .text:00000000000001fc .LVL40
     /tmp/ccCMElxB.s:747    .text:000000000000022c .LVL46
     /tmp/ccCMElxB.s:782    .text:0000000000000248 .LVL50
     /tmp/ccCMElxB.s:820    .text:0000000000000268 .LVL55
     /tmp/ccCMElxB.s:857    .text:0000000000000288 .LVL59
     /tmp/ccCMElxB.s:864    .text:0000000000000290 .LVL61
     /tmp/ccCMElxB.s:129    .text:0000000000000090 .LVL3
     /tmp/ccCMElxB.s:482    .text:0000000000000130 .LVL14
     /tmp/ccCMElxB.s:145    .text:000000000000009c .LVL4
     /tmp/ccCMElxB.s:163    .text:00000000000000a8 .LVL5
     /tmp/ccCMElxB.s:400    .text:000000000000010c .LVL7
     /tmp/ccCMElxB.s:421    .text:0000000000000118 .LVL9
     /tmp/ccCMElxB.s:574    .text:0000000000000180 .LVL23
     /tmp/ccCMElxB.s:584    .text:0000000000000188 .LVL24
     /tmp/ccCMElxB.s:615    .text:00000000000001a8 .LVL28
     /tmp/ccCMElxB.s:633    .text:00000000000001bc .LVL31
     /tmp/ccCMElxB.s:680    .text:00000000000001ec .LVL38
     /tmp/ccCMElxB.s:690    .text:00000000000001f4 .LVL39
     /tmp/ccCMElxB.s:787    .text:000000000000024c .LVL51
     /tmp/ccCMElxB.s:789    .text:0000000000000250 .LVL52
     /tmp/ccCMElxB.s:443    .text:000000000000011c .LVL10
     /tmp/ccCMElxB.s:455    .text:0000000000000128 .LVL12
     /tmp/ccCMElxB.s:521    .text:0000000000000150 .LVL16
     /tmp/ccCMElxB.s:547    .text:0000000000000164 .LVL19
     /tmp/ccCMElxB.s:554    .text:0000000000000168 .LVL20
     /tmp/ccCMElxB.s:561    .text:000000000000016c .LVL21
     /tmp/ccCMElxB.s:653    .text:00000000000001d0 .LVL34
     /tmp/ccCMElxB.s:660    .text:00000000000001d4 .LVL35
     /tmp/ccCMElxB.s:667    .text:00000000000001d8 .LVL36
     /tmp/ccCMElxB.s:710    .text:0000000000000204 .LVL41
     /tmp/ccCMElxB.s:718    .text:0000000000000208 .LVL42
     /tmp/ccCMElxB.s:731    .text:000000000000021c .LVL44
     /tmp/ccCMElxB.s:741    .text:0000000000000224 .LVL45
     /tmp/ccCMElxB.s:760    .text:0000000000000230 .LVL47
     /tmp/ccCMElxB.s:772    .text:0000000000000240 .LVL49
     /tmp/ccCMElxB.s:802    .text:0000000000000254 .LVL53
     /tmp/ccCMElxB.s:825    .text:000000000000026c .LVL56
     /tmp/ccCMElxB.s:839    .text:0000000000000274 .LVL57
     /tmp/ccCMElxB.s:862    .text:000000000000028c .LVL60
     /tmp/ccCMElxB.s:409    .text:0000000000000110 .LVL8
     /tmp/ccCMElxB.s:469    .text:000000000000012c .LVL13
     /tmp/ccCMElxB.s:906    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccCMElxB.s:109    .text:0000000000000080 .LBB46
     /tmp/ccCMElxB.s:172    .text:00000000000000b0 .LBE46
     /tmp/ccCMElxB.s:176    .text:00000000000000b0 .LBB165
     /tmp/ccCMElxB.s:183    .text:00000000000000b8 .LBE165
     /tmp/ccCMElxB.s:187    .text:00000000000000b8 .LBB166
     /tmp/ccCMElxB.s:196    .text:00000000000000c0 .LBE166
GAS LISTING /tmp/ccCMElxB.s 			page 38


     /tmp/ccCMElxB.s:200    .text:00000000000000c0 .LBB167
     /tmp/ccCMElxB.s:211    .text:00000000000000c8 .LBE167
     /tmp/ccCMElxB.s:215    .text:00000000000000c8 .LBB168
     /tmp/ccCMElxB.s:228    .text:00000000000000d0 .LBE168
     /tmp/ccCMElxB.s:232    .text:00000000000000d0 .LBB169
     /tmp/ccCMElxB.s:247    .text:00000000000000d8 .LBE169
     /tmp/ccCMElxB.s:251    .text:00000000000000d8 .LBB170
     /tmp/ccCMElxB.s:268    .text:00000000000000e0 .LBE170
     /tmp/ccCMElxB.s:272    .text:00000000000000e0 .LBB171
     /tmp/ccCMElxB.s:291    .text:00000000000000e8 .LBE171
     /tmp/ccCMElxB.s:295    .text:00000000000000e8 .LBB172
     /tmp/ccCMElxB.s:316    .text:00000000000000f0 .LBE172
     /tmp/ccCMElxB.s:320    .text:00000000000000f0 .LBB173
     /tmp/ccCMElxB.s:343    .text:00000000000000f8 .LBE173
     /tmp/ccCMElxB.s:347    .text:00000000000000f8 .LBB174
     /tmp/ccCMElxB.s:372    .text:0000000000000100 .LBE174
     /tmp/ccCMElxB.s:376    .text:0000000000000100 .LBB175
     /tmp/ccCMElxB.s:487    .text:0000000000000130 .LBE175
     /tmp/ccCMElxB.s:509    .text:000000000000014c .LBB176
     /tmp/ccCMElxB.s:878    .text:0000000000000290 .LBE176
     /tmp/ccCMElxB.s:830    .text:0000000000000270 .LBB68
     /tmp/ccCMElxB.s:855    .text:0000000000000284 .LBE68
     /tmp/ccCMElxB.s:859    .text:0000000000000288 .LBB69
     /tmp/ccCMElxB.s:866    .text:0000000000000290 .LBE69
     /tmp/ccCMElxB.s:793    .text:0000000000000250 .LBB71
     /tmp/ccCMElxB.s:818    .text:0000000000000264 .LBE71
     /tmp/ccCMElxB.s:822    .text:0000000000000268 .LBB72
     /tmp/ccCMElxB.s:828    .text:0000000000000270 .LBE72
     /tmp/ccCMElxB.s:751    .text:000000000000022c .LBB76
     /tmp/ccCMElxB.s:780    .text:0000000000000244 .LBE76
     /tmp/ccCMElxB.s:784    .text:0000000000000248 .LBB77
     /tmp/ccCMElxB.s:791    .text:0000000000000250 .LBE77
     /tmp/ccCMElxB.s:700    .text:00000000000001fc .LBB82
     /tmp/ccCMElxB.s:739    .text:0000000000000220 .LBE82
     /tmp/ccCMElxB.s:743    .text:0000000000000224 .LBB83
     /tmp/ccCMElxB.s:749    .text:000000000000022c .LBE83
     /tmp/ccCMElxB.s:645    .text:00000000000001cc .LBB89
     /tmp/ccCMElxB.s:688    .text:00000000000001f0 .LBE89
     /tmp/ccCMElxB.s:692    .text:00000000000001f4 .LBB90
     /tmp/ccCMElxB.s:698    .text:00000000000001fc .LBE90
     /tmp/ccCMElxB.s:539    .text:0000000000000160 .LBB123
     /tmp/ccCMElxB.s:582    .text:0000000000000184 .LBE123
     /tmp/ccCMElxB.s:586    .text:0000000000000188 .LBB124
     /tmp/ccCMElxB.s:592    .text:0000000000000190 .LBE124

UNDEFINED SYMBOLS
console_handler
_ZN15MemoryAllocator6mallocEm
_ZN15MemoryAllocator4freeEPv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN9Scheduler3putEP3TCB
_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_
_ZN10Ksemaphore15createSemaphoreEj
_ZN10Ksemaphore14closeSemaphoreEv
GAS LISTING /tmp/ccCMElxB.s 			page 39


_ZN10Ksemaphore4waitEv
_ZN10Ksemaphore6signalEv
