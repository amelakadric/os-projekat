GAS LISTING /tmp/ccTxbc3f.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB53:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** //#include "../h/TCB.hpp"
   5:src/riscv.cpp **** //#include "../lib/console.h"
   6:src/riscv.cpp **** //#include "../h/MemoryAllocator.hpp"
   7:src/riscv.cpp **** 
   8:src/riscv.cpp **** using Body = void (*)();
   9:src/riscv.cpp **** 
  10:src/riscv.cpp **** void Riscv::popSppSpie()
  11:src/riscv.cpp **** {
  12              		.loc 1 11 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
  12:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 12 5
  21              		.loc 1 12 39 is_stmt 0
  22              	#APP
  23              	# 12 "src/riscv.cpp" 1
  13              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 13 5 is_stmt 1
  27              		.loc 1 13 30 is_stmt 0
  28              	# 13 "src/riscv.cpp" 1
  14              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 14 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE53:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB54:
GAS LISTING /tmp/ccTxbc3f.s 			page 2


  15:src/riscv.cpp **** 
  16:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  17:src/riscv.cpp **** {
  47              		.loc 1 17 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FC 		addi	sp,sp,-64
  50              		.cfi_def_cfa_offset 64
  51 0024 233C1102 		sd	ra,56(sp)
  52 0028 23388102 		sd	s0,48(sp)
  53 002c 23349102 		sd	s1,40(sp)
  54 0030 23302103 		sd	s2,32(sp)
  55              		.cfi_offset 1, -8
  56              		.cfi_offset 8, -16
  57              		.cfi_offset 9, -24
  58              		.cfi_offset 18, -32
  59 0034 13040104 		addi	s0,sp,64
  60              		.cfi_def_cfa 8, 0
  18:src/riscv.cpp ****     uint64 scause = r_scause();
  61              		.loc 1 18 5
  62              	.LBB28:
  63              	.LBB29:
  64              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/19/22.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** #include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../h/TCB.hpp"
  10:src/../h/riscv.hpp **** #include "../lib/console.h"
  11:src/../h/riscv.hpp **** //#include "../h/MemoryAllocator.hpp"
  12:src/../h/riscv.hpp **** //#include "../h/syscall_cpp.hpp"
  13:src/../h/riscv.hpp **** 
  14:src/../h/riscv.hpp **** //class TCB;
  15:src/../h/riscv.hpp **** class Riscv
  16:src/../h/riscv.hpp **** {
  17:src/../h/riscv.hpp **** public:
  18:src/../h/riscv.hpp **** 
  19:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  20:src/../h/riscv.hpp ****     static void popSppSpie();
  21:src/../h/riscv.hpp **** 
  22:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  23:src/../h/riscv.hpp ****     static void pushRegisters();
  24:src/../h/riscv.hpp **** 
  25:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  26:src/../h/riscv.hpp ****     static void popRegisters();
  27:src/../h/riscv.hpp **** 
  28:src/../h/riscv.hpp ****     // read register scause
  29:src/../h/riscv.hpp ****     static uint64 r_scause();
  30:src/../h/riscv.hpp **** 
  31:src/../h/riscv.hpp ****     // write register scause
  32:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  33:src/../h/riscv.hpp **** 
  34:src/../h/riscv.hpp ****     // read register sepc
  35:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccTxbc3f.s 			page 3


  36:src/../h/riscv.hpp **** 
  37:src/../h/riscv.hpp ****     // write register sepc
  38:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  39:src/../h/riscv.hpp **** 
  40:src/../h/riscv.hpp ****     // read register stvec
  41:src/../h/riscv.hpp ****     static uint64 r_stvec();
  42:src/../h/riscv.hpp **** 
  43:src/../h/riscv.hpp ****     // write register stvec
  44:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  45:src/../h/riscv.hpp **** 
  46:src/../h/riscv.hpp ****     // read register stval
  47:src/../h/riscv.hpp ****     static uint64 r_stval();
  48:src/../h/riscv.hpp **** 
  49:src/../h/riscv.hpp ****     // write register stval
  50:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  51:src/../h/riscv.hpp **** 
  52:src/../h/riscv.hpp ****     enum BitMaskSip
  53:src/../h/riscv.hpp ****     {
  54:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  55:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  56:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  57:src/../h/riscv.hpp ****     };
  58:src/../h/riscv.hpp **** 
  59:src/../h/riscv.hpp ****     // mask set register sip
  60:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  61:src/../h/riscv.hpp **** 
  62:src/../h/riscv.hpp ****     // mask clear register sip
  63:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  64:src/../h/riscv.hpp **** 
  65:src/../h/riscv.hpp ****     // read register sip
  66:src/../h/riscv.hpp ****     static uint64 r_sip();
  67:src/../h/riscv.hpp **** 
  68:src/../h/riscv.hpp ****     // write register sip
  69:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  70:src/../h/riscv.hpp **** 
  71:src/../h/riscv.hpp ****     enum BitMaskSstatus
  72:src/../h/riscv.hpp ****     {
  73:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  74:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  75:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  76:src/../h/riscv.hpp ****     };
  77:src/../h/riscv.hpp **** 
  78:src/../h/riscv.hpp ****     // mask set register sstatus
  79:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  80:src/../h/riscv.hpp **** 
  81:src/../h/riscv.hpp ****     // mask clear register sstatus
  82:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  83:src/../h/riscv.hpp **** 
  84:src/../h/riscv.hpp ****     // read register sstatus
  85:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  86:src/../h/riscv.hpp **** 
  87:src/../h/riscv.hpp ****     // write register sstatus
  88:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  89:src/../h/riscv.hpp **** 
  90:src/../h/riscv.hpp ****     //read a0;
  91:src/../h/riscv.hpp ****     static uint64 r_a0();
  92:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccTxbc3f.s 			page 4


  93:src/../h/riscv.hpp **** // supervisor trap
  94:src/../h/riscv.hpp ****     static void supervisorTrap();
  95:src/../h/riscv.hpp **** 
  96:src/../h/riscv.hpp **** private:
  97:src/../h/riscv.hpp **** 
  98:src/../h/riscv.hpp ****     // supervisor trap handler
  99:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 100:src/../h/riscv.hpp **** 
 101:src/../h/riscv.hpp **** };
 102:src/../h/riscv.hpp **** 
 103:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 104:src/../h/riscv.hpp **** {
 105:src/../h/riscv.hpp ****     uint64 volatile scause;
  65              		.loc 2 105 5
 106:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  66              		.loc 2 106 5
  67              		.loc 2 106 72 is_stmt 0
  68              	#APP
  69              	# 106 "src/../h/riscv.hpp" 1
 107              	    return scause;
  70              		csrr a5, scause
  71              	# 0 "" 2
  72              	#NO_APP
  73 003c 2330F4FC 		sd	a5,-64(s0)
  74              		.loc 2 107 5 is_stmt 1
  75              		.loc 2 107 12 is_stmt 0
  76 0040 033704FC 		ld	a4,-64(s0)
  77              	.LVL0:
  78              	.LBE29:
  79              	.LBE28:
  19:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  80              		.loc 1 19 5 is_stmt 1
  81              	.LBB30:
  82              		.loc 1 19 40 is_stmt 0
  83 0044 930687FF 		addi	a3,a4,-8
  84              		.loc 1 19 5
  85 0048 93071000 		li	a5,1
  86 004c 63FED702 		bleu	a3,a5,.L10
  87              	.LBE30:
  20:src/riscv.cpp ****     {
  21:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  22:src/riscv.cpp **** //        uint64 sepc = r_sepc() + 4;
  23:src/riscv.cpp **** //        uint64 sstatus = r_sstatus();
  24:src/riscv.cpp **** //        TCB::timeSliceCounter = 0;
  25:src/riscv.cpp **** //        TCB::dispatch();
  26:src/riscv.cpp **** //        w_sstatus(sstatus);
  27:src/riscv.cpp **** //        w_sepc(sepc);
  28:src/riscv.cpp **** 
  29:src/riscv.cpp ****         uint64 a0 = r_a0();
  30:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
  31:src/riscv.cpp ****             //mem_alloc(size_t size-a1)
  32:src/riscv.cpp ****             size_t a1;
  33:src/riscv.cpp ****             void *a;
  34:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
  35:src/riscv.cpp **** 
  36:src/riscv.cpp ****             MemoryAllocator* memAlloc= MemoryAllocator::getInstance();
  37:src/riscv.cpp ****             a=memAlloc->malloc(a1);
GAS LISTING /tmp/ccTxbc3f.s 			page 5


  38:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  39:src/riscv.cpp ****         }
  40:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
  41:src/riscv.cpp ****             //mem_free
  42:src/riscv.cpp ****             void* a2;
  43:src/riscv.cpp ****             uint64 a;
  44:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  45:src/riscv.cpp **** 
  46:src/riscv.cpp ****             MemoryAllocator* memAlloc= MemoryAllocator::getInstance();
  47:src/riscv.cpp ****             a=memAlloc->free(a2);
  48:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  49:src/riscv.cpp **** 
  50:src/riscv.cpp **** 
  51:src/riscv.cpp ****         }
  52:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
  53:src/riscv.cpp **** //            //thread_create(&myhandle-a3, body-a4, arg-a5, stek??)
  54:src/riscv.cpp **** //
  55:src/riscv.cpp **** //
  56:src/riscv.cpp **** //            Body a4;
  57:src/riscv.cpp **** //            __asm__ volatile ("mv %[a4], a4" : [a4] "=r"(a4));
  58:src/riscv.cpp **** //
  59:src/riscv.cpp **** //            void* a5;
  60:src/riscv.cpp **** //            __asm__ volatile ("mv %[a5], a5" : [a5] "=r"(a5));
  61:src/riscv.cpp **** //
  62:src/riscv.cpp **** //            TCB *a3;
  63:src/riscv.cpp **** //            __asm__ volatile ("mv %[a3], a3" : [a3] "=r"(a3));
  64:src/riscv.cpp **** //            a3->body=a4;
  65:src/riscv.cpp **** //            a3->arg=a5;
  66:src/riscv.cpp **** //            a3->stack=(a3->body != nullptr ? new uint64[DEFAULT_STACK_SIZE] : nullptr);
  67:src/riscv.cpp **** //            a3->context.ra=(uint64) &a3->threadWrapper;
  68:src/riscv.cpp **** //            a3->context.sp=a3->stack != nullptr ? (uint64) &a3->stack[DEFAULT_STACK_SIZE] : 0;
  69:src/riscv.cpp **** //            a3->timeSlice=DEFAULT_TIME_SLICE;
  70:src/riscv.cpp **** //            a3->finished=false;
  71:src/riscv.cpp **** 
  72:src/riscv.cpp ****         }
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
  74:src/riscv.cpp ****             //thread_exit
  75:src/riscv.cpp **** 
  76:src/riscv.cpp ****         }
  77:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
  78:src/riscv.cpp ****             //thread_dispatch()
  79:src/riscv.cpp **** //            TCB::dispatch();
  80:src/riscv.cpp ****         }
  81:src/riscv.cpp **** 
  82:src/riscv.cpp **** 
  83:src/riscv.cpp ****     } else if (scause == 0x8000000000000001UL)
  88              		.loc 1 83 12 is_stmt 1
  89              	.LBB58:
  90              	.LBB31:
  91 0050 9307F0FF 		li	a5,-1
  92 0054 9397F703 		slli	a5,a5,63
  93 0058 93871700 		addi	a5,a5,1
  94 005c 6304F708 		beq	a4,a5,.L11
  84:src/riscv.cpp ****     {
  85:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
  86:src/riscv.cpp ****         TCB::timeSliceCounter++;
  87:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
GAS LISTING /tmp/ccTxbc3f.s 			page 6


  88:src/riscv.cpp ****         {
  89:src/riscv.cpp ****             uint64 sepc = r_sepc();
  90:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
  91:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  92:src/riscv.cpp ****             TCB::dispatch();
  93:src/riscv.cpp ****             w_sstatus(sstatus);
  94:src/riscv.cpp ****             w_sepc(sepc);
  95:src/riscv.cpp ****         }
  96:src/riscv.cpp ****         mc_sip(SIP_SSIP);
  97:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL)
  95              		.loc 1 97 12
  96 0060 9307F0FF 		li	a5,-1
  97 0064 9397F703 		slli	a5,a5,63
  98 0068 93879700 		addi	a5,a5,9
  99 006c 6302F70E 		beq	a4,a5,.L12
 100              	.LVL1:
 101              	.L3:
 102              	.LBE31:
 103              	.LBE58:
  98:src/riscv.cpp ****     {
  99:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 100:src/riscv.cpp ****         console_handler();
 101:src/riscv.cpp ****     } else
 102:src/riscv.cpp ****     {
 103:src/riscv.cpp ****         // unexpected trap cause
 104:src/riscv.cpp ****     }
 105:src/riscv.cpp **** }...
 104              		.loc 1 105 1 is_stmt 0
 105 0070 83308103 		ld	ra,56(sp)
 106              		.cfi_remember_state
 107              		.cfi_restore 1
 108 0074 03340103 		ld	s0,48(sp)
 109              		.cfi_restore 8
 110              		.cfi_def_cfa 2, 64
 111 0078 83348102 		ld	s1,40(sp)
 112              		.cfi_restore 9
 113 007c 03390102 		ld	s2,32(sp)
 114              		.cfi_restore 18
 115 0080 13010104 		addi	sp,sp,64
 116              		.cfi_def_cfa_offset 0
 117 0084 67800000 		jr	ra
 118              	.LVL2:
 119              	.L10:
 120              		.cfi_restore_state
 121              	.LBB59:
 122              	.LBB48:
  29:src/riscv.cpp ****         uint64 a0 = r_a0();
 123              		.loc 1 29 9 is_stmt 1
 124              	.LBB49:
 125              	.LBB50:
 108:src/../h/riscv.hpp **** }
 109:src/../h/riscv.hpp **** 
 110:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 111:src/../h/riscv.hpp **** {
 112:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 113:src/../h/riscv.hpp **** }
 114:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccTxbc3f.s 			page 7


 115:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 116:src/../h/riscv.hpp **** {
 117:src/../h/riscv.hpp ****     uint64 volatile sepc;
 118:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 119:src/../h/riscv.hpp ****     return sepc;
 120:src/../h/riscv.hpp **** }
 121:src/../h/riscv.hpp **** 
 122:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 123:src/../h/riscv.hpp **** {
 124:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 125:src/../h/riscv.hpp **** }
 126:src/../h/riscv.hpp **** 
 127:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 128:src/../h/riscv.hpp **** {
 129:src/../h/riscv.hpp ****     uint64 volatile stvec;
 130:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 131:src/../h/riscv.hpp ****     return stvec;
 132:src/../h/riscv.hpp **** }
 133:src/../h/riscv.hpp **** 
 134:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 135:src/../h/riscv.hpp **** {
 136:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 137:src/../h/riscv.hpp **** }
 138:src/../h/riscv.hpp **** 
 139:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 140:src/../h/riscv.hpp **** {
 141:src/../h/riscv.hpp ****     uint64 volatile stval;
 142:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 143:src/../h/riscv.hpp ****     return stval;
 144:src/../h/riscv.hpp **** }
 145:src/../h/riscv.hpp **** 
 146:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 147:src/../h/riscv.hpp **** {
 148:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 149:src/../h/riscv.hpp **** }
 150:src/../h/riscv.hpp **** 
 151:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 152:src/../h/riscv.hpp **** {
 153:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 154:src/../h/riscv.hpp **** }
 155:src/../h/riscv.hpp **** 
 156:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 157:src/../h/riscv.hpp **** {
 158:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 159:src/../h/riscv.hpp **** }
 160:src/../h/riscv.hpp **** 
 161:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 162:src/../h/riscv.hpp **** {
 163:src/../h/riscv.hpp ****     uint64 volatile sip;
 164:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 165:src/../h/riscv.hpp ****     return sip;
 166:src/../h/riscv.hpp **** }
 167:src/../h/riscv.hpp **** 
 168:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 169:src/../h/riscv.hpp **** {
 170:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 171:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccTxbc3f.s 			page 8


 172:src/../h/riscv.hpp **** 
 173:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 174:src/../h/riscv.hpp **** {
 175:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 176:src/../h/riscv.hpp **** }
 177:src/../h/riscv.hpp **** 
 178:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 179:src/../h/riscv.hpp **** {
 180:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 181:src/../h/riscv.hpp **** }
 182:src/../h/riscv.hpp **** 
 183:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 184:src/../h/riscv.hpp **** {
 185:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 186:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 187:src/../h/riscv.hpp ****     return sstatus;
 188:src/../h/riscv.hpp **** }
 189:src/../h/riscv.hpp **** 
 190:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 191:src/../h/riscv.hpp **** {
 192:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 193:src/../h/riscv.hpp **** }
 194:src/../h/riscv.hpp **** 
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 197:src/../h/riscv.hpp **** {
 198:src/../h/riscv.hpp ****     uint64 volatile a0;
 126              		.loc 2 198 5
 199:src/../h/riscv.hpp ****     __asm__ volatile ("mv %[a0], a0" : [a0] "=r"(a0));
 127              		.loc 2 199 5
 128              		.loc 2 199 54 is_stmt 0
 129              	#APP
 130              	# 199 "src/../h/riscv.hpp" 1
 200              	    return a0;
 131              		mv a5, a0
 132              	# 0 "" 2
 133              	#NO_APP
 134 008c 2334F4FC 		sd	a5,-56(s0)
 135              		.loc 2 200 5 is_stmt 1
 136              		.loc 2 200 12 is_stmt 0
 137 0090 833784FC 		ld	a5,-56(s0)
 138              	.LVL3:
 139              	.LBE50:
 140              	.LBE49:
  30:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
 141              		.loc 1 30 9 is_stmt 1
 142              	.LBB51:
 143 0094 13071000 		li	a4,1
 144              	.LVL4:
 145 0098 6386E702 		beq	a5,a4,.L13
 146              	.LBE51:
 147              	.LBE48:
 148              	.LBE59:
  40:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
 149              		.loc 1 40 14
 150              	.LBB60:
 151              	.LBB56:
GAS LISTING /tmp/ccTxbc3f.s 			page 9


 152              	.LBB55:
 153              	.LBB52:
 154 009c 13072000 		li	a4,2
 155 00a0 E398E7FC 		bne	a5,a4,.L3
 156              	.LBB53:
  42:src/riscv.cpp ****             void* a2;
 157              		.loc 1 42 13
  43:src/riscv.cpp ****             uint64 a;
 158              		.loc 1 43 13
  44:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 159              		.loc 1 44 13
  44:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 160              		.loc 1 44 62 is_stmt 0
 161              	#APP
 162              	# 44 "src/riscv.cpp" 1
 163              		mv s1, a2
 164              	# 0 "" 2
 165              	.LVL5:
  46:src/riscv.cpp ****             MemoryAllocator* memAlloc= MemoryAllocator::getInstance();
 166              		.loc 1 46 13 is_stmt 1
  46:src/riscv.cpp ****             MemoryAllocator* memAlloc= MemoryAllocator::getInstance();
 167              		.loc 1 46 68 is_stmt 0
 168              	#NO_APP
 169 00a8 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
 169      E7800000 
 170              	.LVL6:
  47:src/riscv.cpp ****             a=memAlloc->free(a2);
 171              		.loc 1 47 13 is_stmt 1
  47:src/riscv.cpp ****             a=memAlloc->free(a2);
 172              		.loc 1 47 29 is_stmt 0
 173 00b0 93850400 		mv	a1,s1
 174 00b4 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 174      E7800000 
 175              	.LVL7:
  48:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 176              		.loc 1 48 13 is_stmt 1
  48:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 177              		.loc 1 48 50 is_stmt 0
 178              	#APP
 179              	# 48 "src/riscv.cpp" 1
 180              		mv a0, a0
 181              	# 0 "" 2
 182              	#NO_APP
 183              	.LBE53:
 184 00c0 6FF01FFB 		j	.L3
 185              	.LVL8:
 186              	.L13:
 187              	.LBE52:
 188              	.LBB54:
  32:src/riscv.cpp ****             size_t a1;
 189              		.loc 1 32 13 is_stmt 1
  33:src/riscv.cpp ****             void *a;
 190              		.loc 1 33 13
  34:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
 191              		.loc 1 34 13
  34:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(a1));
 192              		.loc 1 34 62 is_stmt 0
GAS LISTING /tmp/ccTxbc3f.s 			page 10


 193              	#APP
 194              	# 34 "src/riscv.cpp" 1
 195              		mv s1, a1
 196              	# 0 "" 2
 197              	.LVL9:
  36:src/riscv.cpp ****             MemoryAllocator* memAlloc= MemoryAllocator::getInstance();
 198              		.loc 1 36 13 is_stmt 1
  36:src/riscv.cpp ****             MemoryAllocator* memAlloc= MemoryAllocator::getInstance();
 199              		.loc 1 36 68 is_stmt 0
 200              	#NO_APP
 201 00c8 97000000 		call	_ZN15MemoryAllocator11getInstanceEv@plt
 201      E7800000 
 202              	.LVL10:
  37:src/riscv.cpp ****             a=memAlloc->malloc(a1);
 203              		.loc 1 37 13 is_stmt 1
  37:src/riscv.cpp ****             a=memAlloc->malloc(a1);
 204              		.loc 1 37 31 is_stmt 0
 205 00d0 93850400 		mv	a1,s1
 206 00d4 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 206      E7800000 
 207              	.LVL11:
  38:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 208              		.loc 1 38 13 is_stmt 1
  38:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 209              		.loc 1 38 50 is_stmt 0
 210              	#APP
 211              	# 38 "src/riscv.cpp" 1
 212              		mv a0, a0
 213              	# 0 "" 2
 214              	#NO_APP
 215              	.LBE54:
 216 00e0 6FF01FF9 		j	.L3
 217              	.LVL12:
 218              	.L11:
 219              	.LBE55:
 220              	.LBE56:
 221              	.LBB57:
 222              	.LBB32:
  86:src/riscv.cpp ****         TCB::timeSliceCounter++;
 223              		.loc 1 86 9 is_stmt 1
  86:src/riscv.cpp ****         TCB::timeSliceCounter++;
 224              		.loc 1 86 30 is_stmt 0
 225 00e4 17070000 		la	a4,_ZN3TCB16timeSliceCounterE
 225      03370700 
 226              	.LVL13:
 227 00ec 83370700 		ld	a5,0(a4)
 228 00f0 93871700 		addi	a5,a5,1
 229 00f4 2330F700 		sd	a5,0(a4)
  87:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 230              		.loc 1 87 9 is_stmt 1
 231              	.LBB33:
  87:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 232              		.loc 1 87 64 is_stmt 0
 233 00f8 17070000 		la	a4,_ZN3TCB7runningE
 233      03370700 
 234 0100 03370700 		ld	a4,0(a4)
 235              	.LVL14:
GAS LISTING /tmp/ccTxbc3f.s 			page 11


 236              	.LBB34:
 237              	.LBB35:
 238              		.file 3 "src/../h/../h/TCB.hpp"
   1:src/../h/../h/TCB.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   2:src/../h/../h/TCB.hpp **** #define PROJECT_BASE_TCB_HPP
   3:src/../h/../h/TCB.hpp **** 
   4:src/../h/../h/TCB.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/TCB.hpp **** #include "scheduler.hpp"
   6:src/../h/../h/TCB.hpp **** 
   7:src/../h/../h/TCB.hpp **** typedef TCB* thread_t;
   8:src/../h/../h/TCB.hpp **** 
   9:src/../h/../h/TCB.hpp **** class TCB
  10:src/../h/../h/TCB.hpp **** {
  11:src/../h/../h/TCB.hpp **** private:
  12:src/../h/../h/TCB.hpp ****     void* operator new(size_t size){
  13:src/../h/../h/TCB.hpp ****         MemoryAllocator* mem=MemoryAllocator::getInstance();
  14:src/../h/../h/TCB.hpp ****         return mem->malloc(size);
  15:src/../h/../h/TCB.hpp ****     }
  16:src/../h/../h/TCB.hpp ****     void* operator new[](size_t size){
  17:src/../h/../h/TCB.hpp ****         MemoryAllocator* mem=MemoryAllocator::getInstance();
  18:src/../h/../h/TCB.hpp ****         return mem->malloc(size);
  19:src/../h/../h/TCB.hpp ****     }
  20:src/../h/../h/TCB.hpp **** 
  21:src/../h/../h/TCB.hpp ****     void operator delete(void *p)
  22:src/../h/../h/TCB.hpp ****     {
  23:src/../h/../h/TCB.hpp ****         MemoryAllocator* mem=MemoryAllocator::getInstance();
  24:src/../h/../h/TCB.hpp ****         mem->free(p);
  25:src/../h/../h/TCB.hpp ****     }
  26:src/../h/../h/TCB.hpp **** 
  27:src/../h/../h/TCB.hpp ****     void operator delete[](void *p)
  28:src/../h/../h/TCB.hpp ****     {
  29:src/../h/../h/TCB.hpp ****         MemoryAllocator* mem=MemoryAllocator::getInstance();
  30:src/../h/../h/TCB.hpp ****         mem->free(p);
  31:src/../h/../h/TCB.hpp ****     }
  32:src/../h/../h/TCB.hpp **** public:
  33:src/../h/../h/TCB.hpp ****     using Body = void (*)();
  34:src/../h/../h/TCB.hpp **** 
  35:src/../h/../h/TCB.hpp ****     ~TCB() { delete[] stack; }
  36:src/../h/../h/TCB.hpp **** 
  37:src/../h/../h/TCB.hpp ****     bool isFinished() const { return finished; }
  38:src/../h/../h/TCB.hpp **** 
  39:src/../h/../h/TCB.hpp ****     void setFinished(bool value) { finished = value; }
  40:src/../h/../h/TCB.hpp **** 
  41:src/../h/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
 239              		.loc 3 41 35 is_stmt 1
 240              		.loc 3 41 42 is_stmt 0
 241 0104 03370702 		ld	a4,32(a4)
 242              	.LVL15:
 243              	.LBE35:
 244              	.LBE34:
  87:src/riscv.cpp ****         if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 245              		.loc 1 87 9
 246 0108 63F8E700 		bgeu	a5,a4,.L14
 247              	.LVL16:
 248              	.L8:
 249              	.LBE33:
  96:src/riscv.cpp ****         mc_sip(SIP_SSIP);
GAS LISTING /tmp/ccTxbc3f.s 			page 12


 250              		.loc 1 96 9 is_stmt 1
 251              	.LBB45:
 252              	.LBB46:
 158:src/../h/riscv.hpp **** }
 253              		.loc 2 158 5
 158:src/../h/riscv.hpp **** }
 254              		.loc 2 158 64 is_stmt 0
 255 010c 93072000 		li	a5,2
 256              	#APP
 257              	# 158 "src/../h/riscv.hpp" 1
 159:src/../h/riscv.hpp **** 
 258              		csrc sip, a5
 259              	# 0 "" 2
 260              		.loc 2 159 1
 261              	#NO_APP
 262 0114 6FF0DFF5 		j	.L3
 263              	.LVL17:
 264              	.L14:
 265              	.LBE46:
 266              	.LBE45:
 267              	.LBB47:
 268              	.LBB36:
  89:src/riscv.cpp ****             uint64 sepc = r_sepc();
 269              		.loc 1 89 13 is_stmt 1
 270              	.LBB37:
 271              	.LBB38:
 117:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 272              		.loc 2 117 5
 118:src/../h/riscv.hpp ****     return sepc;
 273              		.loc 2 118 5
 118:src/../h/riscv.hpp ****     return sepc;
 274              		.loc 2 118 64 is_stmt 0
 275              	#APP
 276              	# 118 "src/../h/riscv.hpp" 1
 277              		csrr a5, sepc
 278              	# 0 "" 2
 279              	#NO_APP
 280 011c 233CF4FC 		sd	a5,-40(s0)
 119:src/../h/riscv.hpp **** }
 281              		.loc 2 119 5 is_stmt 1
 119:src/../h/riscv.hpp **** }
 282              		.loc 2 119 12 is_stmt 0
 283 0120 833484FD 		ld	s1,-40(s0)
 284              	.LVL18:
 285              	.LBE38:
 286              	.LBE37:
  90:src/riscv.cpp ****             uint64 sstatus = r_sstatus();
 287              		.loc 1 90 13 is_stmt 1
 288              	.LBB39:
 289              	.LBB40:
 185:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 290              		.loc 2 185 5
 186:src/../h/riscv.hpp ****     return sstatus;
 291              		.loc 2 186 5
 186:src/../h/riscv.hpp ****     return sstatus;
 292              		.loc 2 186 76 is_stmt 0
 293              	#APP
GAS LISTING /tmp/ccTxbc3f.s 			page 13


 294              	# 186 "src/../h/riscv.hpp" 1
 295              		csrr a5, sstatus
 296              	# 0 "" 2
 297              	#NO_APP
 298 0128 2338F4FC 		sd	a5,-48(s0)
 187:src/../h/riscv.hpp **** }
 299              		.loc 2 187 5 is_stmt 1
 187:src/../h/riscv.hpp **** }
 300              		.loc 2 187 12 is_stmt 0
 301 012c 033904FD 		ld	s2,-48(s0)
 302              	.LVL19:
 303              	.LBE40:
 304              	.LBE39:
  91:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 305              		.loc 1 91 13 is_stmt 1
  91:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 306              		.loc 1 91 35 is_stmt 0
 307 0130 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 307      83B70700 
 308 0138 23B00700 		sd	zero,0(a5)
  92:src/riscv.cpp ****             TCB::dispatch();
 309              		.loc 1 92 13 is_stmt 1
  92:src/riscv.cpp ****             TCB::dispatch();
 310              		.loc 1 92 26 is_stmt 0
 311 013c 97000000 		call	_ZN3TCB8dispatchEv@plt
 311      E7800000 
 312              	.LVL20:
  93:src/riscv.cpp ****             w_sstatus(sstatus);
 313              		.loc 1 93 13 is_stmt 1
 314              	.LBB41:
 315              	.LBB42:
 192:src/../h/riscv.hpp **** }
 316              		.loc 2 192 5
 192:src/../h/riscv.hpp **** }
 317              		.loc 2 192 77 is_stmt 0
 318              	#APP
 319              	# 192 "src/../h/riscv.hpp" 1
 320              		csrw sstatus, s2
 321              	# 0 "" 2
 322              	.LVL21:
 323              	#NO_APP
 324              	.LBE42:
 325              	.LBE41:
  94:src/riscv.cpp ****             w_sepc(sepc);
 326              		.loc 1 94 13 is_stmt 1
 327              	.LBB43:
 328              	.LBB44:
 124:src/../h/riscv.hpp **** }
 329              		.loc 2 124 5
 124:src/../h/riscv.hpp **** }
 330              		.loc 2 124 65 is_stmt 0
 331              	#APP
 332              	# 124 "src/../h/riscv.hpp" 1
 125:src/../h/riscv.hpp **** 
 333              		csrw sepc, s1
 334              	# 0 "" 2
 335              		.loc 2 125 1
GAS LISTING /tmp/ccTxbc3f.s 			page 14


 336              	#NO_APP
 337 014c 6FF01FFC 		j	.L8
 338              	.LVL22:
 339              	.L12:
 340              	.LBE44:
 341              	.LBE43:
 342              	.LBE36:
 343              	.LBE47:
 344              	.LBE32:
 100:src/riscv.cpp ****         console_handler();
 345              		.loc 1 100 9 is_stmt 1
 100:src/riscv.cpp ****         console_handler();
 346              		.loc 1 100 24 is_stmt 0
 347 0150 97000000 		call	console_handler@plt
 347      E7800000 
 348              	.LVL23:
 349              	.LBE57:
 350              	.LBE60:
 351              		.loc 1 105 1
 352 0158 6FF09FF1 		j	.L3
 353              		.cfi_endproc
 354              	.LFE54:
 356              	.Letext0:
 357              		.file 4 "src/../h/../lib/hw.h"
 358              		.file 5 "src/../h/../h/MemoryAllocator.hpp"
 359              		.file 6 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccTxbc3f.s 			page 15


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccTxbc3f.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccTxbc3f.s:13     .text:0000000000000000 .L0 
     /tmp/ccTxbc3f.s:14     .text:0000000000000000 .L0 
     /tmp/ccTxbc3f.s:15     .text:0000000000000004 .L0 
     /tmp/ccTxbc3f.s:17     .text:0000000000000008 .L0 
     /tmp/ccTxbc3f.s:19     .text:000000000000000c .L0 
     /tmp/ccTxbc3f.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:12     .text:000000000000000c .L0 
     /tmp/ccTxbc3f.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:13     .text:0000000000000010 .L0 
     /tmp/ccTxbc3f.s:33     .text:0000000000000014 .L0 
     /tmp/ccTxbc3f.s:34     .text:0000000000000018 .L0 
     /tmp/ccTxbc3f.s:35     .text:0000000000000018 .L0 
     /tmp/ccTxbc3f.s:37     .text:000000000000001c .L0 
     /tmp/ccTxbc3f.s:39     .text:0000000000000020 .L0 
     /tmp/ccTxbc3f.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccTxbc3f.s:48     .text:0000000000000020 .L0 
     /tmp/ccTxbc3f.s:49     .text:0000000000000020 .L0 
     /tmp/ccTxbc3f.s:50     .text:0000000000000024 .L0 
     /tmp/ccTxbc3f.s:55     .text:0000000000000034 .L0 
     /tmp/ccTxbc3f.s:56     .text:0000000000000034 .L0 
     /tmp/ccTxbc3f.s:57     .text:0000000000000034 .L0 
     /tmp/ccTxbc3f.s:58     .text:0000000000000034 .L0 
     /tmp/ccTxbc3f.s:60     .text:0000000000000038 .L0 
     /tmp/ccTxbc3f.s:65     .text:0000000000000038 .L0 
     /tmp/ccTxbc3f.s:66     .text:0000000000000038 .L0 
     /tmp/ccTxbc3f.s:67     .text:0000000000000038 .L0 
  src/../h/riscv.hpp:106    .text:0000000000000038 .L0 
     /tmp/ccTxbc3f.s:75     .text:0000000000000040 .L0 
     /tmp/ccTxbc3f.s:76     .text:0000000000000040 .L0 
     /tmp/ccTxbc3f.s:82     .text:0000000000000044 .L0 
     /tmp/ccTxbc3f.s:83     .text:0000000000000044 .L0 
     /tmp/ccTxbc3f.s:85     .text:0000000000000048 .L0 
     /tmp/ccTxbc3f.s:91     .text:0000000000000050 .L0 
     /tmp/ccTxbc3f.s:96     .text:0000000000000060 .L0 
     /tmp/ccTxbc3f.s:105    .text:0000000000000070 .L0 
     /tmp/ccTxbc3f.s:106    .text:0000000000000074 .L0 
     /tmp/ccTxbc3f.s:107    .text:0000000000000074 .L0 
     /tmp/ccTxbc3f.s:109    .text:0000000000000078 .L0 
     /tmp/ccTxbc3f.s:110    .text:0000000000000078 .L0 
     /tmp/ccTxbc3f.s:112    .text:000000000000007c .L0 
     /tmp/ccTxbc3f.s:114    .text:0000000000000080 .L0 
     /tmp/ccTxbc3f.s:116    .text:0000000000000084 .L0 
     /tmp/ccTxbc3f.s:120    .text:0000000000000088 .L0 
     /tmp/ccTxbc3f.s:126    .text:0000000000000088 .L0 
     /tmp/ccTxbc3f.s:127    .text:0000000000000088 .L0 
     /tmp/ccTxbc3f.s:128    .text:0000000000000088 .L0 
  src/../h/riscv.hpp:199    .text:0000000000000088 .L0 
     /tmp/ccTxbc3f.s:136    .text:0000000000000090 .L0 
     /tmp/ccTxbc3f.s:137    .text:0000000000000090 .L0 
     /tmp/ccTxbc3f.s:143    .text:0000000000000094 .L0 
     /tmp/ccTxbc3f.s:154    .text:000000000000009c .L0 
     /tmp/ccTxbc3f.s:158    .text:00000000000000a4 .L0 
     /tmp/ccTxbc3f.s:159    .text:00000000000000a4 .L0 
     /tmp/ccTxbc3f.s:160    .text:00000000000000a4 .L0 
GAS LISTING /tmp/ccTxbc3f.s 			page 16


       src/riscv.cpp:44     .text:00000000000000a4 .L0 
     /tmp/ccTxbc3f.s:167    .text:00000000000000a8 .L0 
     /tmp/ccTxbc3f.s:169    .text:00000000000000a8 .L0 
     /tmp/ccTxbc3f.s:172    .text:00000000000000b0 .L0 
     /tmp/ccTxbc3f.s:173    .text:00000000000000b0 .L0 
     /tmp/ccTxbc3f.s:177    .text:00000000000000bc .L0 
       src/riscv.cpp:48     .text:00000000000000bc .L0 
     /tmp/ccTxbc3f.s:190    .text:00000000000000c4 .L0 
     /tmp/ccTxbc3f.s:191    .text:00000000000000c4 .L0 
     /tmp/ccTxbc3f.s:192    .text:00000000000000c4 .L0 
       src/riscv.cpp:34     .text:00000000000000c4 .L0 
     /tmp/ccTxbc3f.s:199    .text:00000000000000c8 .L0 
     /tmp/ccTxbc3f.s:201    .text:00000000000000c8 .L0 
     /tmp/ccTxbc3f.s:204    .text:00000000000000d0 .L0 
     /tmp/ccTxbc3f.s:205    .text:00000000000000d0 .L0 
     /tmp/ccTxbc3f.s:209    .text:00000000000000dc .L0 
       src/riscv.cpp:38     .text:00000000000000dc .L0 
     /tmp/ccTxbc3f.s:224    .text:00000000000000e4 .L0 
     /tmp/ccTxbc3f.s:225    .text:00000000000000e4 .L0 
     /tmp/ccTxbc3f.s:232    .text:00000000000000f8 .L0 
     /tmp/ccTxbc3f.s:233    .text:00000000000000f8 .L0 
     /tmp/ccTxbc3f.s:240    .text:0000000000000104 .L0 
     /tmp/ccTxbc3f.s:241    .text:0000000000000104 .L0 
     /tmp/ccTxbc3f.s:246    .text:0000000000000108 .L0 
     /tmp/ccTxbc3f.s:253    .text:000000000000010c .L0 
     /tmp/ccTxbc3f.s:254    .text:000000000000010c .L0 
     /tmp/ccTxbc3f.s:255    .text:000000000000010c .L0 
     /tmp/ccTxbc3f.s:262    .text:0000000000000114 .L0 
     /tmp/ccTxbc3f.s:272    .text:0000000000000118 .L0 
     /tmp/ccTxbc3f.s:273    .text:0000000000000118 .L0 
     /tmp/ccTxbc3f.s:274    .text:0000000000000118 .L0 
  src/../h/riscv.hpp:118    .text:0000000000000118 .L0 
     /tmp/ccTxbc3f.s:282    .text:0000000000000120 .L0 
     /tmp/ccTxbc3f.s:283    .text:0000000000000120 .L0 
     /tmp/ccTxbc3f.s:290    .text:0000000000000124 .L0 
     /tmp/ccTxbc3f.s:291    .text:0000000000000124 .L0 
     /tmp/ccTxbc3f.s:292    .text:0000000000000124 .L0 
  src/../h/riscv.hpp:186    .text:0000000000000124 .L0 
     /tmp/ccTxbc3f.s:300    .text:000000000000012c .L0 
     /tmp/ccTxbc3f.s:301    .text:000000000000012c .L0 
     /tmp/ccTxbc3f.s:306    .text:0000000000000130 .L0 
     /tmp/ccTxbc3f.s:307    .text:0000000000000130 .L0 
     /tmp/ccTxbc3f.s:310    .text:000000000000013c .L0 
     /tmp/ccTxbc3f.s:311    .text:000000000000013c .L0 
     /tmp/ccTxbc3f.s:316    .text:0000000000000144 .L0 
     /tmp/ccTxbc3f.s:317    .text:0000000000000144 .L0 
  src/../h/riscv.hpp:192    .text:0000000000000144 .L0 
     /tmp/ccTxbc3f.s:329    .text:0000000000000148 .L0 
     /tmp/ccTxbc3f.s:330    .text:0000000000000148 .L0 
  src/../h/riscv.hpp:124    .text:0000000000000148 .L0 
     /tmp/ccTxbc3f.s:337    .text:000000000000014c .L0 
     /tmp/ccTxbc3f.s:346    .text:0000000000000150 .L0 
     /tmp/ccTxbc3f.s:347    .text:0000000000000150 .L0 
     /tmp/ccTxbc3f.s:352    .text:0000000000000158 .L0 
     /tmp/ccTxbc3f.s:353    .text:000000000000015c .L0 
     /tmp/ccTxbc3f.s:360    .text:000000000000015c .L0 
     /tmp/ccTxbc3f.s:225    .text:00000000000000e4 .L0 
GAS LISTING /tmp/ccTxbc3f.s 			page 17


     /tmp/ccTxbc3f.s:233    .text:00000000000000f8 .L0 
     /tmp/ccTxbc3f.s:307    .text:0000000000000130 .L0 
     /tmp/ccTxbc3f.s:119    .text:0000000000000088 .L10
     /tmp/ccTxbc3f.s:218    .text:00000000000000e4 .L11
     /tmp/ccTxbc3f.s:339    .text:0000000000000150 .L12
     /tmp/ccTxbc3f.s:186    .text:00000000000000c4 .L13
     /tmp/ccTxbc3f.s:101    .text:0000000000000070 .L3
     /tmp/ccTxbc3f.s:264    .text:0000000000000118 .L14
     /tmp/ccTxbc3f.s:248    .text:000000000000010c .L8
     /tmp/ccTxbc3f.s:1521   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccTxbc3f.s:2827   .debug_str:00000000000006ba .LASF130
     /tmp/ccTxbc3f.s:2763   .debug_str:00000000000004e0 .LASF131
     /tmp/ccTxbc3f.s:2673   .debug_str:0000000000000231 .LASF132
     /tmp/ccTxbc3f.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccTxbc3f.s:356    .text:000000000000015c .Letext0
     /tmp/ccTxbc3f.s:2591   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccTxbc3f.s:2739   .debug_str:0000000000000452 .LASF0
     /tmp/ccTxbc3f.s:2757   .debug_str:00000000000004b5 .LASF1
     /tmp/ccTxbc3f.s:2723   .debug_str:00000000000003f4 .LASF2
     /tmp/ccTxbc3f.s:2697   .debug_str:000000000000032f .LASF4
     /tmp/ccTxbc3f.s:2799   .debug_str:00000000000005f6 .LASF3
     /tmp/ccTxbc3f.s:2621   .debug_str:00000000000000b0 .LASF5
     /tmp/ccTxbc3f.s:2761   .debug_str:00000000000004cd .LASF6
     /tmp/ccTxbc3f.s:2737   .debug_str:000000000000043f .LASF7
     /tmp/ccTxbc3f.s:2839   .debug_str:00000000000007cd .LASF8
     /tmp/ccTxbc3f.s:2683   .debug_str:0000000000000291 .LASF9
     /tmp/ccTxbc3f.s:2775   .debug_str:000000000000052d .LASF10
     /tmp/ccTxbc3f.s:2833   .debug_str:0000000000000790 .LASF11
     /tmp/ccTxbc3f.s:2625   .debug_str:00000000000000be .LASF12
     /tmp/ccTxbc3f.s:2599   .debug_str:000000000000002e .LASF13
     /tmp/ccTxbc3f.s:2637   .debug_str:000000000000011e .LASF14
     /tmp/ccTxbc3f.s:2793   .debug_str:00000000000005c2 .LASF15
     /tmp/ccTxbc3f.s:2649   .debug_str:000000000000017c .LASF16
     /tmp/ccTxbc3f.s:2721   .debug_str:00000000000003e4 .LASF36
     /tmp/ccTxbc3f.s:2627   .debug_str:00000000000000ce .LASF37
     /tmp/ccTxbc3f.s:2861   .debug_str:0000000000000889 .LASF17
     /tmp/ccTxbc3f.s:2817   .debug_str:0000000000000678 .LASF18
     /tmp/ccTxbc3f.s:2667   .debug_str:000000000000020d .LASF19
     /tmp/ccTxbc3f.s:2747   .debug_str:0000000000000475 .LASF20
     /tmp/ccTxbc3f.s:2593   .debug_str:0000000000000000 .LASF21
     /tmp/ccTxbc3f.s:2661   .debug_str:00000000000001e6 .LASF22
     /tmp/ccTxbc3f.s:2831   .debug_str:000000000000078a .LASF23
     /tmp/ccTxbc3f.s:2751   .debug_str:0000000000000488 .LASF25
     /tmp/ccTxbc3f.s:2755   .debug_str:00000000000004ab .LASF24
     /tmp/ccTxbc3f.s:2855   .debug_str:0000000000000845 .LASF26
     /tmp/ccTxbc3f.s:2671   .debug_str:0000000000000225 .LASF27
     /tmp/ccTxbc3f.s:2695   .debug_str:000000000000030b .LASF28
     /tmp/ccTxbc3f.s:2865   .debug_str:00000000000008ac .LASF29
     /tmp/ccTxbc3f.s:2845   .debug_str:00000000000007f7 .LASF30
     /tmp/ccTxbc3f.s:2729   .debug_str:0000000000000417 .LASF31
     /tmp/ccTxbc3f.s:2709   .debug_str:000000000000036b .LASF32
     /tmp/ccTxbc3f.s:2829   .debug_str:000000000000077e .LASF85
     /tmp/ccTxbc3f.s:2619   .debug_str:000000000000008c .LASF87
     /tmp/ccTxbc3f.s:2623   .debug_str:00000000000000b7 .LASF49
     /tmp/ccTxbc3f.s:2777   .debug_str:000000000000053c .LASF51
     /tmp/ccTxbc3f.s:2789   .debug_str:000000000000059a .LASF33
     /tmp/ccTxbc3f.s:2607   .debug_str:0000000000000056 .LASF34
GAS LISTING /tmp/ccTxbc3f.s 			page 18


     /tmp/ccTxbc3f.s:2767   .debug_str:00000000000004f9 .LASF35
     /tmp/ccTxbc3f.s:2605   .debug_str:000000000000004e .LASF38
     /tmp/ccTxbc3f.s:2849   .debug_str:0000000000000820 .LASF39
     /tmp/ccTxbc3f.s:2617   .debug_str:0000000000000080 .LASF41
     /tmp/ccTxbc3f.s:2679   .debug_str:000000000000026a .LASF40
     /tmp/ccTxbc3f.s:2685   .debug_str:000000000000029f .LASF42
     /tmp/ccTxbc3f.s:2809   .debug_str:000000000000063f .LASF43
     /tmp/ccTxbc3f.s:2801   .debug_str:0000000000000608 .LASF45
     /tmp/ccTxbc3f.s:2813   .debug_str:0000000000000658 .LASF44
     /tmp/ccTxbc3f.s:2633   .debug_str:0000000000000107 .LASF46
     /tmp/ccTxbc3f.s:2657   .debug_str:00000000000001d8 .LASF47
     /tmp/ccTxbc3f.s:2783   .debug_str:0000000000000581 .LASF48
     /tmp/ccTxbc3f.s:2765   .debug_str:00000000000004ee .LASF50
     /tmp/ccTxbc3f.s:2681   .debug_str:000000000000027a .LASF52
     /tmp/ccTxbc3f.s:2725   .debug_str:0000000000000402 .LASF53
     /tmp/ccTxbc3f.s:2693   .debug_str:00000000000002f4 .LASF54
     /tmp/ccTxbc3f.s:2719   .debug_str:00000000000003d7 .LASF55
     /tmp/ccTxbc3f.s:2819   .debug_str:000000000000067d .LASF56
     /tmp/ccTxbc3f.s:2787   .debug_str:0000000000000595 .LASF133
     /tmp/ccTxbc3f.s:2735   .debug_str:0000000000000437 .LASF57
     /tmp/ccTxbc3f.s:2703   .debug_str:0000000000000344 .LASF58
     /tmp/ccTxbc3f.s:2707   .debug_str:000000000000035e .LASF59
     /tmp/ccTxbc3f.s:2863   .debug_str:000000000000088e .LASF60
     /tmp/ccTxbc3f.s:2795   .debug_str:00000000000005d8 .LASF77
     /tmp/ccTxbc3f.s:2731   .debug_str:0000000000000421 .LASF79
     /tmp/ccTxbc3f.s:2663   .debug_str:00000000000001f0 .LASF134
     /tmp/ccTxbc3f.s:2701   .debug_str:000000000000033f .LASF61
     /tmp/ccTxbc3f.s:2745   .debug_str:000000000000046f .LASF62
     /tmp/ccTxbc3f.s:2705   .debug_str:0000000000000356 .LASF63
     /tmp/ccTxbc3f.s:2749   .debug_str:000000000000047e .LASF64
     /tmp/ccTxbc3f.s:2699   .debug_str:0000000000000336 .LASF65
     /tmp/ccTxbc3f.s:2713   .debug_str:00000000000003a8 .LASF68
     /tmp/ccTxbc3f.s:2689   .debug_str:00000000000002d3 .LASF70
     /tmp/ccTxbc3f.s:2643   .debug_str:0000000000000144 .LASF66
     /tmp/ccTxbc3f.s:2687   .debug_str:00000000000002ab .LASF67
     /tmp/ccTxbc3f.s:2743   .debug_str:0000000000000466 .LASF69
     /tmp/ccTxbc3f.s:2669   .debug_str:0000000000000212 .LASF71
     /tmp/ccTxbc3f.s:2629   .debug_str:00000000000000da .LASF72
     /tmp/ccTxbc3f.s:2753   .debug_str:00000000000004a5 .LASF73
     /tmp/ccTxbc3f.s:2711   .debug_str:000000000000039d .LASF135
     /tmp/ccTxbc3f.s:2811   .debug_str:000000000000064f .LASF74
     /tmp/ccTxbc3f.s:2717   .debug_str:00000000000003ce .LASF75
     /tmp/ccTxbc3f.s:2847   .debug_str:0000000000000817 .LASF76
     /tmp/ccTxbc3f.s:2791   .debug_str:00000000000005b7 .LASF78
     /tmp/ccTxbc3f.s:2857   .debug_str:0000000000000866 .LASF80
     /tmp/ccTxbc3f.s:2615   .debug_str:0000000000000072 .LASF81
     /tmp/ccTxbc3f.s:2835   .debug_str:000000000000079f .LASF82
     /tmp/ccTxbc3f.s:2815   .debug_str:000000000000066b .LASF83
     /tmp/ccTxbc3f.s:2597   .debug_str:0000000000000014 .LASF84
     /tmp/ccTxbc3f.s:2601   .debug_str:000000000000003e .LASF86
     /tmp/ccTxbc3f.s:2665   .debug_str:00000000000001f8 .LASF88
     /tmp/ccTxbc3f.s:2659   .debug_str:00000000000001dd .LASF89
     /tmp/ccTxbc3f.s:2641   .debug_str:000000000000012f .LASF90
     /tmp/ccTxbc3f.s:2803   .debug_str:0000000000000615 .LASF91
     /tmp/ccTxbc3f.s:2779   .debug_str:000000000000055a .LASF92
     /tmp/ccTxbc3f.s:2825   .debug_str:00000000000006b3 .LASF93
     /tmp/ccTxbc3f.s:2837   .debug_str:00000000000007ba .LASF94
GAS LISTING /tmp/ccTxbc3f.s 			page 19


     /tmp/ccTxbc3f.s:2677   .debug_str:0000000000000262 .LASF95
     /tmp/ccTxbc3f.s:2651   .debug_str:0000000000000192 .LASF96
     /tmp/ccTxbc3f.s:2595   .debug_str:000000000000000c .LASF97
     /tmp/ccTxbc3f.s:2805   .debug_str:000000000000061c .LASF98
     /tmp/ccTxbc3f.s:2771   .debug_str:000000000000050f .LASF99
     /tmp/ccTxbc3f.s:2781   .debug_str:000000000000056d .LASF100
     /tmp/ccTxbc3f.s:2691   .debug_str:00000000000002ec .LASF101
     /tmp/ccTxbc3f.s:2647   .debug_str:0000000000000168 .LASF102
     /tmp/ccTxbc3f.s:2741   .debug_str:000000000000045f .LASF103
     /tmp/ccTxbc3f.s:2851   .debug_str:000000000000082d .LASF104
     /tmp/ccTxbc3f.s:2613   .debug_str:000000000000006b .LASF105
     /tmp/ccTxbc3f.s:2675   .debug_str:000000000000024f .LASF106
     /tmp/ccTxbc3f.s:2733   .debug_str:0000000000000431 .LASF107
     /tmp/ccTxbc3f.s:2823   .debug_str:00000000000006a1 .LASF108
     /tmp/ccTxbc3f.s:2611   .debug_str:0000000000000065 .LASF109
     /tmp/ccTxbc3f.s:2867   .debug_str:00000000000008b5 .LASF110
     /tmp/ccTxbc3f.s:2859   .debug_str:000000000000087e .LASF111
     /tmp/ccTxbc3f.s:2797   .debug_str:00000000000005de .LASF112
     /tmp/ccTxbc3f.s:2821   .debug_str:0000000000000696 .LASF113
     /tmp/ccTxbc3f.s:2715   .debug_str:00000000000003b6 .LASF114
     /tmp/ccTxbc3f.s:2635   .debug_str:0000000000000114 .LASF115
     /tmp/ccTxbc3f.s:2773   .debug_str:0000000000000517 .LASF116
     /tmp/ccTxbc3f.s:2609   .debug_str:000000000000005b .LASF117
     /tmp/ccTxbc3f.s:2645   .debug_str:0000000000000152 .LASF118
     /tmp/ccTxbc3f.s:2759   .debug_str:00000000000004c8 .LASF119
     /tmp/ccTxbc3f.s:2769   .debug_str:00000000000004fe .LASF120
     /tmp/ccTxbc3f.s:2807   .debug_str:0000000000000630 .LASF121
     /tmp/ccTxbc3f.s:2631   .debug_str:00000000000000eb .LASF122
     /tmp/ccTxbc3f.s:2841   .debug_str:00000000000007dd .LASF123
     /tmp/ccTxbc3f.s:2653   .debug_str:00000000000001a6 .LASF124
     /tmp/ccTxbc3f.s:46     .text:0000000000000020 .LFB54
     /tmp/ccTxbc3f.s:354    .text:000000000000015c .LFE54
     /tmp/ccTxbc3f.s:2603   .debug_str:0000000000000047 .LASF125
     /tmp/ccTxbc3f.s:2431   .debug_loc:0000000000000000 .LLST0
     /tmp/ccTxbc3f.s:2583   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccTxbc3f.s:2474   .debug_loc:00000000000000b0 .LLST7
     /tmp/ccTxbc3f.s:188    .text:00000000000000c4 .LBB54
     /tmp/ccTxbc3f.s:215    .text:00000000000000e0 .LBE54
     /tmp/ccTxbc3f.s:2485   .debug_loc:00000000000000e6 .LLST11
     /tmp/ccTxbc3f.s:2492   .debug_loc:0000000000000109 .LLST12
     /tmp/ccTxbc3f.s:2727   .debug_str:000000000000040e .LASF126
     /tmp/ccTxbc3f.s:2499   .debug_loc:000000000000012c .LLST13
     /tmp/ccTxbc3f.s:202    .text:00000000000000d0 .LVL10
     /tmp/ccTxbc3f.s:207    .text:00000000000000dc .LVL11
     /tmp/ccTxbc3f.s:156    .text:00000000000000a4 .LBB53
     /tmp/ccTxbc3f.s:183    .text:00000000000000c0 .LBE53
     /tmp/ccTxbc3f.s:2506   .debug_loc:000000000000014f .LLST8
     /tmp/ccTxbc3f.s:2513   .debug_loc:0000000000000172 .LLST9
     /tmp/ccTxbc3f.s:2520   .debug_loc:0000000000000195 .LLST10
     /tmp/ccTxbc3f.s:170    .text:00000000000000b0 .LVL6
     /tmp/ccTxbc3f.s:175    .text:00000000000000bc .LVL7
     /tmp/ccTxbc3f.s:124    .text:0000000000000088 .LBB49
     /tmp/ccTxbc3f.s:140    .text:0000000000000094 .LBE49
     /tmp/ccTxbc3f.s:268    .text:0000000000000118 .LBB36
     /tmp/ccTxbc3f.s:342    .text:0000000000000150 .LBE36
     /tmp/ccTxbc3f.s:2843   .debug_str:00000000000007f2 .LASF127
     /tmp/ccTxbc3f.s:2527   .debug_loc:00000000000001b8 .LLST2
GAS LISTING /tmp/ccTxbc3f.s 			page 20


     /tmp/ccTxbc3f.s:2785   .debug_str:000000000000058d .LASF128
     /tmp/ccTxbc3f.s:2534   .debug_loc:00000000000001db .LLST3
     /tmp/ccTxbc3f.s:270    .text:0000000000000118 .LBB37
     /tmp/ccTxbc3f.s:286    .text:0000000000000124 .LBE37
     /tmp/ccTxbc3f.s:288    .text:0000000000000124 .LBB39
     /tmp/ccTxbc3f.s:304    .text:0000000000000130 .LBE39
     /tmp/ccTxbc3f.s:314    .text:0000000000000144 .LBB41
     /tmp/ccTxbc3f.s:325    .text:0000000000000148 .LBE41
     /tmp/ccTxbc3f.s:2541   .debug_loc:00000000000001fe .LLST4
     /tmp/ccTxbc3f.s:327    .text:0000000000000148 .LBB43
     /tmp/ccTxbc3f.s:341    .text:0000000000000150 .LBE43
     /tmp/ccTxbc3f.s:2548   .debug_loc:0000000000000221 .LLST5
     /tmp/ccTxbc3f.s:312    .text:0000000000000144 .LVL20
     /tmp/ccTxbc3f.s:62     .text:0000000000000038 .LBB28
     /tmp/ccTxbc3f.s:79     .text:0000000000000044 .LBE28
     /tmp/ccTxbc3f.s:236    .text:0000000000000104 .LBB34
     /tmp/ccTxbc3f.s:244    .text:0000000000000108 .LBE34
     /tmp/ccTxbc3f.s:2555   .debug_loc:0000000000000244 .LLST1
     /tmp/ccTxbc3f.s:251    .text:000000000000010c .LBB45
     /tmp/ccTxbc3f.s:266    .text:0000000000000118 .LBE45
     /tmp/ccTxbc3f.s:2562   .debug_loc:0000000000000267 .LLST6
     /tmp/ccTxbc3f.s:348    .text:0000000000000158 .LVL23
     /tmp/ccTxbc3f.s:10     .text:0000000000000000 .LFB53
     /tmp/ccTxbc3f.s:40     .text:0000000000000020 .LFE53
     /tmp/ccTxbc3f.s:2639   .debug_str:000000000000012a .LASF129
     /tmp/ccTxbc3f.s:2853   .debug_str:0000000000000840 .LASF136
     /tmp/ccTxbc3f.s:2655   .debug_str:00000000000001c8 .LASF137
     /tmp/ccTxbc3f.s:77     .text:0000000000000044 .LVL0
     /tmp/ccTxbc3f.s:100    .text:0000000000000070 .LVL1
     /tmp/ccTxbc3f.s:118    .text:0000000000000088 .LVL2
     /tmp/ccTxbc3f.s:144    .text:0000000000000098 .LVL4
     /tmp/ccTxbc3f.s:185    .text:00000000000000c4 .LVL8
     /tmp/ccTxbc3f.s:217    .text:00000000000000e4 .LVL12
     /tmp/ccTxbc3f.s:226    .text:00000000000000ec .LVL13
     /tmp/ccTxbc3f.s:247    .text:000000000000010c .LVL16
     /tmp/ccTxbc3f.s:263    .text:0000000000000118 .LVL17
     /tmp/ccTxbc3f.s:338    .text:0000000000000150 .LVL22
     /tmp/ccTxbc3f.s:138    .text:0000000000000094 .LVL3
     /tmp/ccTxbc3f.s:197    .text:00000000000000c8 .LVL9
     /tmp/ccTxbc3f.s:165    .text:00000000000000a8 .LVL5
     /tmp/ccTxbc3f.s:284    .text:0000000000000124 .LVL18
     /tmp/ccTxbc3f.s:302    .text:0000000000000130 .LVL19
     /tmp/ccTxbc3f.s:322    .text:0000000000000148 .LVL21
     /tmp/ccTxbc3f.s:235    .text:0000000000000104 .LVL14
     /tmp/ccTxbc3f.s:242    .text:0000000000000108 .LVL15
     /tmp/ccTxbc3f.s:361    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccTxbc3f.s:122    .text:0000000000000088 .LBB48
     /tmp/ccTxbc3f.s:147    .text:000000000000009c .LBE48
     /tmp/ccTxbc3f.s:151    .text:000000000000009c .LBB56
     /tmp/ccTxbc3f.s:220    .text:00000000000000e4 .LBE56

UNDEFINED SYMBOLS
_ZN15MemoryAllocator11getInstanceEv
_ZN15MemoryAllocator4freeEPv
_ZN15MemoryAllocator6mallocEm
_ZN3TCB16timeSliceCounterE
_ZN3TCB7runningE
GAS LISTING /tmp/ccTxbc3f.s 			page 21


_ZN3TCB8dispatchEv
console_handler
