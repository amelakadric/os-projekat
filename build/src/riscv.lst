GAS LISTING /tmp/ccZSl0rL.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB48:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** using Body = void (*)(void*);
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** void Riscv::popSppSpie()
   8:src/riscv.cpp **** {
  12              		.loc 1 8 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 9 5
  21              		.loc 1 9 39 is_stmt 0
  22              	#APP
  23              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 30 is_stmt 0
  28              	# 10 "src/riscv.cpp" 1
  11              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 11 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE48:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB49:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  14:src/riscv.cpp **** {
GAS LISTING /tmp/ccZSl0rL.s 			page 2


  47              		.loc 1 14 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54 0030 23382103 		sd	s2,48(sp)
  55 0034 23343103 		sd	s3,40(sp)
  56              		.cfi_offset 1, -8
  57              		.cfi_offset 8, -16
  58              		.cfi_offset 9, -24
  59              		.cfi_offset 18, -32
  60              		.cfi_offset 19, -40
  61 0038 13040105 		addi	s0,sp,80
  62              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     uint64 scause = r_scause();
  63              		.loc 1 15 5
  64              	.LBB45:
  65              	.LBB46:
  66              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/19/22.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** //#include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../h/TCB.hpp"
  10:src/../h/riscv.hpp **** #include "../lib/console.h"
  11:src/../h/riscv.hpp **** #include "../h/Ksemaphore.hpp"
  12:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** //#include "../h/syscall_cpp.hpp"
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp **** //class TCB;
  16:src/../h/riscv.hpp **** class Riscv
  17:src/../h/riscv.hpp **** {
  18:src/../h/riscv.hpp **** public:
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  21:src/../h/riscv.hpp ****     static void popSppSpie();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  24:src/../h/riscv.hpp ****     static void pushRegisters();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  27:src/../h/riscv.hpp ****     static void popRegisters();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register scause
  30:src/../h/riscv.hpp ****     static uint64 r_scause();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register scause
  33:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register sepc
  36:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccZSl0rL.s 			page 3


  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register sepc
  39:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register stvec
  42:src/../h/riscv.hpp ****     static uint64 r_stvec();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register stvec
  45:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stval
  48:src/../h/riscv.hpp ****     static uint64 r_stval();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stval
  51:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     enum BitMaskSip
  54:src/../h/riscv.hpp ****     {
  55:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  56:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  57:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  58:src/../h/riscv.hpp ****     };
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // mask set register sip
  61:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask clear register sip
  64:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // read register sip
  67:src/../h/riscv.hpp ****     static uint64 r_sip();
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // write register sip
  70:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     enum BitMaskSstatus
  73:src/../h/riscv.hpp ****     {
  74:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  75:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  76:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  77:src/../h/riscv.hpp ****     };
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask set register sstatus
  80:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // mask clear register sstatus
  83:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // read register sstatus
  86:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // write register sstatus
  89:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a0;
  92:src/../h/riscv.hpp ****     static uint64 r_a0();
  93:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccZSl0rL.s 			page 4


  94:src/../h/riscv.hpp **** // supervisor trap
  95:src/../h/riscv.hpp ****     static void supervisorTrap();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp ****     // supervisor trap handler
 100:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
  67              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  68              		.loc 2 107 5
  69              		.loc 2 107 72 is_stmt 0
  70              	#APP
  71              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
  72              		csrr a5, scause
  73              	# 0 "" 2
  74              	#NO_APP
  75 0040 2338F4FA 		sd	a5,-80(s0)
  76              		.loc 2 108 5 is_stmt 1
  77              		.loc 2 108 12 is_stmt 0
  78 0044 033704FB 		ld	a4,-80(s0)
  79              	.LVL0:
  80              	.LBE46:
  81              	.LBE45:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  82              		.loc 1 17 5 is_stmt 1
  83              	.LBB47:
  84              		.loc 1 17 40 is_stmt 0
  85 0048 930687FF 		addi	a3,a4,-8
  86              		.loc 1 17 5
  87 004c 93071000 		li	a5,1
  88 0050 63F8D702 		bleu	a3,a5,.L33
  18:src/riscv.cpp ****     {
  19:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
  25:src/riscv.cpp ****             //mem_alloc(size_t size-a1)
  26:src/riscv.cpp ****             size_t a7;
  27:src/riscv.cpp ****             void *a;
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  32:src/riscv.cpp ****         }
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
  34:src/riscv.cpp ****             //mem_free
  35:src/riscv.cpp ****             void* a7;
GAS LISTING /tmp/ccZSl0rL.s 			page 5


  36:src/riscv.cpp ****             uint64 a;
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  41:src/riscv.cpp **** 
  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****         }
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
  45:src/riscv.cpp **** //            //thread_create(&myhandle-a1, body-a2, arg-a3)
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             TCB** tcb;
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  49:src/riscv.cpp ****             Body a2;
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  51:src/riscv.cpp ****             //arg
  52:src/riscv.cpp ****             void* a7;
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
  62:src/riscv.cpp ****             //thread_exit
  63:src/riscv.cpp ****             uint64 a;
  64:src/riscv.cpp ****             a=TCB::exitThread();
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  66:src/riscv.cpp ****         }
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
  68:src/riscv.cpp ****             //thread_dispatch()
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  70:src/riscv.cpp ****             TCB::dispatch();
  71:src/riscv.cpp ****         }
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
  74:src/riscv.cpp ****             //thread_start()
  75:src/riscv.cpp ****             TCB** tcb;
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
  78:src/riscv.cpp ****         }
  79:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
  80:src/riscv.cpp ****             //thread_create2() bez stavljanja u scheduler
  81:src/riscv.cpp ****             TCB** tcb;
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  83:src/riscv.cpp ****             Body a2;
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  85:src/riscv.cpp ****             //arg
  86:src/riscv.cpp ****             void* a7;
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
GAS LISTING /tmp/ccZSl0rL.s 			page 6


  93:src/riscv.cpp ****         }
  94:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
  95:src/riscv.cpp ****             //sem_open a1-handle a2-init
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****             unsigned a2;
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****             Ksemaphore** sem;
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 103:src/riscv.cpp **** 
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****         }
 108:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 109:src/riscv.cpp ****             //sem_close a1-handle
 110:src/riscv.cpp **** 
 111:src/riscv.cpp ****             uint64 a;
 112:src/riscv.cpp ****             Ksemaphore* sem;
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****             a=0;
 116:src/riscv.cpp ****             if(sem== nullptr){
 117:src/riscv.cpp ****                 a=1;
 118:src/riscv.cpp ****             }
 119:src/riscv.cpp ****             else{
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 121:src/riscv.cpp ****             }
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 123:src/riscv.cpp **** 
 124:src/riscv.cpp ****         }
 125:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 126:src/riscv.cpp ****             //sem_wait a1-id
 127:src/riscv.cpp **** 
 128:src/riscv.cpp ****             int a;
 129:src/riscv.cpp ****             Ksemaphore* a7;
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 131:src/riscv.cpp **** 
 132:src/riscv.cpp ****             if(a7!= nullptr){
 133:src/riscv.cpp ****                 a = a7->wait();
 134:src/riscv.cpp ****             }
 135:src/riscv.cpp ****             else{
 136:src/riscv.cpp ****                 a=-1;
 137:src/riscv.cpp ****             }
 138:src/riscv.cpp **** 
 139:src/riscv.cpp **** 
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 141:src/riscv.cpp **** 
 142:src/riscv.cpp ****         }
 143:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 144:src/riscv.cpp ****             //sem_signal a1-id
 145:src/riscv.cpp **** 
 146:src/riscv.cpp ****             uint64 a;
 147:src/riscv.cpp ****             Ksemaphore* sem;
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 149:src/riscv.cpp ****             if(sem!= nullptr) {
GAS LISTING /tmp/ccZSl0rL.s 			page 7


 150:src/riscv.cpp ****                 a = sem->signal();
 151:src/riscv.cpp ****             }else {
 152:src/riscv.cpp ****                 a=1;
 153:src/riscv.cpp ****             }
 154:src/riscv.cpp **** 
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 156:src/riscv.cpp ****         }
 157:src/riscv.cpp ****         else if (a0 == 0x0000000000000016UL){
 158:src/riscv.cpp ****             uint64 a;
 159:src/riscv.cpp ****             TCB* t;
 160:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 161:src/riscv.cpp ****             a= t->getId();
 162:src/riscv.cpp **** 
 163:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 164:src/riscv.cpp **** 
 165:src/riscv.cpp ****         }
 166:src/riscv.cpp ****         else if (a0 == 0x0000000000000017UL){
 167:src/riscv.cpp ****             TCB* t;
 168:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 169:src/riscv.cpp **** 
 170:src/riscv.cpp ****             t->join();
 171:src/riscv.cpp **** 
 172:src/riscv.cpp ****         }
 173:src/riscv.cpp **** 
 174:src/riscv.cpp **** //        TCB::dispatch();
 175:src/riscv.cpp **** 
 176:src/riscv.cpp ****         w_sstatus(sstatus);
 177:src/riscv.cpp ****         w_sepc(sepc);
 178:src/riscv.cpp **** 
 179:src/riscv.cpp **** 
 180:src/riscv.cpp ****     } else if (scause == 0x8000000000000001UL)
  89              		.loc 1 180 12 is_stmt 1
  90 0054 9307F0FF 		li	a5,-1
  91 0058 9397F703 		slli	a5,a5,63
  92 005c 93871700 		addi	a5,a5,1
  93 0060 6304F724 		beq	a4,a5,.L34
 181:src/riscv.cpp ****     {
 182:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 183:src/riscv.cpp **** //        TCB::timeSliceCounter++;
 184:src/riscv.cpp **** //        if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 185:src/riscv.cpp **** //        {
 186:src/riscv.cpp **** //            uint64 sepc = r_sepc();
 187:src/riscv.cpp **** //            uint64 sstatus = r_sstatus();
 188:src/riscv.cpp **** //            TCB::timeSliceCounter = 0;
 189:src/riscv.cpp **** //            TCB::dispatch();
 190:src/riscv.cpp **** //            w_sstatus(sstatus);
 191:src/riscv.cpp **** //            w_sepc(sepc);
 192:src/riscv.cpp **** //        }
 193:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 194:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL)
  94              		.loc 1 194 12
  95 0064 9307F0FF 		li	a5,-1
  96 0068 9397F703 		slli	a5,a5,63
  97 006c 93879700 		addi	a5,a5,9
  98 0070 6314F70C 		bne	a4,a5,.L3
 195:src/riscv.cpp ****     {
 196:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
GAS LISTING /tmp/ccZSl0rL.s 			page 8


 197:src/riscv.cpp ****         console_handler();
  99              		.loc 1 197 9
 100              		.loc 1 197 24 is_stmt 0
 101 0074 97000000 		call	console_handler@plt
 101      E7800000 
 102              	.LVL1:
 103              	.LBE47:
 198:src/riscv.cpp ****     }else
 199:src/riscv.cpp ****     {
 200:src/riscv.cpp ****         // unexpected trap cause
 201:src/riscv.cpp ****     }
 202:src/riscv.cpp **** }...
 104              		.loc 1 202 1
 105 007c 6F00C00B 		j	.L3
 106              	.LVL2:
 107              	.L33:
 108              	.LBB197:
 109              	.LBB48:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 110              		.loc 1 20 9 is_stmt 1
 111              	.LBB49:
 112              	.LBB50:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 113              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 114              		.loc 2 119 5
 115              		.loc 2 119 64 is_stmt 0
 116              	#APP
 117              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 118              		csrr a5, sepc
 119              	# 0 "" 2
 120              	#NO_APP
 121 0084 2334F4FC 		sd	a5,-56(s0)
 122              		.loc 2 120 5 is_stmt 1
 123              		.loc 2 120 12 is_stmt 0
 124 0088 833484FC 		ld	s1,-56(s0)
 125              	.LBE50:
 126              	.LBE49:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 127              		.loc 1 20 34
 128 008c 93844400 		addi	s1,s1,4
 129              	.LVL3:
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 130              		.loc 1 21 9 is_stmt 1
 131              	.LBB51:
 132              	.LBB52:
 121:src/../h/riscv.hpp **** }
GAS LISTING /tmp/ccZSl0rL.s 			page 9


 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144:src/../h/riscv.hpp ****     return stval;
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccZSl0rL.s 			page 10


 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 133              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 134              		.loc 2 187 5
 135              		.loc 2 187 76 is_stmt 0
 136              	#APP
 137              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 138              		csrr a5, sstatus
 139              	# 0 "" 2
 140              	#NO_APP
 141 0094 2330F4FC 		sd	a5,-64(s0)
 142              		.loc 2 188 5 is_stmt 1
 143              		.loc 2 188 12 is_stmt 0
 144 0098 033904FC 		ld	s2,-64(s0)
 145              	.LVL4:
 146              	.LBE52:
 147              	.LBE51:
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
 148              		.loc 1 23 9 is_stmt 1
 149              	.LBB53:
 150              	.LBB54:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 194:src/../h/riscv.hpp **** }
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** 
 197:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 198:src/../h/riscv.hpp **** {
 199:src/../h/riscv.hpp ****     uint64 volatile a0;
 151              		.loc 2 199 5
 200:src/../h/riscv.hpp ****     __asm__ volatile ("mv %[a0], a0" : [a0] "=r"(a0));
 152              		.loc 2 200 5
 153              		.loc 2 200 54 is_stmt 0
 154              	#APP
 155              	# 200 "src/../h/riscv.hpp" 1
 201              	    return a0;
 156              		mv a5, a0
 157              	# 0 "" 2
 158              	#NO_APP
 159 00a0 233CF4FA 		sd	a5,-72(s0)
 160              		.loc 2 201 5 is_stmt 1
 161              		.loc 2 201 12 is_stmt 0
 162 00a4 833784FB 		ld	a5,-72(s0)
 163              	.LVL5:
 164              	.LBE54:
 165              	.LBE53:
GAS LISTING /tmp/ccZSl0rL.s 			page 11


  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
 166              		.loc 1 24 9 is_stmt 1
 167              	.LBB55:
 168 00a8 13071000 		li	a4,1
 169              	.LVL6:
 170 00ac 638AE706 		beq	a5,a4,.L35
 171              	.LBE55:
 172              	.LBE48:
 173              	.LBE197:
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
 174              		.loc 1 33 14
 175              	.LBB198:
 176              	.LBB182:
 177              	.LBB165:
 178              	.LBB56:
 179 00b0 13072000 		li	a4,2
 180 00b4 6380E70A 		beq	a5,a4,.L36
 181              	.LBE56:
 182              	.LBE165:
 183              	.LBE182:
 184              	.LBE198:
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
 185              		.loc 1 44 14
 186              	.LBB199:
 187              	.LBB183:
 188              	.LBB166:
 189              	.LBB152:
 190              	.LBB57:
 191 00b8 13071001 		li	a4,17
 192 00bc 6386E70A 		beq	a5,a4,.L37
 193              	.LBE57:
 194              	.LBE152:
 195              	.LBE166:
 196              	.LBE183:
 197              	.LBE199:
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
 198              		.loc 1 61 14
 199              	.LBB200:
 200              	.LBB184:
 201              	.LBB167:
 202              	.LBB153:
 203              	.LBB140:
 204              	.LBB58:
 205 00c0 13072001 		li	a4,18
 206 00c4 638AE70C 		beq	a5,a4,.L38
 207              	.LBE58:
 208              	.LBE140:
 209              	.LBE153:
 210              	.LBE167:
 211              	.LBE184:
 212              	.LBE200:
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
 213              		.loc 1 67 14
 214              	.LBB201:
 215              	.LBB185:
 216              	.LBB168:
 217              	.LBB154:
GAS LISTING /tmp/ccZSl0rL.s 			page 12


 218              	.LBB141:
 219              	.LBB128:
 220              	.LBB59:
 221 00c8 13073001 		li	a4,19
 222 00cc 638EE70C 		beq	a5,a4,.L39
 223              	.LBE59:
 224              	.LBE128:
 225              	.LBE141:
 226              	.LBE154:
 227              	.LBE168:
 228              	.LBE185:
 229              	.LBE201:
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
 230              		.loc 1 73 14
 231              	.LBB202:
 232              	.LBB186:
 233              	.LBB169:
 234              	.LBB155:
 235              	.LBB142:
 236              	.LBB129:
 237              	.LBB118:
 238              	.LBB60:
 239 00d0 13074001 		li	a4,20
 240 00d4 6386E70E 		beq	a5,a4,.L40
 241              	.LBE60:
 242              	.LBE118:
 243              	.LBE129:
 244              	.LBE142:
 245              	.LBE155:
 246              	.LBE169:
 247              	.LBE186:
 248              	.LBE202:
  79:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
 249              		.loc 1 79 14
 250              	.LBB203:
 251              	.LBB187:
 252              	.LBB170:
 253              	.LBB156:
 254              	.LBB143:
 255              	.LBB130:
 256              	.LBB119:
 257              	.LBB110:
 258              	.LBB61:
 259 00d8 13075001 		li	a4,21
 260 00dc 638CE70E 		beq	a5,a4,.L41
 261              	.LBE61:
 262              	.LBE110:
 263              	.LBE119:
 264              	.LBE130:
 265              	.LBE143:
 266              	.LBE156:
 267              	.LBE170:
 268              	.LBE187:
 269              	.LBE203:
  94:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
 270              		.loc 1 94 14
 271              	.LBB204:
GAS LISTING /tmp/ccZSl0rL.s 			page 13


 272              	.LBB188:
 273              	.LBB171:
 274              	.LBB157:
 275              	.LBB144:
 276              	.LBB131:
 277              	.LBB120:
 278              	.LBB111:
 279              	.LBB102:
 280              	.LBB62:
 281 00e0 13071002 		li	a4,33
 282 00e4 6380E712 		beq	a5,a4,.L42
 283              	.LBE62:
 284              	.LBE102:
 285              	.LBE111:
 286              	.LBE120:
 287              	.LBE131:
 288              	.LBE144:
 289              	.LBE157:
 290              	.LBE171:
 291              	.LBE188:
 292              	.LBE204:
 108:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 293              		.loc 1 108 14
 294              	.LBB205:
 295              	.LBB189:
 296              	.LBB172:
 297              	.LBB158:
 298              	.LBB145:
 299              	.LBB132:
 300              	.LBB121:
 301              	.LBB112:
 302              	.LBB103:
 303              	.LBB94:
 304              	.LBB63:
 305 00e8 13072002 		li	a4,34
 306 00ec 6384E714 		beq	a5,a4,.L43
 307              	.LBE63:
 308              	.LBE94:
 309              	.LBE103:
 310              	.LBE112:
 311              	.LBE121:
 312              	.LBE132:
 313              	.LBE145:
 314              	.LBE158:
 315              	.LBE172:
 316              	.LBE189:
 317              	.LBE205:
 125:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 318              		.loc 1 125 14
 319              	.LBB206:
 320              	.LBB190:
 321              	.LBB173:
 322              	.LBB159:
 323              	.LBB146:
 324              	.LBB133:
 325              	.LBB122:
 326              	.LBB113:
GAS LISTING /tmp/ccZSl0rL.s 			page 14


 327              	.LBB104:
 328              	.LBB95:
 329              	.LBB87:
 330              	.LBB64:
 331 00f0 13073002 		li	a4,35
 332 00f4 6382E716 		beq	a5,a4,.L44
 333              	.LBE64:
 334              	.LBE87:
 335              	.LBE95:
 336              	.LBE104:
 337              	.LBE113:
 338              	.LBE122:
 339              	.LBE133:
 340              	.LBE146:
 341              	.LBE159:
 342              	.LBE173:
 343              	.LBE190:
 344              	.LBE206:
 143:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 345              		.loc 1 143 14
 346              	.LBB207:
 347              	.LBB191:
 348              	.LBB174:
 349              	.LBB160:
 350              	.LBB147:
 351              	.LBB134:
 352              	.LBB123:
 353              	.LBB114:
 354              	.LBB105:
 355              	.LBB96:
 356              	.LBB88:
 357              	.LBB81:
 358              	.LBB65:
 359 00f8 13074002 		li	a4,36
 360 00fc 638EE716 		beq	a5,a4,.L45
 361              	.LBE65:
 362              	.LBE81:
 363              	.LBE88:
 364              	.LBE96:
 365              	.LBE105:
 366              	.LBE114:
 367              	.LBE123:
 368              	.LBE134:
 369              	.LBE147:
 370              	.LBE160:
 371              	.LBE174:
 372              	.LBE191:
 373              	.LBE207:
 157:src/riscv.cpp ****         else if (a0 == 0x0000000000000016UL){
 374              		.loc 1 157 14
 375              	.LBB208:
 376              	.LBB192:
 377              	.LBB175:
 378              	.LBB161:
 379              	.LBB148:
 380              	.LBB135:
 381              	.LBB124:
GAS LISTING /tmp/ccZSl0rL.s 			page 15


 382              	.LBB115:
 383              	.LBB106:
 384              	.LBB97:
 385              	.LBB89:
 386              	.LBB82:
 387              	.LBB76:
 388              	.LBB66:
 389 0100 13076001 		li	a4,22
 390 0104 638AE718 		beq	a5,a4,.L46
 391              	.LBE66:
 392              	.LBE76:
 393              	.LBE82:
 394              	.LBE89:
 395              	.LBE97:
 396              	.LBE106:
 397              	.LBE115:
 398              	.LBE124:
 399              	.LBE135:
 400              	.LBE148:
 401              	.LBE161:
 402              	.LBE175:
 403              	.LBE192:
 404              	.LBE208:
 166:src/riscv.cpp ****         else if (a0 == 0x0000000000000017UL){
 405              		.loc 1 166 14
 406              	.LBB209:
 407              	.LBB193:
 408              	.LBB176:
 409              	.LBB162:
 410              	.LBB149:
 411              	.LBB136:
 412              	.LBB125:
 413              	.LBB116:
 414              	.LBB107:
 415              	.LBB98:
 416              	.LBB90:
 417              	.LBB83:
 418              	.LBB77:
 419              	.LBB72:
 420              	.LBB67:
 421 0108 13077001 		li	a4,23
 422 010c 6392E702 		bne	a5,a4,.L6
 423              	.LBB68:
 167:src/riscv.cpp ****             TCB* t;
 424              		.loc 1 167 13
 168:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 425              		.loc 1 168 13
 168:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 426              		.loc 1 168 61 is_stmt 0
 427              	#APP
 428              	# 168 "src/riscv.cpp" 1
 429              		mv a0, a1
 430              	# 0 "" 2
 431              	.LVL7:
 170:src/riscv.cpp ****             t->join();
 432              		.loc 1 170 13 is_stmt 1
 170:src/riscv.cpp ****             t->join();
GAS LISTING /tmp/ccZSl0rL.s 			page 16


 433              		.loc 1 170 20 is_stmt 0
 434              	#NO_APP
 435 0114 97000000 		call	_ZN3TCB4joinEv@plt
 435      E7800000 
 436              	.LVL8:
 437              	.LBE68:
 438 011c 6F004001 		j	.L6
 439              	.LVL9:
 440              	.L35:
 441              	.LBE67:
 442              	.LBE72:
 443              	.LBE77:
 444              	.LBE83:
 445              	.LBE90:
 446              	.LBE98:
 447              	.LBE107:
 448              	.LBE116:
 449              	.LBE125:
 450              	.LBE136:
 451              	.LBE149:
 452              	.LBE162:
 453              	.LBB163:
  26:src/riscv.cpp ****             size_t a7;
 454              		.loc 1 26 13 is_stmt 1
  27:src/riscv.cpp ****             void *a;
 455              		.loc 1 27 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 456              		.loc 1 28 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 457              		.loc 1 28 62 is_stmt 0
 458              	#APP
 459              	# 28 "src/riscv.cpp" 1
 460              		mv a0, a7
 461              	# 0 "" 2
 462              	.LVL10:
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 463              		.loc 1 30 13 is_stmt 1
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 464              		.loc 1 30 38 is_stmt 0
 465              	#NO_APP
 466 0124 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 466      E7800000 
 467              	.LVL11:
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 468              		.loc 1 31 13 is_stmt 1
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 469              		.loc 1 31 50 is_stmt 0
 470              	#APP
 471              	# 31 "src/riscv.cpp" 1
 472              		mv a0, a0
 473              	# 0 "" 2
 474              	.LVL12:
 475              	#NO_APP
 476              	.L6:
 477              	.LBE163:
 478              	.LBE176:
 176:src/riscv.cpp ****         w_sstatus(sstatus);
GAS LISTING /tmp/ccZSl0rL.s 			page 17


 479              		.loc 1 176 9 is_stmt 1
 480              	.LBB177:
 481              	.LBB178:
 193:src/../h/riscv.hpp **** }
 482              		.loc 2 193 5
 193:src/../h/riscv.hpp **** }
 483              		.loc 2 193 77 is_stmt 0
 484              	#APP
 485              	# 193 "src/../h/riscv.hpp" 1
 486              		csrw sstatus, s2
 487              	# 0 "" 2
 488              	.LVL13:
 489              	#NO_APP
 490              	.LBE178:
 491              	.LBE177:
 177:src/riscv.cpp ****         w_sepc(sepc);
 492              		.loc 1 177 9 is_stmt 1
 493              	.LBB179:
 494              	.LBB180:
 125:src/../h/riscv.hpp **** }
 495              		.loc 2 125 5
 125:src/../h/riscv.hpp **** }
 496              		.loc 2 125 65 is_stmt 0
 497              	#APP
 498              	# 125 "src/../h/riscv.hpp" 1
 499              		csrw sepc, s1
 500              	# 0 "" 2
 501              	.LVL14:
 502              	#NO_APP
 503              	.L3:
 504              	.LBE180:
 505              	.LBE179:
 506              	.LBE193:
 507              	.LBE209:
 508              		.loc 1 202 1
 509 0138 83308104 		ld	ra,72(sp)
 510              		.cfi_remember_state
 511              		.cfi_restore 1
 512 013c 03340104 		ld	s0,64(sp)
 513              		.cfi_restore 8
 514              		.cfi_def_cfa 2, 80
 515 0140 83348103 		ld	s1,56(sp)
 516              		.cfi_restore 9
 517 0144 03390103 		ld	s2,48(sp)
 518              		.cfi_restore 18
 519 0148 83398102 		ld	s3,40(sp)
 520              		.cfi_restore 19
 521 014c 13010105 		addi	sp,sp,80
 522              		.cfi_def_cfa_offset 0
 523 0150 67800000 		jr	ra
 524              	.LVL15:
 525              	.L36:
 526              		.cfi_restore_state
 527              	.LBB210:
 528              	.LBB194:
 529              	.LBB181:
 530              	.LBB164:
GAS LISTING /tmp/ccZSl0rL.s 			page 18


 531              	.LBB150:
  35:src/riscv.cpp ****             void* a7;
 532              		.loc 1 35 13 is_stmt 1
  36:src/riscv.cpp ****             uint64 a;
 533              		.loc 1 36 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 534              		.loc 1 37 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 535              		.loc 1 37 62 is_stmt 0
 536              	#APP
 537              	# 37 "src/riscv.cpp" 1
 538              		mv a0, a7
 539              	# 0 "" 2
 540              	.LVL16:
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 541              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 542              		.loc 1 39 36 is_stmt 0
 543              	#NO_APP
 544 0158 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 544      E7800000 
 545              	.LVL17:
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 546              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 547              		.loc 1 40 50 is_stmt 0
 548              	#APP
 549              	# 40 "src/riscv.cpp" 1
 550              		mv a0, a0
 551              	# 0 "" 2
 552              	#NO_APP
 553              	.LBE150:
 554 0164 6FF0DFFC 		j	.L6
 555              	.LVL18:
 556              	.L37:
 557              	.LBB151:
 558              	.LBB137:
  47:src/riscv.cpp ****             TCB** tcb;
 559              		.loc 1 47 13 is_stmt 1
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 560              		.loc 1 48 13
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 561              		.loc 1 48 63 is_stmt 0
 562              	#APP
 563              	# 48 "src/riscv.cpp" 1
 564              		mv s3, a1
 565              	# 0 "" 2
 566              	.LVL19:
  49:src/riscv.cpp ****             Body a2;
 567              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 568              		.loc 1 50 13
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 569              		.loc 1 50 62 is_stmt 0
 570              	# 50 "src/riscv.cpp" 1
 571              		mv a0, a2
 572              	# 0 "" 2
GAS LISTING /tmp/ccZSl0rL.s 			page 19


 573              	.LVL20:
  52:src/riscv.cpp ****             void* a7;
 574              		.loc 1 52 13 is_stmt 1
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 575              		.loc 1 53 13
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 576              		.loc 1 53 62 is_stmt 0
 577              	# 53 "src/riscv.cpp" 1
 578              		mv a1, a7
 579              	# 0 "" 2
 580              	.LVL21:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 581              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 582              		.loc 1 55 37 is_stmt 0
 583              	#NO_APP
 584 0174 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 584      E7800000 
 585              	.LVL22:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 586              		.loc 1 55 18
 587 017c 23B0A900 		sd	a0,0(s3)
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 588              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 589              		.loc 1 56 31 is_stmt 0
 590 0180 63880900 		beqz	s3,.L26
 591 0184 93070000 		li	a5,0
 592              	.L9:
 593              	.LVL23:
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 594              		.loc 1 58 13 is_stmt 1 discriminator 4
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 595              		.loc 1 58 51 is_stmt 0 discriminator 4
 596              	#APP
 597              	# 58 "src/riscv.cpp" 1
 598              		mv a0, a5
 599              	# 0 "" 2
 600              	#NO_APP
 601              	.LBE137:
 602 018c 6FF05FFA 		j	.L6
 603              	.LVL24:
 604              	.L26:
 605              	.LBB138:
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 606              		.loc 1 56 31
 607 0190 9307F0FF 		li	a5,-1
 608 0194 6FF05FFF 		j	.L9
 609              	.LVL25:
 610              	.L38:
 611              	.LBE138:
 612              	.LBB139:
 613              	.LBB126:
  63:src/riscv.cpp ****             uint64 a;
 614              		.loc 1 63 13 is_stmt 1
  64:src/riscv.cpp ****             a=TCB::exitThread();
 615              		.loc 1 64 13
GAS LISTING /tmp/ccZSl0rL.s 			page 20


  64:src/riscv.cpp ****             a=TCB::exitThread();
 616              		.loc 1 64 30 is_stmt 0
 617 0198 97000000 		call	_ZN3TCB10exitThreadEv@plt
 617      E7800000 
 618              	.LVL26:
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 619              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 620              		.loc 1 65 50 is_stmt 0
 621              	#APP
 622              	# 65 "src/riscv.cpp" 1
 623              		mv a0, a0
 624              	# 0 "" 2
 625              	#NO_APP
 626              	.LBE126:
 627 01a4 6FF0DFF8 		j	.L6
 628              	.LVL27:
 629              	.L39:
 630              	.LBB127:
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 631              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 632              		.loc 1 69 35 is_stmt 0
 633 01a8 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 633      83B70700 
 634              	.LVL28:
 635 01b0 23B00700 		sd	zero,0(a5)
  70:src/riscv.cpp ****             TCB::dispatch();
 636              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             TCB::dispatch();
 637              		.loc 1 70 26 is_stmt 0
 638 01b4 97000000 		call	_ZN3TCB8dispatchEv@plt
 638      E7800000 
 639              	.LVL29:
 640 01bc 6FF05FF7 		j	.L6
 641              	.LVL30:
 642              	.L40:
 643              	.LBB117:
 644              	.LBB108:
  75:src/riscv.cpp ****             TCB** tcb;
 645              		.loc 1 75 13 is_stmt 1
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 646              		.loc 1 76 13
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 647              		.loc 1 76 63 is_stmt 0
 648              	#APP
 649              	# 76 "src/riscv.cpp" 1
 650              		mv a5, a1
 651              	# 0 "" 2
 652              	.LVL31:
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
 653              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
 654              		.loc 1 77 27 is_stmt 0
 655              	#NO_APP
 656 01c4 03B50700 		ld	a0,0(a5)
 657 01c8 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
GAS LISTING /tmp/ccZSl0rL.s 			page 21


 657      E7800000 
 658              	.LVL32:
 659              	.LBE108:
 660 01d0 6FF01FF6 		j	.L6
 661              	.LVL33:
 662              	.L41:
 663              	.LBB109:
 664              	.LBB99:
  81:src/riscv.cpp ****             TCB** tcb;
 665              		.loc 1 81 13 is_stmt 1
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 666              		.loc 1 82 13
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 667              		.loc 1 82 63 is_stmt 0
 668              	#APP
 669              	# 82 "src/riscv.cpp" 1
 670              		mv s3, a1
 671              	# 0 "" 2
 672              	.LVL34:
  83:src/riscv.cpp ****             Body a2;
 673              		.loc 1 83 13 is_stmt 1
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 674              		.loc 1 84 13
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 675              		.loc 1 84 62 is_stmt 0
 676              	# 84 "src/riscv.cpp" 1
 677              		mv a0, a2
 678              	# 0 "" 2
 679              	.LVL35:
  86:src/riscv.cpp ****             void* a7;
 680              		.loc 1 86 13 is_stmt 1
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 681              		.loc 1 87 13
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 682              		.loc 1 87 62 is_stmt 0
 683              	# 87 "src/riscv.cpp" 1
 684              		mv a1, a7
 685              	# 0 "" 2
 686              	.LVL36:
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 687              		.loc 1 89 13 is_stmt 1
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 688              		.loc 1 89 62 is_stmt 0
 689              	#NO_APP
 690 01e0 97000000 		call	_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_@plt
 690      E7800000 
 691              	.LVL37:
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 692              		.loc 1 89 18
 693 01e8 23B0A900 		sd	a0,0(s3)
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 694              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 695              		.loc 1 90 31 is_stmt 0
 696 01ec 63880900 		beqz	s3,.L27
 697 01f0 93070000 		li	a5,0
 698              	.L14:
GAS LISTING /tmp/ccZSl0rL.s 			page 22


 699              	.LVL38:
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 700              		.loc 1 92 13 is_stmt 1 discriminator 4
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 701              		.loc 1 92 51 is_stmt 0 discriminator 4
 702              	#APP
 703              	# 92 "src/riscv.cpp" 1
 704              		mv a0, a5
 705              	# 0 "" 2
 706              	#NO_APP
 707              	.LBE99:
 708 01f8 6FF09FF3 		j	.L6
 709              	.LVL39:
 710              	.L27:
 711              	.LBB100:
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 712              		.loc 1 90 31
 713 01fc 9307F0FF 		li	a5,-1
 714 0200 6FF05FFF 		j	.L14
 715              	.LVL40:
 716              	.L42:
 717              	.LBE100:
 718              	.LBB101:
 719              	.LBB91:
  97:src/riscv.cpp ****             unsigned a2;
 720              		.loc 1 97 13 is_stmt 1
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 721              		.loc 1 98 13
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 722              		.loc 1 98 62 is_stmt 0
 723              	#APP
 724              	# 98 "src/riscv.cpp" 1
 725              		mv a0, a2
 726              	# 0 "" 2
 727              	#NO_APP
 728 0208 1B050500 		sext.w	a0,a0
 729              	.LVL41:
 100:src/riscv.cpp ****             Ksemaphore** sem;
 730              		.loc 1 100 13 is_stmt 1
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 731              		.loc 1 101 13
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 732              		.loc 1 101 63 is_stmt 0
 733              	#APP
 734              	# 101 "src/riscv.cpp" 1
 735              		mv s3, a1
 736              	# 0 "" 2
 737              	.LVL42:
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 738              		.loc 1 102 13 is_stmt 1
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 739              		.loc 1 102 47 is_stmt 0
 740              	#NO_APP
 741 0210 97000000 		call	_ZN10Ksemaphore15createSemaphoreEj@plt
 741      E7800000 
 742              	.LVL43:
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
GAS LISTING /tmp/ccZSl0rL.s 			page 23


 743              		.loc 1 102 18
 744 0218 23B0A900 		sd	a0,0(s3)
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 745              		.loc 1 104 13 is_stmt 1
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 746              		.loc 1 104 38 is_stmt 0
 747 021c 63880900 		beqz	s3,.L28
 748 0220 93070000 		li	a5,0
 749              	.L16:
 750              	.LVL44:
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 751              		.loc 1 105 13 is_stmt 1 discriminator 4
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 752              		.loc 1 105 50 is_stmt 0 discriminator 4
 753              	#APP
 754              	# 105 "src/riscv.cpp" 1
 755              		mv a0, a5
 756              	# 0 "" 2
 757              	#NO_APP
 758              	.LBE91:
 759 0228 6FF09FF0 		j	.L6
 760              	.LVL45:
 761              	.L28:
 762              	.LBB92:
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 763              		.loc 1 104 38
 764 022c 9307F0FF 		li	a5,-1
 765 0230 6FF05FFF 		j	.L16
 766              	.LVL46:
 767              	.L43:
 768              	.LBE92:
 769              	.LBB93:
 770              	.LBB84:
 111:src/riscv.cpp ****             uint64 a;
 771              		.loc 1 111 13 is_stmt 1
 112:src/riscv.cpp ****             Ksemaphore* sem;
 772              		.loc 1 112 13
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 773              		.loc 1 113 13
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 774              		.loc 1 113 63 is_stmt 0
 775              	#APP
 776              	# 113 "src/riscv.cpp" 1
 777              		mv a0, a1
 778              	# 0 "" 2
 779              	.LVL47:
 115:src/riscv.cpp ****             a=0;
 780              		.loc 1 115 13 is_stmt 1
 116:src/riscv.cpp ****             if(sem== nullptr){
 781              		.loc 1 116 13
 782              	#NO_APP
 783 0238 630C0500 		beqz	a0,.L29
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 784              		.loc 1 120 17
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 785              		.loc 1 120 36 is_stmt 0
 786 023c 97000000 		call	_ZN10Ksemaphore14closeSemaphoreEv@plt
GAS LISTING /tmp/ccZSl0rL.s 			page 24


 786      E7800000 
 787              	.LVL48:
 115:src/riscv.cpp ****             a=0;
 788              		.loc 1 115 14
 789 0244 93070000 		li	a5,0
 790              	.L18:
 791              	.LVL49:
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 792              		.loc 1 122 13 is_stmt 1
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 793              		.loc 1 122 50 is_stmt 0
 794              	#APP
 795              	# 122 "src/riscv.cpp" 1
 796              		mv a0, a5
 797              	# 0 "" 2
 798              	#NO_APP
 799              	.LBE84:
 800 024c 6FF05FEE 		j	.L6
 801              	.LVL50:
 802              	.L29:
 803              	.LBB85:
 117:src/riscv.cpp ****                 a=1;
 804              		.loc 1 117 18
 805 0250 93071000 		li	a5,1
 806              	.LVL51:
 807 0254 6FF05FFF 		j	.L18
 808              	.LVL52:
 809              	.L44:
 810              	.LBE85:
 811              	.LBB86:
 812              	.LBB78:
 128:src/riscv.cpp ****             int a;
 813              		.loc 1 128 13 is_stmt 1
 129:src/riscv.cpp ****             Ksemaphore* a7;
 814              		.loc 1 129 13
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 815              		.loc 1 130 13
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 816              		.loc 1 130 62 is_stmt 0
 817              	#APP
 818              	# 130 "src/riscv.cpp" 1
 819              		mv a0, a7
 820              	# 0 "" 2
 821              	.LVL53:
 132:src/riscv.cpp ****             if(a7!= nullptr){
 822              		.loc 1 132 13 is_stmt 1
 823              	#NO_APP
 824 025c 630A0500 		beqz	a0,.L30
 133:src/riscv.cpp ****                 a = a7->wait();
 825              		.loc 1 133 17
 133:src/riscv.cpp ****                 a = a7->wait();
 826              		.loc 1 133 29 is_stmt 0
 827 0260 97000000 		call	_ZN10Ksemaphore4waitEv@plt
 827      E7800000 
 828              	.LVL54:
 829              	.L20:
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
GAS LISTING /tmp/ccZSl0rL.s 			page 25


 830              		.loc 1 140 13 is_stmt 1
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 831              		.loc 1 140 50 is_stmt 0
 832              	#APP
 833              	# 140 "src/riscv.cpp" 1
 834              		mv a0, a0
 835              	# 0 "" 2
 836              	#NO_APP
 837              	.LBE78:
 838 026c 6FF05FEC 		j	.L6
 839              	.LVL55:
 840              	.L30:
 841              	.LBB79:
 136:src/riscv.cpp ****                 a=-1;
 842              		.loc 1 136 18
 843 0270 1305F0FF 		li	a0,-1
 844              	.LVL56:
 845 0274 6FF05FFF 		j	.L20
 846              	.L45:
 847              	.LBE79:
 848              	.LBB80:
 849              	.LBB73:
 146:src/riscv.cpp ****             uint64 a;
 850              		.loc 1 146 13 is_stmt 1
 147:src/riscv.cpp ****             Ksemaphore* sem;
 851              		.loc 1 147 13
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 852              		.loc 1 148 13
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 853              		.loc 1 148 63 is_stmt 0
 854              	#APP
 855              	# 148 "src/riscv.cpp" 1
 856              		mv a0, a7
 857              	# 0 "" 2
 858              	.LVL57:
 149:src/riscv.cpp ****             if(sem!= nullptr) {
 859              		.loc 1 149 13 is_stmt 1
 860              	#NO_APP
 861 027c 630A0500 		beqz	a0,.L31
 150:src/riscv.cpp ****                 a = sem->signal();
 862              		.loc 1 150 17
 150:src/riscv.cpp ****                 a = sem->signal();
 863              		.loc 1 150 32 is_stmt 0
 864 0280 97000000 		call	_ZN10Ksemaphore6signalEv@plt
 864      E7800000 
 865              	.LVL58:
 866              	.L22:
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 867              		.loc 1 155 13 is_stmt 1
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 868              		.loc 1 155 50 is_stmt 0
 869              	#APP
 870              	# 155 "src/riscv.cpp" 1
 871              		mv a0, a0
 872              	# 0 "" 2
 873              	#NO_APP
 874              	.LBE73:
GAS LISTING /tmp/ccZSl0rL.s 			page 26


 875 028c 6FF05FEA 		j	.L6
 876              	.LVL59:
 877              	.L31:
 878              	.LBB74:
 152:src/riscv.cpp ****                 a=1;
 879              		.loc 1 152 18
 880 0290 13051000 		li	a0,1
 881              	.LVL60:
 882 0294 6FF05FFF 		j	.L22
 883              	.L46:
 884              	.LBE74:
 885              	.LBB75:
 886              	.LBB69:
 158:src/riscv.cpp ****             uint64 a;
 887              		.loc 1 158 13 is_stmt 1
 159:src/riscv.cpp ****             TCB* t;
 888              		.loc 1 159 13
 160:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 889              		.loc 1 160 13
 160:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(t));
 890              		.loc 1 160 61 is_stmt 0
 891              	#APP
 892              	# 160 "src/riscv.cpp" 1
 893              		mv a5, a1
 894              	# 0 "" 2
 895              	.LVL61:
 161:src/riscv.cpp ****             a= t->getId();
 896              		.loc 1 161 13 is_stmt 1
 897              	#NO_APP
 898              	.LBB70:
 899              	.LBB71:
 900              		.file 3 "src/../h/../h/TCB.hpp"
   1:src/../h/../h/TCB.hpp **** #ifndef PROJECT_BASE_TCB_HPP
   2:src/../h/../h/TCB.hpp **** #define PROJECT_BASE_TCB_HPP
   3:src/../h/../h/TCB.hpp **** 
   4:src/../h/../h/TCB.hpp **** #include "../lib/hw.h"
   5:src/../h/../h/TCB.hpp **** #include "scheduler.hpp"
   6:src/../h/../h/TCB.hpp **** #include "MemoryAllocator.hpp"
   7:src/../h/../h/TCB.hpp **** 
   8:src/../h/../h/TCB.hpp **** typedef TCB* thread_t;
   9:src/../h/../h/TCB.hpp **** 
  10:src/../h/../h/TCB.hpp **** 
  11:src/../h/../h/TCB.hpp **** class TCB
  12:src/../h/../h/TCB.hpp **** {
  13:src/../h/../h/TCB.hpp **** 
  14:src/../h/../h/TCB.hpp ****     static void threadWrapper();
  15:src/../h/../h/TCB.hpp **** public:
  16:src/../h/../h/TCB.hpp ****     using Body = void (*)(void*);
  17:src/../h/../h/TCB.hpp ****     TCB();
  18:src/../h/../h/TCB.hpp **** 
  19:src/../h/../h/TCB.hpp ****     ~TCB() { delete[] stack; }
  20:src/../h/../h/TCB.hpp **** 
  21:src/../h/../h/TCB.hpp ****     bool isFinished() const { return finished; }
  22:src/../h/../h/TCB.hpp **** 
  23:src/../h/../h/TCB.hpp **** 
  24:src/../h/../h/TCB.hpp ****     void setFinished(bool value) { finished = value; }
  25:src/../h/../h/TCB.hpp **** 
GAS LISTING /tmp/ccZSl0rL.s 			page 27


  26:src/../h/../h/TCB.hpp ****     uint64 getTimeSlice() const { return timeSlice; }
  27:src/../h/../h/TCB.hpp **** 
  28:src/../h/../h/TCB.hpp ****     Body getBody() { return this->body;}
  29:src/../h/../h/TCB.hpp ****     void* getArg() {return this->arg;}
  30:src/../h/../h/TCB.hpp ****     uint64 getId() {return this->id;}
 901              		.loc 3 30 21
 902              		.loc 3 30 34 is_stmt 0
 903 029c 83B78703 		ld	a5,56(a5)
 904              	.LVL62:
 905              	.LBE71:
 906              	.LBE70:
 163:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 907              		.loc 1 163 13 is_stmt 1
 163:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 908              		.loc 1 163 50 is_stmt 0
 909              	#APP
 910              	# 163 "src/riscv.cpp" 1
 911              		mv a0, a5
 912              	# 0 "" 2
 913              	#NO_APP
 914              	.LBE69:
 915 02a4 6FF0DFE8 		j	.L6
 916              	.LVL63:
 917              	.L34:
 918              	.LBE75:
 919              	.LBE80:
 920              	.LBE86:
 921              	.LBE93:
 922              	.LBE101:
 923              	.LBE109:
 924              	.LBE117:
 925              	.LBE127:
 926              	.LBE139:
 927              	.LBE151:
 928              	.LBE164:
 929              	.LBE181:
 930              	.LBE194:
 193:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 931              		.loc 1 193 9 is_stmt 1
 932              	.LBB195:
 933              	.LBB196:
 159:src/../h/riscv.hpp **** }
 934              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 935              		.loc 2 159 64 is_stmt 0
 936 02a8 93072000 		li	a5,2
 937              	#APP
 938              	# 159 "src/../h/riscv.hpp" 1
 160:src/../h/riscv.hpp **** 
 939              		csrc sip, a5
 940              	# 0 "" 2
 941              		.loc 2 160 1
 942              	#NO_APP
 943 02b0 6FF09FE8 		j	.L3
 944              	.LBE196:
 945              	.LBE195:
 946              	.LBE210:
GAS LISTING /tmp/ccZSl0rL.s 			page 28


 947              		.cfi_endproc
 948              	.LFE49:
 950              	.Letext0:
 951              		.file 4 "src/../h/../h/../lib/hw.h"
 952              		.file 5 "src/../h/../h/MemoryAllocator.hpp"
 953              		.file 6 "src/../h/../h/scheduler.hpp"
 954              		.file 7 "src/../h/../h/list.hpp"
 955              		.file 8 "src/../h/../h/Ksemaphore.hpp"
 956              		.file 9 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccZSl0rL.s 			page 29


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccZSl0rL.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccZSl0rL.s:13     .text:0000000000000000 .L0 
     /tmp/ccZSl0rL.s:14     .text:0000000000000000 .L0 
     /tmp/ccZSl0rL.s:15     .text:0000000000000004 .L0 
     /tmp/ccZSl0rL.s:17     .text:0000000000000008 .L0 
     /tmp/ccZSl0rL.s:19     .text:000000000000000c .L0 
     /tmp/ccZSl0rL.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/ccZSl0rL.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/ccZSl0rL.s:33     .text:0000000000000014 .L0 
     /tmp/ccZSl0rL.s:34     .text:0000000000000018 .L0 
     /tmp/ccZSl0rL.s:35     .text:0000000000000018 .L0 
     /tmp/ccZSl0rL.s:37     .text:000000000000001c .L0 
     /tmp/ccZSl0rL.s:39     .text:0000000000000020 .L0 
     /tmp/ccZSl0rL.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccZSl0rL.s:48     .text:0000000000000020 .L0 
     /tmp/ccZSl0rL.s:49     .text:0000000000000020 .L0 
     /tmp/ccZSl0rL.s:50     .text:0000000000000024 .L0 
     /tmp/ccZSl0rL.s:56     .text:0000000000000038 .L0 
     /tmp/ccZSl0rL.s:57     .text:0000000000000038 .L0 
     /tmp/ccZSl0rL.s:58     .text:0000000000000038 .L0 
     /tmp/ccZSl0rL.s:59     .text:0000000000000038 .L0 
     /tmp/ccZSl0rL.s:60     .text:0000000000000038 .L0 
     /tmp/ccZSl0rL.s:62     .text:000000000000003c .L0 
     /tmp/ccZSl0rL.s:67     .text:000000000000003c .L0 
     /tmp/ccZSl0rL.s:68     .text:000000000000003c .L0 
     /tmp/ccZSl0rL.s:69     .text:000000000000003c .L0 
  src/../h/riscv.hpp:107    .text:000000000000003c .L0 
     /tmp/ccZSl0rL.s:77     .text:0000000000000044 .L0 
     /tmp/ccZSl0rL.s:78     .text:0000000000000044 .L0 
     /tmp/ccZSl0rL.s:84     .text:0000000000000048 .L0 
     /tmp/ccZSl0rL.s:85     .text:0000000000000048 .L0 
     /tmp/ccZSl0rL.s:87     .text:000000000000004c .L0 
     /tmp/ccZSl0rL.s:90     .text:0000000000000054 .L0 
     /tmp/ccZSl0rL.s:95     .text:0000000000000064 .L0 
     /tmp/ccZSl0rL.s:100    .text:0000000000000074 .L0 
     /tmp/ccZSl0rL.s:101    .text:0000000000000074 .L0 
     /tmp/ccZSl0rL.s:105    .text:000000000000007c .L0 
     /tmp/ccZSl0rL.s:113    .text:0000000000000080 .L0 
     /tmp/ccZSl0rL.s:114    .text:0000000000000080 .L0 
     /tmp/ccZSl0rL.s:115    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000080 .L0 
     /tmp/ccZSl0rL.s:123    .text:0000000000000088 .L0 
     /tmp/ccZSl0rL.s:124    .text:0000000000000088 .L0 
     /tmp/ccZSl0rL.s:128    .text:000000000000008c .L0 
     /tmp/ccZSl0rL.s:133    .text:0000000000000090 .L0 
     /tmp/ccZSl0rL.s:134    .text:0000000000000090 .L0 
     /tmp/ccZSl0rL.s:135    .text:0000000000000090 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000090 .L0 
     /tmp/ccZSl0rL.s:143    .text:0000000000000098 .L0 
     /tmp/ccZSl0rL.s:144    .text:0000000000000098 .L0 
     /tmp/ccZSl0rL.s:151    .text:000000000000009c .L0 
     /tmp/ccZSl0rL.s:152    .text:000000000000009c .L0 
     /tmp/ccZSl0rL.s:153    .text:000000000000009c .L0 
GAS LISTING /tmp/ccZSl0rL.s 			page 30


  src/../h/riscv.hpp:200    .text:000000000000009c .L0 
     /tmp/ccZSl0rL.s:161    .text:00000000000000a4 .L0 
     /tmp/ccZSl0rL.s:162    .text:00000000000000a4 .L0 
     /tmp/ccZSl0rL.s:168    .text:00000000000000a8 .L0 
     /tmp/ccZSl0rL.s:179    .text:00000000000000b0 .L0 
     /tmp/ccZSl0rL.s:191    .text:00000000000000b8 .L0 
     /tmp/ccZSl0rL.s:205    .text:00000000000000c0 .L0 
     /tmp/ccZSl0rL.s:221    .text:00000000000000c8 .L0 
     /tmp/ccZSl0rL.s:239    .text:00000000000000d0 .L0 
     /tmp/ccZSl0rL.s:259    .text:00000000000000d8 .L0 
     /tmp/ccZSl0rL.s:281    .text:00000000000000e0 .L0 
     /tmp/ccZSl0rL.s:305    .text:00000000000000e8 .L0 
     /tmp/ccZSl0rL.s:331    .text:00000000000000f0 .L0 
     /tmp/ccZSl0rL.s:359    .text:00000000000000f8 .L0 
     /tmp/ccZSl0rL.s:389    .text:0000000000000100 .L0 
     /tmp/ccZSl0rL.s:421    .text:0000000000000108 .L0 
     /tmp/ccZSl0rL.s:425    .text:0000000000000110 .L0 
     /tmp/ccZSl0rL.s:426    .text:0000000000000110 .L0 
       src/riscv.cpp:168    .text:0000000000000110 .L0 
     /tmp/ccZSl0rL.s:433    .text:0000000000000114 .L0 
     /tmp/ccZSl0rL.s:435    .text:0000000000000114 .L0 
     /tmp/ccZSl0rL.s:455    .text:0000000000000120 .L0 
     /tmp/ccZSl0rL.s:456    .text:0000000000000120 .L0 
     /tmp/ccZSl0rL.s:457    .text:0000000000000120 .L0 
       src/riscv.cpp:28     .text:0000000000000120 .L0 
     /tmp/ccZSl0rL.s:464    .text:0000000000000124 .L0 
     /tmp/ccZSl0rL.s:466    .text:0000000000000124 .L0 
     /tmp/ccZSl0rL.s:469    .text:000000000000012c .L0 
       src/riscv.cpp:31     .text:000000000000012c .L0 
     /tmp/ccZSl0rL.s:482    .text:0000000000000130 .L0 
     /tmp/ccZSl0rL.s:483    .text:0000000000000130 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000130 .L0 
     /tmp/ccZSl0rL.s:495    .text:0000000000000134 .L0 
     /tmp/ccZSl0rL.s:496    .text:0000000000000134 .L0 
  src/../h/riscv.hpp:125    .text:0000000000000134 .L0 
     /tmp/ccZSl0rL.s:509    .text:0000000000000138 .L0 
     /tmp/ccZSl0rL.s:510    .text:000000000000013c .L0 
     /tmp/ccZSl0rL.s:511    .text:000000000000013c .L0 
     /tmp/ccZSl0rL.s:513    .text:0000000000000140 .L0 
     /tmp/ccZSl0rL.s:514    .text:0000000000000140 .L0 
     /tmp/ccZSl0rL.s:516    .text:0000000000000144 .L0 
     /tmp/ccZSl0rL.s:518    .text:0000000000000148 .L0 
     /tmp/ccZSl0rL.s:520    .text:000000000000014c .L0 
     /tmp/ccZSl0rL.s:522    .text:0000000000000150 .L0 
     /tmp/ccZSl0rL.s:526    .text:0000000000000154 .L0 
     /tmp/ccZSl0rL.s:533    .text:0000000000000154 .L0 
     /tmp/ccZSl0rL.s:534    .text:0000000000000154 .L0 
     /tmp/ccZSl0rL.s:535    .text:0000000000000154 .L0 
       src/riscv.cpp:37     .text:0000000000000154 .L0 
     /tmp/ccZSl0rL.s:542    .text:0000000000000158 .L0 
     /tmp/ccZSl0rL.s:544    .text:0000000000000158 .L0 
     /tmp/ccZSl0rL.s:547    .text:0000000000000160 .L0 
       src/riscv.cpp:40     .text:0000000000000160 .L0 
     /tmp/ccZSl0rL.s:560    .text:0000000000000168 .L0 
     /tmp/ccZSl0rL.s:561    .text:0000000000000168 .L0 
       src/riscv.cpp:48     .text:0000000000000168 .L0 
     /tmp/ccZSl0rL.s:568    .text:000000000000016c .L0 
GAS LISTING /tmp/ccZSl0rL.s 			page 31


     /tmp/ccZSl0rL.s:569    .text:000000000000016c .L0 
       src/riscv.cpp:50     .text:000000000000016c .L0 
     /tmp/ccZSl0rL.s:575    .text:0000000000000170 .L0 
     /tmp/ccZSl0rL.s:576    .text:0000000000000170 .L0 
       src/riscv.cpp:53     .text:0000000000000170 .L0 
     /tmp/ccZSl0rL.s:582    .text:0000000000000174 .L0 
     /tmp/ccZSl0rL.s:584    .text:0000000000000174 .L0 
     /tmp/ccZSl0rL.s:587    .text:000000000000017c .L0 
     /tmp/ccZSl0rL.s:589    .text:0000000000000180 .L0 
     /tmp/ccZSl0rL.s:590    .text:0000000000000180 .L0 
     /tmp/ccZSl0rL.s:595    .text:0000000000000188 .L0 
       src/riscv.cpp:58     .text:0000000000000188 .L0 
     /tmp/ccZSl0rL.s:607    .text:0000000000000190 .L0 
     /tmp/ccZSl0rL.s:615    .text:0000000000000198 .L0 
     /tmp/ccZSl0rL.s:616    .text:0000000000000198 .L0 
     /tmp/ccZSl0rL.s:617    .text:0000000000000198 .L0 
     /tmp/ccZSl0rL.s:620    .text:00000000000001a0 .L0 
       src/riscv.cpp:65     .text:00000000000001a0 .L0 
     /tmp/ccZSl0rL.s:632    .text:00000000000001a8 .L0 
     /tmp/ccZSl0rL.s:633    .text:00000000000001a8 .L0 
     /tmp/ccZSl0rL.s:637    .text:00000000000001b4 .L0 
     /tmp/ccZSl0rL.s:638    .text:00000000000001b4 .L0 
     /tmp/ccZSl0rL.s:646    .text:00000000000001c0 .L0 
     /tmp/ccZSl0rL.s:647    .text:00000000000001c0 .L0 
       src/riscv.cpp:76     .text:00000000000001c0 .L0 
     /tmp/ccZSl0rL.s:654    .text:00000000000001c4 .L0 
     /tmp/ccZSl0rL.s:656    .text:00000000000001c4 .L0 
     /tmp/ccZSl0rL.s:666    .text:00000000000001d4 .L0 
     /tmp/ccZSl0rL.s:667    .text:00000000000001d4 .L0 
       src/riscv.cpp:82     .text:00000000000001d4 .L0 
     /tmp/ccZSl0rL.s:674    .text:00000000000001d8 .L0 
     /tmp/ccZSl0rL.s:675    .text:00000000000001d8 .L0 
       src/riscv.cpp:84     .text:00000000000001d8 .L0 
     /tmp/ccZSl0rL.s:681    .text:00000000000001dc .L0 
     /tmp/ccZSl0rL.s:682    .text:00000000000001dc .L0 
       src/riscv.cpp:87     .text:00000000000001dc .L0 
     /tmp/ccZSl0rL.s:688    .text:00000000000001e0 .L0 
     /tmp/ccZSl0rL.s:690    .text:00000000000001e0 .L0 
     /tmp/ccZSl0rL.s:693    .text:00000000000001e8 .L0 
     /tmp/ccZSl0rL.s:695    .text:00000000000001ec .L0 
     /tmp/ccZSl0rL.s:696    .text:00000000000001ec .L0 
     /tmp/ccZSl0rL.s:701    .text:00000000000001f4 .L0 
       src/riscv.cpp:92     .text:00000000000001f4 .L0 
     /tmp/ccZSl0rL.s:713    .text:00000000000001fc .L0 
     /tmp/ccZSl0rL.s:721    .text:0000000000000204 .L0 
     /tmp/ccZSl0rL.s:722    .text:0000000000000204 .L0 
       src/riscv.cpp:98     .text:0000000000000204 .L0 
     /tmp/ccZSl0rL.s:731    .text:000000000000020c .L0 
     /tmp/ccZSl0rL.s:732    .text:000000000000020c .L0 
       src/riscv.cpp:101    .text:000000000000020c .L0 
     /tmp/ccZSl0rL.s:739    .text:0000000000000210 .L0 
     /tmp/ccZSl0rL.s:741    .text:0000000000000210 .L0 
     /tmp/ccZSl0rL.s:744    .text:0000000000000218 .L0 
     /tmp/ccZSl0rL.s:746    .text:000000000000021c .L0 
     /tmp/ccZSl0rL.s:747    .text:000000000000021c .L0 
     /tmp/ccZSl0rL.s:752    .text:0000000000000224 .L0 
       src/riscv.cpp:105    .text:0000000000000224 .L0 
GAS LISTING /tmp/ccZSl0rL.s 			page 32


     /tmp/ccZSl0rL.s:764    .text:000000000000022c .L0 
     /tmp/ccZSl0rL.s:772    .text:0000000000000234 .L0 
     /tmp/ccZSl0rL.s:773    .text:0000000000000234 .L0 
     /tmp/ccZSl0rL.s:774    .text:0000000000000234 .L0 
       src/riscv.cpp:113    .text:0000000000000234 .L0 
     /tmp/ccZSl0rL.s:781    .text:0000000000000238 .L0 
     /tmp/ccZSl0rL.s:783    .text:0000000000000238 .L0 
     /tmp/ccZSl0rL.s:785    .text:000000000000023c .L0 
     /tmp/ccZSl0rL.s:786    .text:000000000000023c .L0 
     /tmp/ccZSl0rL.s:789    .text:0000000000000244 .L0 
     /tmp/ccZSl0rL.s:793    .text:0000000000000248 .L0 
       src/riscv.cpp:122    .text:0000000000000248 .L0 
     /tmp/ccZSl0rL.s:805    .text:0000000000000250 .L0 
     /tmp/ccZSl0rL.s:814    .text:0000000000000258 .L0 
     /tmp/ccZSl0rL.s:815    .text:0000000000000258 .L0 
     /tmp/ccZSl0rL.s:816    .text:0000000000000258 .L0 
       src/riscv.cpp:130    .text:0000000000000258 .L0 
     /tmp/ccZSl0rL.s:824    .text:000000000000025c .L0 
     /tmp/ccZSl0rL.s:826    .text:0000000000000260 .L0 
     /tmp/ccZSl0rL.s:827    .text:0000000000000260 .L0 
     /tmp/ccZSl0rL.s:831    .text:0000000000000268 .L0 
       src/riscv.cpp:140    .text:0000000000000268 .L0 
     /tmp/ccZSl0rL.s:843    .text:0000000000000270 .L0 
     /tmp/ccZSl0rL.s:851    .text:0000000000000278 .L0 
     /tmp/ccZSl0rL.s:852    .text:0000000000000278 .L0 
     /tmp/ccZSl0rL.s:853    .text:0000000000000278 .L0 
       src/riscv.cpp:148    .text:0000000000000278 .L0 
     /tmp/ccZSl0rL.s:861    .text:000000000000027c .L0 
     /tmp/ccZSl0rL.s:863    .text:0000000000000280 .L0 
     /tmp/ccZSl0rL.s:864    .text:0000000000000280 .L0 
     /tmp/ccZSl0rL.s:868    .text:0000000000000288 .L0 
       src/riscv.cpp:155    .text:0000000000000288 .L0 
     /tmp/ccZSl0rL.s:880    .text:0000000000000290 .L0 
     /tmp/ccZSl0rL.s:888    .text:0000000000000298 .L0 
     /tmp/ccZSl0rL.s:889    .text:0000000000000298 .L0 
     /tmp/ccZSl0rL.s:890    .text:0000000000000298 .L0 
       src/riscv.cpp:160    .text:0000000000000298 .L0 
     /tmp/ccZSl0rL.s:901    .text:000000000000029c .L0 
     /tmp/ccZSl0rL.s:902    .text:000000000000029c .L0 
     /tmp/ccZSl0rL.s:903    .text:000000000000029c .L0 
     /tmp/ccZSl0rL.s:908    .text:00000000000002a0 .L0 
       src/riscv.cpp:163    .text:00000000000002a0 .L0 
     /tmp/ccZSl0rL.s:934    .text:00000000000002a8 .L0 
     /tmp/ccZSl0rL.s:935    .text:00000000000002a8 .L0 
     /tmp/ccZSl0rL.s:936    .text:00000000000002a8 .L0 
     /tmp/ccZSl0rL.s:943    .text:00000000000002b0 .L0 
     /tmp/ccZSl0rL.s:947    .text:00000000000002b4 .L0 
     /tmp/ccZSl0rL.s:957    .text:00000000000002b4 .L0 
     /tmp/ccZSl0rL.s:633    .text:00000000000001a8 .L0 
     /tmp/ccZSl0rL.s:107    .text:0000000000000080 .L33
     /tmp/ccZSl0rL.s:917    .text:00000000000002a8 .L34
     /tmp/ccZSl0rL.s:503    .text:0000000000000138 .L3
     /tmp/ccZSl0rL.s:440    .text:0000000000000120 .L35
     /tmp/ccZSl0rL.s:525    .text:0000000000000154 .L36
     /tmp/ccZSl0rL.s:556    .text:0000000000000168 .L37
     /tmp/ccZSl0rL.s:610    .text:0000000000000198 .L38
     /tmp/ccZSl0rL.s:629    .text:00000000000001a8 .L39
GAS LISTING /tmp/ccZSl0rL.s 			page 33


     /tmp/ccZSl0rL.s:642    .text:00000000000001c0 .L40
     /tmp/ccZSl0rL.s:662    .text:00000000000001d4 .L41
     /tmp/ccZSl0rL.s:716    .text:0000000000000204 .L42
     /tmp/ccZSl0rL.s:767    .text:0000000000000234 .L43
     /tmp/ccZSl0rL.s:809    .text:0000000000000258 .L44
     /tmp/ccZSl0rL.s:846    .text:0000000000000278 .L45
     /tmp/ccZSl0rL.s:883    .text:0000000000000298 .L46
     /tmp/ccZSl0rL.s:476    .text:0000000000000130 .L6
     /tmp/ccZSl0rL.s:604    .text:0000000000000190 .L26
     /tmp/ccZSl0rL.s:592    .text:0000000000000188 .L9
     /tmp/ccZSl0rL.s:710    .text:00000000000001fc .L27
     /tmp/ccZSl0rL.s:698    .text:00000000000001f4 .L14
     /tmp/ccZSl0rL.s:761    .text:000000000000022c .L28
     /tmp/ccZSl0rL.s:749    .text:0000000000000224 .L16
     /tmp/ccZSl0rL.s:802    .text:0000000000000250 .L29
     /tmp/ccZSl0rL.s:790    .text:0000000000000248 .L18
     /tmp/ccZSl0rL.s:840    .text:0000000000000270 .L30
     /tmp/ccZSl0rL.s:829    .text:0000000000000268 .L20
     /tmp/ccZSl0rL.s:877    .text:0000000000000290 .L31
     /tmp/ccZSl0rL.s:866    .text:0000000000000288 .L22
     /tmp/ccZSl0rL.s:2799   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccZSl0rL.s:4664   .debug_str:00000000000009c7 .LASF190
     /tmp/ccZSl0rL.s:4722   .debug_str:0000000000000c40 .LASF191
     /tmp/ccZSl0rL.s:4450   .debug_str:0000000000000327 .LASF192
     /tmp/ccZSl0rL.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccZSl0rL.s:950    .text:00000000000002b4 .Letext0
     /tmp/ccZSl0rL.s:4346   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccZSl0rL.s:4478   .debug_str:000000000000040e .LASF0
     /tmp/ccZSl0rL.s:4508   .debug_str:000000000000050b .LASF1
     /tmp/ccZSl0rL.s:4604   .debug_str:0000000000000834 .LASF2
     /tmp/ccZSl0rL.s:4610   .debug_str:0000000000000864 .LASF4
     /tmp/ccZSl0rL.s:4486   .debug_str:0000000000000442 .LASF3
     /tmp/ccZSl0rL.s:4364   .debug_str:0000000000000082 .LASF5
     /tmp/ccZSl0rL.s:4572   .debug_str:0000000000000719 .LASF6
     /tmp/ccZSl0rL.s:4498   .debug_str:00000000000004cc .LASF7
     /tmp/ccZSl0rL.s:4448   .debug_str:0000000000000317 .LASF8
     /tmp/ccZSl0rL.s:4458   .debug_str:000000000000037d .LASF9
     /tmp/ccZSl0rL.s:4390   .debug_str:000000000000015b .LASF10
     /tmp/ccZSl0rL.s:4436   .debug_str:00000000000002ba .LASF11
     /tmp/ccZSl0rL.s:4404   .debug_str:00000000000001af .LASF12
     /tmp/ccZSl0rL.s:4388   .debug_str:000000000000014b .LASF13
     /tmp/ccZSl0rL.s:4648   .debug_str:0000000000000985 .LASF14
     /tmp/ccZSl0rL.s:4422   .debug_str:0000000000000218 .LASF15
     /tmp/ccZSl0rL.s:4634   .debug_str:00000000000008f6 .LASF16
     /tmp/ccZSl0rL.s:4568   .debug_str:00000000000006fd .LASF30
     /tmp/ccZSl0rL.s:4374   .debug_str:00000000000000c3 .LASF66
     /tmp/ccZSl0rL.s:4392   .debug_str:000000000000016a .LASF17
     /tmp/ccZSl0rL.s:4372   .debug_str:00000000000000be .LASF18
     /tmp/ccZSl0rL.s:4506   .debug_str:0000000000000506 .LASF19
     /tmp/ccZSl0rL.s:4394   .debug_str:000000000000016f .LASF20
     /tmp/ccZSl0rL.s:4550   .debug_str:0000000000000682 .LASF21
     /tmp/ccZSl0rL.s:4630   .debug_str:00000000000008df .LASF22
     /tmp/ccZSl0rL.s:4468   .debug_str:00000000000003c0 .LASF23
     /tmp/ccZSl0rL.s:4574   .debug_str:000000000000072c .LASF25
     /tmp/ccZSl0rL.s:4672   .debug_str:0000000000000ab4 .LASF24
     /tmp/ccZSl0rL.s:4420   .debug_str:00000000000001f7 .LASF26
     /tmp/ccZSl0rL.s:4716   .debug_str:0000000000000c0f .LASF90
GAS LISTING /tmp/ccZSl0rL.s 			page 34


     /tmp/ccZSl0rL.s:4540   .debug_str:000000000000062b .LASF92
     /tmp/ccZSl0rL.s:4350   .debug_str:000000000000000f .LASF32
     /tmp/ccZSl0rL.s:4514   .debug_str:000000000000052f .LASF34
     /tmp/ccZSl0rL.s:4678   .debug_str:0000000000000ae2 .LASF27
     /tmp/ccZSl0rL.s:4488   .debug_str:0000000000000454 .LASF28
     /tmp/ccZSl0rL.s:4656   .debug_str:00000000000009ab .LASF29
     /tmp/ccZSl0rL.s:4446   .debug_str:000000000000030d .LASF31
     /tmp/ccZSl0rL.s:4744   .debug_str:0000000000000d22 .LASF33
     /tmp/ccZSl0rL.s:4378   .debug_str:00000000000000df .LASF35
     /tmp/ccZSl0rL.s:4354   .debug_str:000000000000001b .LASF36
     /tmp/ccZSl0rL.s:4566   .debug_str:00000000000006ea .LASF37
     /tmp/ccZSl0rL.s:4628   .debug_str:00000000000008ce .LASF38
     /tmp/ccZSl0rL.s:4402   .debug_str:00000000000001a6 .LASF39
     /tmp/ccZSl0rL.s:4732   .debug_str:0000000000000c92 .LASF40
     /tmp/ccZSl0rL.s:4736   .debug_str:0000000000000cc5 .LASF193
     /tmp/ccZSl0rL.s:4470   .debug_str:00000000000003c6 .LASF194
     /tmp/ccZSl0rL.s:4418   .debug_str:00000000000001ef .LASF41
     /tmp/ccZSl0rL.s:4386   .debug_str:0000000000000133 .LASF43
     /tmp/ccZSl0rL.s:4444   .debug_str:0000000000000305 .LASF42
     /tmp/ccZSl0rL.s:4710   .debug_str:0000000000000bea .LASF44
     /tmp/ccZSl0rL.s:4724   .debug_str:0000000000000c4e .LASF45
     /tmp/ccZSl0rL.s:4496   .debug_str:00000000000004af .LASF46
     /tmp/ccZSl0rL.s:4700   .debug_str:0000000000000bb1 .LASF47
     /tmp/ccZSl0rL.s:4686   .debug_str:0000000000000b16 .LASF195
     /tmp/ccZSl0rL.s:4640   .debug_str:0000000000000926 .LASF48
     /tmp/ccZSl0rL.s:4542   .debug_str:0000000000000657 .LASF49
     /tmp/ccZSl0rL.s:4636   .debug_str:000000000000090c .LASF50
     /tmp/ccZSl0rL.s:4434   .debug_str:00000000000002a3 .LASF58
     /tmp/ccZSl0rL.s:4606   .debug_str:0000000000000842 .LASF196
     /tmp/ccZSl0rL.s:4598   .debug_str:0000000000000802 .LASF197
     /tmp/ccZSl0rL.s:4580   .debug_str:0000000000000774 .LASF51
     /tmp/ccZSl0rL.s:4552   .debug_str:0000000000000687 .LASF52
     /tmp/ccZSl0rL.s:4504   .debug_str:00000000000004fd .LASF53
     /tmp/ccZSl0rL.s:4382   .debug_str:00000000000000ff .LASF54
     /tmp/ccZSl0rL.s:4528   .debug_str:00000000000005bc .LASF55
     /tmp/ccZSl0rL.s:4426   .debug_str:0000000000000254 .LASF56
     /tmp/ccZSl0rL.s:4570   .debug_str:000000000000070d .LASF57
     /tmp/ccZSl0rL.s:4702   .debug_str:0000000000000bbb .LASF59
     /tmp/ccZSl0rL.s:4752   .debug_str:0000000000000d4b .LASF60
     /tmp/ccZSl0rL.s:4738   .debug_str:0000000000000cd9 .LASF61
     /tmp/ccZSl0rL.s:4624   .debug_str:00000000000008af .LASF62
     /tmp/ccZSl0rL.s:4538   .debug_str:000000000000060e .LASF63
     /tmp/ccZSl0rL.s:4594   .debug_str:00000000000007f4 .LASF64
     /tmp/ccZSl0rL.s:4358   .debug_str:0000000000000034 .LASF65
     /tmp/ccZSl0rL.s:4652   .debug_str:0000000000000998 .LASF67
     /tmp/ccZSl0rL.s:4380   .debug_str:00000000000000f1 .LASF105
     /tmp/ccZSl0rL.s:4518   .debug_str:000000000000055a .LASF107
     /tmp/ccZSl0rL.s:4400   .debug_str:000000000000019a .LASF98
     /tmp/ccZSl0rL.s:4612   .debug_str:000000000000086b .LASF68
     /tmp/ccZSl0rL.s:4362   .debug_str:0000000000000076 .LASF69
     /tmp/ccZSl0rL.s:4654   .debug_str:00000000000009a0 .LASF70
     /tmp/ccZSl0rL.s:4546   .debug_str:0000000000000663 .LASF71
     /tmp/ccZSl0rL.s:4376   .debug_str:00000000000000d3 .LASF72
     /tmp/ccZSl0rL.s:4680   .debug_str:0000000000000ae7 .LASF73
     /tmp/ccZSl0rL.s:4516   .debug_str:000000000000054d .LASF74
     /tmp/ccZSl0rL.s:4690   .debug_str:0000000000000b3f .LASF75
     /tmp/ccZSl0rL.s:4562   .debug_str:00000000000006d4 .LASF185
GAS LISTING /tmp/ccZSl0rL.s 			page 35


     /tmp/ccZSl0rL.s:4588   .debug_str:00000000000007c5 .LASF76
     /tmp/ccZSl0rL.s:4534   .debug_str:00000000000005e6 .LASF77
     /tmp/ccZSl0rL.s:4544   .debug_str:000000000000065c .LASF78
     /tmp/ccZSl0rL.s:4370   .debug_str:00000000000000ad .LASF79
     /tmp/ccZSl0rL.s:4708   .debug_str:0000000000000be4 .LASF80
     /tmp/ccZSl0rL.s:4524   .debug_str:0000000000000593 .LASF81
     /tmp/ccZSl0rL.s:4454   .debug_str:0000000000000355 .LASF82
     /tmp/ccZSl0rL.s:4532   .debug_str:00000000000005d9 .LASF83
     /tmp/ccZSl0rL.s:4646   .debug_str:0000000000000978 .LASF84
     /tmp/ccZSl0rL.s:4692   .debug_str:0000000000000b58 .LASF85
     /tmp/ccZSl0rL.s:4424   .debug_str:000000000000022e .LASF86
     /tmp/ccZSl0rL.s:4642   .debug_str:000000000000092b .LASF87
     /tmp/ccZSl0rL.s:4432   .debug_str:0000000000000294 .LASF88
     /tmp/ccZSl0rL.s:4674   .debug_str:0000000000000abe .LASF89
     /tmp/ccZSl0rL.s:4512   .debug_str:0000000000000529 .LASF91
     /tmp/ccZSl0rL.s:4668   .debug_str:0000000000000a9a .LASF93
     /tmp/ccZSl0rL.s:4740   .debug_str:0000000000000cf4 .LASF94
     /tmp/ccZSl0rL.s:4734   .debug_str:0000000000000ca4 .LASF95
     /tmp/ccZSl0rL.s:4662   .debug_str:00000000000009bf .LASF96
     /tmp/ccZSl0rL.s:4464   .debug_str:00000000000003a8 .LASF97
     /tmp/ccZSl0rL.s:4582   .debug_str:0000000000000787 .LASF99
     /tmp/ccZSl0rL.s:4352   .debug_str:0000000000000016 .LASF100
     /tmp/ccZSl0rL.s:4412   .debug_str:00000000000001db .LASF101
     /tmp/ccZSl0rL.s:4676   .debug_str:0000000000000ada .LASF102
     /tmp/ccZSl0rL.s:4670   .debug_str:0000000000000aaa .LASF103
     /tmp/ccZSl0rL.s:4632   .debug_str:00000000000008ed .LASF104
     /tmp/ccZSl0rL.s:4408   .debug_str:00000000000001c6 .LASF198
     /tmp/ccZSl0rL.s:4360   .debug_str:000000000000004e .LASF199
     /tmp/ccZSl0rL.s:4414   .debug_str:00000000000001e1 .LASF106
     /tmp/ccZSl0rL.s:4494   .debug_str:000000000000049c .LASF108
     /tmp/ccZSl0rL.s:4728   .debug_str:0000000000000c70 .LASF109
     /tmp/ccZSl0rL.s:4688   .debug_str:0000000000000b1b .LASF110
     /tmp/ccZSl0rL.s:4746   .debug_str:0000000000000d2f .LASF111
     /tmp/ccZSl0rL.s:4578   .debug_str:000000000000075e .LASF112
     /tmp/ccZSl0rL.s:4658   .debug_str:00000000000009b0 .LASF113
     /tmp/ccZSl0rL.s:4348   .debug_str:0000000000000000 .LASF114
     /tmp/ccZSl0rL.s:4622   .debug_str:000000000000089e .LASF115
     /tmp/ccZSl0rL.s:4356   .debug_str:000000000000002b .LASF116
     /tmp/ccZSl0rL.s:4596   .debug_str:00000000000007fd .LASF117
     /tmp/ccZSl0rL.s:4510   .debug_str:000000000000051e .LASF118
     /tmp/ccZSl0rL.s:4560   .debug_str:00000000000006c0 .LASF119
     /tmp/ccZSl0rL.s:4416   .debug_str:00000000000001ea .LASF120
     /tmp/ccZSl0rL.s:4384   .debug_str:000000000000011c .LASF121
     /tmp/ccZSl0rL.s:4650   .debug_str:0000000000000991 .LASF122
     /tmp/ccZSl0rL.s:4368   .debug_str:0000000000000094 .LASF123
     /tmp/ccZSl0rL.s:4466   .debug_str:00000000000003ba .LASF124
     /tmp/ccZSl0rL.s:4526   .debug_str:00000000000005a3 .LASF125
     /tmp/ccZSl0rL.s:4600   .debug_str:0000000000000819 .LASF126
     /tmp/ccZSl0rL.s:4438   .debug_str:00000000000002c9 .LASF127
     /tmp/ccZSl0rL.s:4666   .debug_str:0000000000000a8b .LASF128
     /tmp/ccZSl0rL.s:4586   .debug_str:00000000000007a3 .LASF129
     /tmp/ccZSl0rL.s:4476   .debug_str:0000000000000408 .LASF130
     /tmp/ccZSl0rL.s:4520   .debug_str:0000000000000573 .LASF131
     /tmp/ccZSl0rL.s:4554   .debug_str:000000000000069b .LASF132
     /tmp/ccZSl0rL.s:4694   .debug_str:0000000000000b78 .LASF133
     /tmp/ccZSl0rL.s:4626   .debug_str:00000000000008ba .LASF134
     /tmp/ccZSl0rL.s:4718   .debug_str:0000000000000c23 .LASF135
GAS LISTING /tmp/ccZSl0rL.s 			page 36


     /tmp/ccZSl0rL.s:4556   .debug_str:00000000000006a3 .LASF136
     /tmp/ccZSl0rL.s:4704   .debug_str:0000000000000bd9 .LASF137
     /tmp/ccZSl0rL.s:4502   .debug_str:00000000000004f2 .LASF200
     /tmp/ccZSl0rL.s:4490   .debug_str:0000000000000471 .LASF138
     /tmp/ccZSl0rL.s:4430   .debug_str:000000000000028b .LASF139
     /tmp/ccZSl0rL.s:4730   .debug_str:0000000000000c89 .LASF140
     /tmp/ccZSl0rL.s:4462   .debug_str:000000000000039d .LASF141
     /tmp/ccZSl0rL.s:4474   .debug_str:00000000000003f0 .LASF142
     /tmp/ccZSl0rL.s:4620   .debug_str:0000000000000890 .LASF143
     /tmp/ccZSl0rL.s:4428   .debug_str:0000000000000270 .LASF144
     /tmp/ccZSl0rL.s:4480   .debug_str:000000000000041b .LASF145
     /tmp/ccZSl0rL.s:4696   .debug_str:0000000000000b92 .LASF146
     /tmp/ccZSl0rL.s:4684   .debug_str:0000000000000b0d .LASF147
     /tmp/ccZSl0rL.s:4530   .debug_str:00000000000005c4 .LASF148
     /tmp/ccZSl0rL.s:4748   .debug_str:0000000000000d3a .LASF149
     /tmp/ccZSl0rL.s:4558   .debug_str:00000000000006ab .LASF150
     /tmp/ccZSl0rL.s:4584   .debug_str:000000000000079c .LASF151
     /tmp/ccZSl0rL.s:4590   .debug_str:00000000000007cd .LASF152
     /tmp/ccZSl0rL.s:4406   .debug_str:00000000000001bf .LASF153
     /tmp/ccZSl0rL.s:4500   .debug_str:00000000000004df .LASF154
     /tmp/ccZSl0rL.s:4720   .debug_str:0000000000000c38 .LASF155
     /tmp/ccZSl0rL.s:4644   .debug_str:0000000000000964 .LASF156
     /tmp/ccZSl0rL.s:4548   .debug_str:000000000000067a .LASF157
     /tmp/ccZSl0rL.s:4440   .debug_str:00000000000002ec .LASF158
     /tmp/ccZSl0rL.s:4522   .debug_str:000000000000058b .LASF159
     /tmp/ccZSl0rL.s:4592   .debug_str:00000000000007e0 .LASF160
     /tmp/ccZSl0rL.s:4750   .debug_str:0000000000000d43 .LASF161
     /tmp/ccZSl0rL.s:4484   .debug_str:000000000000042e .LASF162
     /tmp/ccZSl0rL.s:4410   .debug_str:00000000000001d4 .LASF163
     /tmp/ccZSl0rL.s:4616   .debug_str:0000000000000876 .LASF164
     /tmp/ccZSl0rL.s:4618   .debug_str:0000000000000889 .LASF165
     /tmp/ccZSl0rL.s:4398   .debug_str:0000000000000187 .LASF166
     /tmp/ccZSl0rL.s:4614   .debug_str:0000000000000870 .LASF167
     /tmp/ccZSl0rL.s:4472   .debug_str:00000000000003de .LASF168
     /tmp/ccZSl0rL.s:4482   .debug_str:0000000000000428 .LASF169
     /tmp/ccZSl0rL.s:4460   .debug_str:000000000000038b .LASF170
     /tmp/ccZSl0rL.s:4366   .debug_str:0000000000000089 .LASF171
     /tmp/ccZSl0rL.s:4608   .debug_str:000000000000084c .LASF172
     /tmp/ccZSl0rL.s:4602   .debug_str:0000000000000829 .LASF173
     /tmp/ccZSl0rL.s:4742   .debug_str:0000000000000d0a .LASF174
     /tmp/ccZSl0rL.s:4660   .debug_str:00000000000009b5 .LASF175
     /tmp/ccZSl0rL.s:4726   .debug_str:0000000000000c5a .LASF176
     /tmp/ccZSl0rL.s:4396   .debug_str:000000000000017d .LASF177
     /tmp/ccZSl0rL.s:4536   .debug_str:00000000000005f8 .LASF178
     /tmp/ccZSl0rL.s:4714   .debug_str:0000000000000c0a .LASF179
     /tmp/ccZSl0rL.s:4564   .debug_str:00000000000006d9 .LASF180
     /tmp/ccZSl0rL.s:4682   .debug_str:0000000000000afe .LASF181
     /tmp/ccZSl0rL.s:4456   .debug_str:0000000000000361 .LASF182
     /tmp/ccZSl0rL.s:4576   .debug_str:0000000000000749 .LASF183
     /tmp/ccZSl0rL.s:4492   .debug_str:000000000000047a .LASF184
     /tmp/ccZSl0rL.s:46     .text:0000000000000020 .LFB49
     /tmp/ccZSl0rL.s:948    .text:00000000000002b4 .LFE49
     /tmp/ccZSl0rL.s:4638   .debug_str:000000000000091f .LASF186
     /tmp/ccZSl0rL.s:3879   .debug_loc:0000000000000000 .LLST0
     /tmp/ccZSl0rL.s:4278   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccZSl0rL.s:4706   .debug_str:0000000000000bdf .LASF187
     /tmp/ccZSl0rL.s:3972   .debug_loc:000000000000015a .LLST1
GAS LISTING /tmp/ccZSl0rL.s 			page 37


     /tmp/ccZSl0rL.s:4712   .debug_str:0000000000000c02 .LASF188
     /tmp/ccZSl0rL.s:3983   .debug_loc:0000000000000190 .LLST2
     /tmp/ccZSl0rL.s:3994   .debug_loc:00000000000001c6 .LLST3
     /tmp/ccZSl0rL.s:453    .text:0000000000000120 .LBB163
     /tmp/ccZSl0rL.s:477    .text:0000000000000130 .LBE163
     /tmp/ccZSl0rL.s:4061   .debug_loc:0000000000000306 .LLST27
     /tmp/ccZSl0rL.s:4068   .debug_loc:0000000000000329 .LLST28
     /tmp/ccZSl0rL.s:467    .text:000000000000012c .LVL11
     /tmp/ccZSl0rL.s:531    .text:0000000000000154 .LBB150
     /tmp/ccZSl0rL.s:553    .text:0000000000000164 .LBE150
     /tmp/ccZSl0rL.s:4075   .debug_loc:000000000000034c .LLST25
     /tmp/ccZSl0rL.s:4082   .debug_loc:000000000000036f .LLST26
     /tmp/ccZSl0rL.s:545    .text:0000000000000160 .LVL17
     /tmp/ccZSl0rL.s:4089   .debug_loc:0000000000000392 .LLST22
     /tmp/ccZSl0rL.s:4096   .debug_loc:00000000000003b5 .LLST23
     /tmp/ccZSl0rL.s:4103   .debug_loc:00000000000003d8 .LLST24
     /tmp/ccZSl0rL.s:585    .text:000000000000017c .LVL22
     /tmp/ccZSl0rL.s:613    .text:0000000000000198 .LBB126
     /tmp/ccZSl0rL.s:626    .text:00000000000001a4 .LBE126
     /tmp/ccZSl0rL.s:4110   .debug_loc:00000000000003fb .LLST21
     /tmp/ccZSl0rL.s:618    .text:00000000000001a0 .LVL26
     /tmp/ccZSl0rL.s:644    .text:00000000000001c0 .LBB108
     /tmp/ccZSl0rL.s:659    .text:00000000000001d0 .LBE108
     /tmp/ccZSl0rL.s:4117   .debug_loc:000000000000041e .LLST20
     /tmp/ccZSl0rL.s:658    .text:00000000000001d0 .LVL32
     /tmp/ccZSl0rL.s:4124   .debug_loc:0000000000000441 .LLST17
     /tmp/ccZSl0rL.s:4131   .debug_loc:0000000000000464 .LLST18
     /tmp/ccZSl0rL.s:4138   .debug_loc:0000000000000487 .LLST19
     /tmp/ccZSl0rL.s:691    .text:00000000000001e8 .LVL37
     /tmp/ccZSl0rL.s:4145   .debug_loc:00000000000004aa .LLST14
     /tmp/ccZSl0rL.s:4152   .debug_loc:00000000000004cd .LLST15
     /tmp/ccZSl0rL.s:4159   .debug_loc:00000000000004f0 .LLST16
     /tmp/ccZSl0rL.s:742    .text:0000000000000218 .LVL43
     /tmp/ccZSl0rL.s:4166   .debug_loc:0000000000000513 .LLST12
     /tmp/ccZSl0rL.s:4183   .debug_loc:000000000000055e .LLST13
     /tmp/ccZSl0rL.s:787    .text:0000000000000244 .LVL48
     /tmp/ccZSl0rL.s:4194   .debug_loc:0000000000000594 .LLST10
     /tmp/ccZSl0rL.s:4201   .debug_loc:00000000000005b7 .LLST11
     /tmp/ccZSl0rL.s:828    .text:0000000000000268 .LVL54
     /tmp/ccZSl0rL.s:4212   .debug_loc:00000000000005ed .LLST8
     /tmp/ccZSl0rL.s:4219   .debug_loc:0000000000000610 .LLST9
     /tmp/ccZSl0rL.s:865    .text:0000000000000288 .LVL58
     /tmp/ccZSl0rL.s:886    .text:0000000000000298 .LBB69
     /tmp/ccZSl0rL.s:914    .text:00000000000002a4 .LBE69
     /tmp/ccZSl0rL.s:4230   .debug_loc:0000000000000646 .LLST5
     /tmp/ccZSl0rL.s:4237   .debug_loc:0000000000000669 .LLST6
     /tmp/ccZSl0rL.s:898    .text:000000000000029c .LBB70
     /tmp/ccZSl0rL.s:906    .text:00000000000002a0 .LBE70
     /tmp/ccZSl0rL.s:423    .text:0000000000000110 .LBB68
     /tmp/ccZSl0rL.s:437    .text:000000000000011c .LBE68
     /tmp/ccZSl0rL.s:4244   .debug_loc:000000000000068c .LLST4
     /tmp/ccZSl0rL.s:436    .text:000000000000011c .LVL8
     /tmp/ccZSl0rL.s:111    .text:0000000000000080 .LBB49
     /tmp/ccZSl0rL.s:126    .text:000000000000008c .LBE49
     /tmp/ccZSl0rL.s:131    .text:0000000000000090 .LBB51
     /tmp/ccZSl0rL.s:147    .text:000000000000009c .LBE51
     /tmp/ccZSl0rL.s:149    .text:000000000000009c .LBB53
GAS LISTING /tmp/ccZSl0rL.s 			page 38


     /tmp/ccZSl0rL.s:165    .text:00000000000000a8 .LBE53
     /tmp/ccZSl0rL.s:480    .text:0000000000000130 .LBB177
     /tmp/ccZSl0rL.s:491    .text:0000000000000134 .LBE177
     /tmp/ccZSl0rL.s:4251   .debug_loc:00000000000006af .LLST29
     /tmp/ccZSl0rL.s:493    .text:0000000000000134 .LBB179
     /tmp/ccZSl0rL.s:505    .text:0000000000000138 .LBE179
     /tmp/ccZSl0rL.s:4258   .debug_loc:00000000000006d2 .LLST30
     /tmp/ccZSl0rL.s:639    .text:00000000000001bc .LVL29
     /tmp/ccZSl0rL.s:64     .text:000000000000003c .LBB45
     /tmp/ccZSl0rL.s:81     .text:0000000000000048 .LBE45
     /tmp/ccZSl0rL.s:932    .text:00000000000002a8 .LBB195
     /tmp/ccZSl0rL.s:945    .text:00000000000002b4 .LBE195
     /tmp/ccZSl0rL.s:102    .text:000000000000007c .LVL1
     /tmp/ccZSl0rL.s:10     .text:0000000000000000 .LFB48
     /tmp/ccZSl0rL.s:40     .text:0000000000000020 .LFE48
     /tmp/ccZSl0rL.s:4698   .debug_str:0000000000000bac .LASF189
     /tmp/ccZSl0rL.s:4442   .debug_str:0000000000000300 .LASF201
     /tmp/ccZSl0rL.s:4452   .debug_str:0000000000000345 .LASF202
     /tmp/ccZSl0rL.s:79     .text:0000000000000048 .LVL0
     /tmp/ccZSl0rL.s:106    .text:0000000000000080 .LVL2
     /tmp/ccZSl0rL.s:169    .text:00000000000000ac .LVL6
     /tmp/ccZSl0rL.s:439    .text:0000000000000120 .LVL9
     /tmp/ccZSl0rL.s:524    .text:0000000000000154 .LVL15
     /tmp/ccZSl0rL.s:555    .text:0000000000000168 .LVL18
     /tmp/ccZSl0rL.s:609    .text:0000000000000198 .LVL25
     /tmp/ccZSl0rL.s:628    .text:00000000000001a8 .LVL27
     /tmp/ccZSl0rL.s:641    .text:00000000000001c0 .LVL30
     /tmp/ccZSl0rL.s:661    .text:00000000000001d4 .LVL33
     /tmp/ccZSl0rL.s:715    .text:0000000000000204 .LVL40
     /tmp/ccZSl0rL.s:766    .text:0000000000000234 .LVL46
     /tmp/ccZSl0rL.s:801    .text:0000000000000250 .LVL50
     /tmp/ccZSl0rL.s:839    .text:0000000000000270 .LVL55
     /tmp/ccZSl0rL.s:876    .text:0000000000000290 .LVL59
     /tmp/ccZSl0rL.s:916    .text:00000000000002a8 .LVL63
     /tmp/ccZSl0rL.s:129    .text:0000000000000090 .LVL3
     /tmp/ccZSl0rL.s:501    .text:0000000000000138 .LVL14
     /tmp/ccZSl0rL.s:145    .text:000000000000009c .LVL4
     /tmp/ccZSl0rL.s:163    .text:00000000000000a8 .LVL5
     /tmp/ccZSl0rL.s:593    .text:0000000000000188 .LVL23
     /tmp/ccZSl0rL.s:603    .text:0000000000000190 .LVL24
     /tmp/ccZSl0rL.s:634    .text:00000000000001b0 .LVL28
     /tmp/ccZSl0rL.s:652    .text:00000000000001c4 .LVL31
     /tmp/ccZSl0rL.s:699    .text:00000000000001f4 .LVL38
     /tmp/ccZSl0rL.s:709    .text:00000000000001fc .LVL39
     /tmp/ccZSl0rL.s:806    .text:0000000000000254 .LVL51
     /tmp/ccZSl0rL.s:808    .text:0000000000000258 .LVL52
     /tmp/ccZSl0rL.s:895    .text:000000000000029c .LVL61
     /tmp/ccZSl0rL.s:462    .text:0000000000000124 .LVL10
     /tmp/ccZSl0rL.s:474    .text:0000000000000130 .LVL12
     /tmp/ccZSl0rL.s:540    .text:0000000000000158 .LVL16
     /tmp/ccZSl0rL.s:566    .text:000000000000016c .LVL19
     /tmp/ccZSl0rL.s:573    .text:0000000000000170 .LVL20
     /tmp/ccZSl0rL.s:580    .text:0000000000000174 .LVL21
     /tmp/ccZSl0rL.s:672    .text:00000000000001d8 .LVL34
     /tmp/ccZSl0rL.s:679    .text:00000000000001dc .LVL35
     /tmp/ccZSl0rL.s:686    .text:00000000000001e0 .LVL36
     /tmp/ccZSl0rL.s:729    .text:000000000000020c .LVL41
GAS LISTING /tmp/ccZSl0rL.s 			page 39


     /tmp/ccZSl0rL.s:737    .text:0000000000000210 .LVL42
     /tmp/ccZSl0rL.s:750    .text:0000000000000224 .LVL44
     /tmp/ccZSl0rL.s:760    .text:000000000000022c .LVL45
     /tmp/ccZSl0rL.s:779    .text:0000000000000238 .LVL47
     /tmp/ccZSl0rL.s:791    .text:0000000000000248 .LVL49
     /tmp/ccZSl0rL.s:821    .text:000000000000025c .LVL53
     /tmp/ccZSl0rL.s:844    .text:0000000000000274 .LVL56
     /tmp/ccZSl0rL.s:858    .text:000000000000027c .LVL57
     /tmp/ccZSl0rL.s:881    .text:0000000000000294 .LVL60
     /tmp/ccZSl0rL.s:904    .text:00000000000002a0 .LVL62
     /tmp/ccZSl0rL.s:431    .text:0000000000000114 .LVL7
     /tmp/ccZSl0rL.s:488    .text:0000000000000134 .LVL13
     /tmp/ccZSl0rL.s:958    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccZSl0rL.s:109    .text:0000000000000080 .LBB48
     /tmp/ccZSl0rL.s:172    .text:00000000000000b0 .LBE48
     /tmp/ccZSl0rL.s:176    .text:00000000000000b0 .LBB182
     /tmp/ccZSl0rL.s:183    .text:00000000000000b8 .LBE182
     /tmp/ccZSl0rL.s:187    .text:00000000000000b8 .LBB183
     /tmp/ccZSl0rL.s:196    .text:00000000000000c0 .LBE183
     /tmp/ccZSl0rL.s:200    .text:00000000000000c0 .LBB184
     /tmp/ccZSl0rL.s:211    .text:00000000000000c8 .LBE184
     /tmp/ccZSl0rL.s:215    .text:00000000000000c8 .LBB185
     /tmp/ccZSl0rL.s:228    .text:00000000000000d0 .LBE185
     /tmp/ccZSl0rL.s:232    .text:00000000000000d0 .LBB186
     /tmp/ccZSl0rL.s:247    .text:00000000000000d8 .LBE186
     /tmp/ccZSl0rL.s:251    .text:00000000000000d8 .LBB187
     /tmp/ccZSl0rL.s:268    .text:00000000000000e0 .LBE187
     /tmp/ccZSl0rL.s:272    .text:00000000000000e0 .LBB188
     /tmp/ccZSl0rL.s:291    .text:00000000000000e8 .LBE188
     /tmp/ccZSl0rL.s:295    .text:00000000000000e8 .LBB189
     /tmp/ccZSl0rL.s:316    .text:00000000000000f0 .LBE189
     /tmp/ccZSl0rL.s:320    .text:00000000000000f0 .LBB190
     /tmp/ccZSl0rL.s:343    .text:00000000000000f8 .LBE190
     /tmp/ccZSl0rL.s:347    .text:00000000000000f8 .LBB191
     /tmp/ccZSl0rL.s:372    .text:0000000000000100 .LBE191
     /tmp/ccZSl0rL.s:376    .text:0000000000000100 .LBB192
     /tmp/ccZSl0rL.s:403    .text:0000000000000108 .LBE192
     /tmp/ccZSl0rL.s:407    .text:0000000000000108 .LBB193
     /tmp/ccZSl0rL.s:506    .text:0000000000000138 .LBE193
     /tmp/ccZSl0rL.s:528    .text:0000000000000154 .LBB194
     /tmp/ccZSl0rL.s:930    .text:00000000000002a8 .LBE194
     /tmp/ccZSl0rL.s:849    .text:0000000000000278 .LBB73
     /tmp/ccZSl0rL.s:874    .text:000000000000028c .LBE73
     /tmp/ccZSl0rL.s:878    .text:0000000000000290 .LBB74
     /tmp/ccZSl0rL.s:884    .text:0000000000000298 .LBE74
     /tmp/ccZSl0rL.s:812    .text:0000000000000258 .LBB78
     /tmp/ccZSl0rL.s:837    .text:000000000000026c .LBE78
     /tmp/ccZSl0rL.s:841    .text:0000000000000270 .LBB79
     /tmp/ccZSl0rL.s:847    .text:0000000000000278 .LBE79
     /tmp/ccZSl0rL.s:770    .text:0000000000000234 .LBB84
     /tmp/ccZSl0rL.s:799    .text:000000000000024c .LBE84
     /tmp/ccZSl0rL.s:803    .text:0000000000000250 .LBB85
     /tmp/ccZSl0rL.s:810    .text:0000000000000258 .LBE85
     /tmp/ccZSl0rL.s:719    .text:0000000000000204 .LBB91
     /tmp/ccZSl0rL.s:758    .text:0000000000000228 .LBE91
     /tmp/ccZSl0rL.s:762    .text:000000000000022c .LBB92
     /tmp/ccZSl0rL.s:768    .text:0000000000000234 .LBE92
GAS LISTING /tmp/ccZSl0rL.s 			page 40


     /tmp/ccZSl0rL.s:664    .text:00000000000001d4 .LBB99
     /tmp/ccZSl0rL.s:707    .text:00000000000001f8 .LBE99
     /tmp/ccZSl0rL.s:711    .text:00000000000001fc .LBB100
     /tmp/ccZSl0rL.s:717    .text:0000000000000204 .LBE100
     /tmp/ccZSl0rL.s:558    .text:0000000000000168 .LBB137
     /tmp/ccZSl0rL.s:601    .text:000000000000018c .LBE137
     /tmp/ccZSl0rL.s:605    .text:0000000000000190 .LBB138
     /tmp/ccZSl0rL.s:611    .text:0000000000000198 .LBE138

UNDEFINED SYMBOLS
console_handler
_ZN3TCB4joinEv
_ZN15MemoryAllocator6mallocEm
_ZN15MemoryAllocator4freeEPv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN9Scheduler3putEP3TCB
_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_
_ZN10Ksemaphore15createSemaphoreEj
_ZN10Ksemaphore14closeSemaphoreEv
_ZN10Ksemaphore4waitEv
_ZN10Ksemaphore6signalEv
