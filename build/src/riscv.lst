GAS LISTING /tmp/ccQdnIdT.s 			page 1


   1              		.file	"riscv.cpp"
   2              		.option pic
   3              		.option norelax
   4              		.text
   5              	.Ltext0:
   6              		.align	2
   7              		.globl	_ZN5Riscv10popSppSpieEv
   9              	_ZN5Riscv10popSppSpieEv:
  10              	.LFB47:
  11              		.file 1 "src/riscv.cpp"
   1:src/riscv.cpp **** //
   2:src/riscv.cpp **** 
   3:src/riscv.cpp **** #include "../h/riscv.hpp"
   4:src/riscv.cpp **** 
   5:src/riscv.cpp **** using Body = void (*)(void*);
   6:src/riscv.cpp **** 
   7:src/riscv.cpp **** void Riscv::popSppSpie()
   8:src/riscv.cpp **** {
  12              		.loc 1 8 1
  13              		.cfi_startproc
  14 0000 130101FF 		addi	sp,sp,-16
  15              		.cfi_def_cfa_offset 16
  16 0004 23348100 		sd	s0,8(sp)
  17              		.cfi_offset 8, -8
  18 0008 13040101 		addi	s0,sp,16
  19              		.cfi_def_cfa 8, 0
   9:src/riscv.cpp ****     __asm__ volatile ("csrw sepc, ra");
  20              		.loc 1 9 5
  21              		.loc 1 9 39 is_stmt 0
  22              	#APP
  23              	# 9 "src/riscv.cpp" 1
  10              	    __asm__ volatile ("sret");
  24              		csrw sepc, ra
  25              	# 0 "" 2
  26              		.loc 1 10 5 is_stmt 1
  27              		.loc 1 10 30 is_stmt 0
  28              	# 10 "src/riscv.cpp" 1
  11              	}
  29              		sret
  30              	# 0 "" 2
  31              		.loc 1 11 1
  32              	#NO_APP
  33 0014 03348100 		ld	s0,8(sp)
  34              		.cfi_restore 8
  35              		.cfi_def_cfa 2, 16
  36 0018 13010101 		addi	sp,sp,16
  37              		.cfi_def_cfa_offset 0
  38 001c 67800000 		jr	ra
  39              		.cfi_endproc
  40              	.LFE47:
  42              		.align	2
  43              		.globl	_ZN5Riscv20handleSupervisorTrapEv
  45              	_ZN5Riscv20handleSupervisorTrapEv:
  46              	.LFB48:
  12:src/riscv.cpp **** 
  13:src/riscv.cpp **** void Riscv::handleSupervisorTrap()
  14:src/riscv.cpp **** {
GAS LISTING /tmp/ccQdnIdT.s 			page 2


  47              		.loc 1 14 1 is_stmt 1
  48              		.cfi_startproc
  49 0020 130101FB 		addi	sp,sp,-80
  50              		.cfi_def_cfa_offset 80
  51 0024 23341104 		sd	ra,72(sp)
  52 0028 23308104 		sd	s0,64(sp)
  53 002c 233C9102 		sd	s1,56(sp)
  54 0030 23382103 		sd	s2,48(sp)
  55 0034 23343103 		sd	s3,40(sp)
  56              		.cfi_offset 1, -8
  57              		.cfi_offset 8, -16
  58              		.cfi_offset 9, -24
  59              		.cfi_offset 18, -32
  60              		.cfi_offset 19, -40
  61 0038 13040105 		addi	s0,sp,80
  62              		.cfi_def_cfa 8, 0
  15:src/riscv.cpp ****     uint64 scause = r_scause();
  63              		.loc 1 15 5
  64              	.LBB39:
  65              	.LBB40:
  66              		.file 2 "src/../h/riscv.hpp"
   1:src/../h/riscv.hpp **** //
   2:src/../h/riscv.hpp **** // Created by os on 8/19/22.
   3:src/../h/riscv.hpp **** //
   4:src/../h/riscv.hpp **** 
   5:src/../h/riscv.hpp **** #ifndef PROJECT_BASE_RISCV_HPP
   6:src/../h/riscv.hpp **** #define PROJECT_BASE_RISCV_HPP
   7:src/../h/riscv.hpp **** 
   8:src/../h/riscv.hpp **** //#include "../lib/hw.h"
   9:src/../h/riscv.hpp **** #include "../h/TCB.hpp"
  10:src/../h/riscv.hpp **** #include "../lib/console.h"
  11:src/../h/riscv.hpp **** #include "../h/Ksemaphore.hpp"
  12:src/../h/riscv.hpp **** #include "../h/MemoryAllocator.hpp"
  13:src/../h/riscv.hpp **** //#include "../h/syscall_cpp.hpp"
  14:src/../h/riscv.hpp **** 
  15:src/../h/riscv.hpp **** //class TCB;
  16:src/../h/riscv.hpp **** class Riscv
  17:src/../h/riscv.hpp **** {
  18:src/../h/riscv.hpp **** public:
  19:src/../h/riscv.hpp **** 
  20:src/../h/riscv.hpp ****     // pop sstatus.spp and sstatus.spie bits (has to be a non inline function)
  21:src/../h/riscv.hpp ****     static void popSppSpie();
  22:src/../h/riscv.hpp **** 
  23:src/../h/riscv.hpp ****     // push x3..x31 registers onto stack
  24:src/../h/riscv.hpp ****     static void pushRegisters();
  25:src/../h/riscv.hpp **** 
  26:src/../h/riscv.hpp ****     // pop x3..x31 registers onto stack
  27:src/../h/riscv.hpp ****     static void popRegisters();
  28:src/../h/riscv.hpp **** 
  29:src/../h/riscv.hpp ****     // read register scause
  30:src/../h/riscv.hpp ****     static uint64 r_scause();
  31:src/../h/riscv.hpp **** 
  32:src/../h/riscv.hpp ****     // write register scause
  33:src/../h/riscv.hpp ****     static void w_scause(uint64 scause);
  34:src/../h/riscv.hpp **** 
  35:src/../h/riscv.hpp ****     // read register sepc
  36:src/../h/riscv.hpp ****     static uint64 r_sepc();
GAS LISTING /tmp/ccQdnIdT.s 			page 3


  37:src/../h/riscv.hpp **** 
  38:src/../h/riscv.hpp ****     // write register sepc
  39:src/../h/riscv.hpp ****     static void w_sepc(uint64 sepc);
  40:src/../h/riscv.hpp **** 
  41:src/../h/riscv.hpp ****     // read register stvec
  42:src/../h/riscv.hpp ****     static uint64 r_stvec();
  43:src/../h/riscv.hpp **** 
  44:src/../h/riscv.hpp ****     // write register stvec
  45:src/../h/riscv.hpp ****     static void w_stvec(uint64 stvec);
  46:src/../h/riscv.hpp **** 
  47:src/../h/riscv.hpp ****     // read register stval
  48:src/../h/riscv.hpp ****     static uint64 r_stval();
  49:src/../h/riscv.hpp **** 
  50:src/../h/riscv.hpp ****     // write register stval
  51:src/../h/riscv.hpp ****     static void w_stval(uint64 stval);
  52:src/../h/riscv.hpp **** 
  53:src/../h/riscv.hpp ****     enum BitMaskSip
  54:src/../h/riscv.hpp ****     {
  55:src/../h/riscv.hpp ****         SIP_SSIP = (1 << 1),
  56:src/../h/riscv.hpp ****         SIP_STIP = (1 << 5),
  57:src/../h/riscv.hpp ****         SIP_SEIP = (1 << 9),
  58:src/../h/riscv.hpp ****     };
  59:src/../h/riscv.hpp **** 
  60:src/../h/riscv.hpp ****     // mask set register sip
  61:src/../h/riscv.hpp ****     static void ms_sip(uint64 mask);
  62:src/../h/riscv.hpp **** 
  63:src/../h/riscv.hpp ****     // mask clear register sip
  64:src/../h/riscv.hpp ****     static void mc_sip(uint64 mask);
  65:src/../h/riscv.hpp **** 
  66:src/../h/riscv.hpp ****     // read register sip
  67:src/../h/riscv.hpp ****     static uint64 r_sip();
  68:src/../h/riscv.hpp **** 
  69:src/../h/riscv.hpp ****     // write register sip
  70:src/../h/riscv.hpp ****     static void w_sip(uint64 sip);
  71:src/../h/riscv.hpp **** 
  72:src/../h/riscv.hpp ****     enum BitMaskSstatus
  73:src/../h/riscv.hpp ****     {
  74:src/../h/riscv.hpp ****         SSTATUS_SIE = (1 << 1),
  75:src/../h/riscv.hpp ****         SSTATUS_SPIE = (1 << 5),
  76:src/../h/riscv.hpp ****         SSTATUS_SPP = (1 << 8),
  77:src/../h/riscv.hpp ****     };
  78:src/../h/riscv.hpp **** 
  79:src/../h/riscv.hpp ****     // mask set register sstatus
  80:src/../h/riscv.hpp ****     static void ms_sstatus(uint64 mask);
  81:src/../h/riscv.hpp **** 
  82:src/../h/riscv.hpp ****     // mask clear register sstatus
  83:src/../h/riscv.hpp ****     static void mc_sstatus(uint64 mask);
  84:src/../h/riscv.hpp **** 
  85:src/../h/riscv.hpp ****     // read register sstatus
  86:src/../h/riscv.hpp ****     static uint64 r_sstatus();
  87:src/../h/riscv.hpp **** 
  88:src/../h/riscv.hpp ****     // write register sstatus
  89:src/../h/riscv.hpp ****     static void w_sstatus(uint64 sstatus);
  90:src/../h/riscv.hpp **** 
  91:src/../h/riscv.hpp ****     //read a0;
  92:src/../h/riscv.hpp ****     static uint64 r_a0();
  93:src/../h/riscv.hpp **** 
GAS LISTING /tmp/ccQdnIdT.s 			page 4


  94:src/../h/riscv.hpp **** // supervisor trap
  95:src/../h/riscv.hpp ****     static void supervisorTrap();
  96:src/../h/riscv.hpp **** 
  97:src/../h/riscv.hpp **** private:
  98:src/../h/riscv.hpp **** 
  99:src/../h/riscv.hpp ****     // supervisor trap handler
 100:src/../h/riscv.hpp ****     static void handleSupervisorTrap();
 101:src/../h/riscv.hpp **** 
 102:src/../h/riscv.hpp **** };
 103:src/../h/riscv.hpp **** 
 104:src/../h/riscv.hpp **** inline uint64 Riscv::r_scause()
 105:src/../h/riscv.hpp **** {
 106:src/../h/riscv.hpp ****     uint64 volatile scause;
  67              		.loc 2 106 5
 107:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[scause], scause" : [scause] "=r"(scause));
  68              		.loc 2 107 5
  69              		.loc 2 107 72 is_stmt 0
  70              	#APP
  71              	# 107 "src/../h/riscv.hpp" 1
 108              	    return scause;
  72              		csrr a5, scause
  73              	# 0 "" 2
  74              	#NO_APP
  75 0040 2338F4FA 		sd	a5,-80(s0)
  76              		.loc 2 108 5 is_stmt 1
  77              		.loc 2 108 12 is_stmt 0
  78 0044 033704FB 		ld	a4,-80(s0)
  79              	.LVL0:
  80              	.LBE40:
  81              	.LBE39:
  16:src/riscv.cpp **** 
  17:src/riscv.cpp ****     if (scause == 0x0000000000000008UL || scause == 0x0000000000000009UL)
  82              		.loc 1 17 5 is_stmt 1
  83              	.LBB41:
  84              		.loc 1 17 40 is_stmt 0
  85 0048 930687FF 		addi	a3,a4,-8
  86              		.loc 1 17 5
  87 004c 93071000 		li	a5,1
  88 0050 63F8D702 		bleu	a3,a5,.L31
  18:src/riscv.cpp ****     {
  19:src/riscv.cpp ****         // interrupt: no; cause code: environment call from U-mode(8) or S-mode(9)
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
  22:src/riscv.cpp **** 
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
  25:src/riscv.cpp ****             //mem_alloc(size_t size-a1)
  26:src/riscv.cpp ****             size_t a7;
  27:src/riscv.cpp ****             void *a;
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  29:src/riscv.cpp **** 
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  32:src/riscv.cpp ****         }
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
  34:src/riscv.cpp ****             //mem_free
  35:src/riscv.cpp ****             void* a7;
GAS LISTING /tmp/ccQdnIdT.s 			page 5


  36:src/riscv.cpp ****             uint64 a;
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  38:src/riscv.cpp **** 
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  41:src/riscv.cpp **** 
  42:src/riscv.cpp **** 
  43:src/riscv.cpp ****         }
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
  45:src/riscv.cpp **** //            //thread_create(&myhandle-a1, body-a2, arg-a3)
  46:src/riscv.cpp **** 
  47:src/riscv.cpp ****             TCB** tcb;
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  49:src/riscv.cpp ****             Body a2;
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  51:src/riscv.cpp ****             //arg
  52:src/riscv.cpp ****             void* a7;
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  54:src/riscv.cpp **** 
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  57:src/riscv.cpp **** 
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
  59:src/riscv.cpp **** 
  60:src/riscv.cpp ****         }
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
  62:src/riscv.cpp ****             //thread_exit
  63:src/riscv.cpp ****             uint64 a;
  64:src/riscv.cpp ****             a=TCB::exitThread();
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
  66:src/riscv.cpp ****         }
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
  68:src/riscv.cpp ****             //thread_dispatch()
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
  70:src/riscv.cpp ****             TCB::dispatch();
  71:src/riscv.cpp ****         }
  72:src/riscv.cpp **** 
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
  74:src/riscv.cpp ****             //thread_start()
  75:src/riscv.cpp ****             TCB** tcb;
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
  78:src/riscv.cpp ****         }
  79:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
  80:src/riscv.cpp ****             //thread_create2() bez stavljanja u scheduler
  81:src/riscv.cpp ****             TCB** tcb;
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
  83:src/riscv.cpp ****             Body a2;
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  85:src/riscv.cpp ****             //arg
  86:src/riscv.cpp ****             void* a7;
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
  88:src/riscv.cpp **** 
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
  91:src/riscv.cpp **** 
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
GAS LISTING /tmp/ccQdnIdT.s 			page 6


  93:src/riscv.cpp ****         }
  94:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
  95:src/riscv.cpp ****             //sem_open a1-handle a2-init
  96:src/riscv.cpp **** 
  97:src/riscv.cpp ****             unsigned a2;
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
  99:src/riscv.cpp **** 
 100:src/riscv.cpp ****             Ksemaphore** sem;
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 103:src/riscv.cpp **** 
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 106:src/riscv.cpp **** 
 107:src/riscv.cpp ****         }
 108:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 109:src/riscv.cpp ****             //sem_close a1-handle
 110:src/riscv.cpp **** 
 111:src/riscv.cpp ****             uint64 a;
 112:src/riscv.cpp ****             Ksemaphore* sem;
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 114:src/riscv.cpp **** 
 115:src/riscv.cpp ****             a=0;
 116:src/riscv.cpp ****             if(sem== nullptr){
 117:src/riscv.cpp ****                 a=1;
 118:src/riscv.cpp ****             }
 119:src/riscv.cpp ****             else{
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 121:src/riscv.cpp ****             }
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 123:src/riscv.cpp **** 
 124:src/riscv.cpp ****         }
 125:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 126:src/riscv.cpp ****             //sem_wait a1-id
 127:src/riscv.cpp **** 
 128:src/riscv.cpp ****             int a;
 129:src/riscv.cpp ****             Ksemaphore* a7;
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 131:src/riscv.cpp **** 
 132:src/riscv.cpp ****             if(a7!= nullptr){
 133:src/riscv.cpp ****                 a = a7->wait();
 134:src/riscv.cpp ****             }
 135:src/riscv.cpp ****             else{
 136:src/riscv.cpp ****                 a=-1;
 137:src/riscv.cpp ****             }
 138:src/riscv.cpp **** 
 139:src/riscv.cpp **** 
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 141:src/riscv.cpp **** 
 142:src/riscv.cpp ****         }
 143:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 144:src/riscv.cpp ****             //sem_signal a1-id
 145:src/riscv.cpp **** 
 146:src/riscv.cpp ****             uint64 a;
 147:src/riscv.cpp ****             Ksemaphore* sem;
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 149:src/riscv.cpp ****             if(sem!= nullptr) {
GAS LISTING /tmp/ccQdnIdT.s 			page 7


 150:src/riscv.cpp ****                 a = sem->signal();
 151:src/riscv.cpp ****             }else {
 152:src/riscv.cpp ****                 a=1;
 153:src/riscv.cpp ****             }
 154:src/riscv.cpp **** 
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 156:src/riscv.cpp ****         }
 157:src/riscv.cpp **** 
 158:src/riscv.cpp **** //        TCB::dispatch();
 159:src/riscv.cpp **** 
 160:src/riscv.cpp ****         w_sstatus(sstatus);
 161:src/riscv.cpp ****         w_sepc(sepc);
 162:src/riscv.cpp **** 
 163:src/riscv.cpp **** 
 164:src/riscv.cpp ****     } else if (scause == 0x8000000000000001UL)
  89              		.loc 1 164 12 is_stmt 1
  90 0054 9307F0FF 		li	a5,-1
  91 0058 9397F703 		slli	a5,a5,63
  92 005c 93871700 		addi	a5,a5,1
  93 0060 630CF720 		beq	a4,a5,.L32
 165:src/riscv.cpp ****     {
 166:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor software interrupt (CLINT; machine timer interrup
 167:src/riscv.cpp **** //        TCB::timeSliceCounter++;
 168:src/riscv.cpp **** //        if (TCB::timeSliceCounter >= TCB::running->getTimeSlice())
 169:src/riscv.cpp **** //        {
 170:src/riscv.cpp **** //            uint64 sepc = r_sepc();
 171:src/riscv.cpp **** //            uint64 sstatus = r_sstatus();
 172:src/riscv.cpp **** //            TCB::timeSliceCounter = 0;
 173:src/riscv.cpp **** //            TCB::dispatch();
 174:src/riscv.cpp **** //            w_sstatus(sstatus);
 175:src/riscv.cpp **** //            w_sepc(sepc);
 176:src/riscv.cpp **** //        }
 177:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 178:src/riscv.cpp ****     } else if (scause == 0x8000000000000009UL)
  94              		.loc 1 178 12
  95 0064 9307F0FF 		li	a5,-1
  96 0068 9397F703 		slli	a5,a5,63
  97 006c 93879700 		addi	a5,a5,9
  98 0070 6310F70C 		bne	a4,a5,.L3
 179:src/riscv.cpp ****     {
 180:src/riscv.cpp ****         // interrupt: yes; cause code: supervisor external interrupt (PLIC; could be keyboard)
 181:src/riscv.cpp ****         console_handler();
  99              		.loc 1 181 9
 100              		.loc 1 181 24 is_stmt 0
 101 0074 97000000 		call	console_handler@plt
 101      E7800000 
 102              	.LVL1:
 103              	.LBE41:
 182:src/riscv.cpp ****     }else
 183:src/riscv.cpp ****     {
 184:src/riscv.cpp ****         // unexpected trap cause
 185:src/riscv.cpp ****     }
 186:src/riscv.cpp **** }...
 104              		.loc 1 186 1
 105 007c 6F00400B 		j	.L3
 106              	.LVL2:
 107              	.L31:
GAS LISTING /tmp/ccQdnIdT.s 			page 8


 108              	.LBB159:
 109              	.LBB42:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 110              		.loc 1 20 9 is_stmt 1
 111              	.LBB43:
 112              	.LBB44:
 109:src/../h/riscv.hpp **** }
 110:src/../h/riscv.hpp **** 
 111:src/../h/riscv.hpp **** inline void Riscv::w_scause(uint64 scause)
 112:src/../h/riscv.hpp **** {
 113:src/../h/riscv.hpp ****     __asm__ volatile ("csrw scause, %[scause]" : : [scause] "r"(scause));
 114:src/../h/riscv.hpp **** }
 115:src/../h/riscv.hpp **** 
 116:src/../h/riscv.hpp **** inline uint64 Riscv::r_sepc()
 117:src/../h/riscv.hpp **** {
 118:src/../h/riscv.hpp ****     uint64 volatile sepc;
 113              		.loc 2 118 5
 119:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sepc], sepc" : [sepc] "=r"(sepc));
 114              		.loc 2 119 5
 115              		.loc 2 119 64 is_stmt 0
 116              	#APP
 117              	# 119 "src/../h/riscv.hpp" 1
 120              	    return sepc;
 118              		csrr a5, sepc
 119              	# 0 "" 2
 120              	#NO_APP
 121 0084 2334F4FC 		sd	a5,-56(s0)
 122              		.loc 2 120 5 is_stmt 1
 123              		.loc 2 120 12 is_stmt 0
 124 0088 833484FC 		ld	s1,-56(s0)
 125              	.LBE44:
 126              	.LBE43:
  20:src/riscv.cpp ****         uint64 sepc = r_sepc() + 4;
 127              		.loc 1 20 34
 128 008c 93844400 		addi	s1,s1,4
 129              	.LVL3:
  21:src/riscv.cpp ****         uint64 sstatus = r_sstatus();
 130              		.loc 1 21 9 is_stmt 1
 131              	.LBB45:
 132              	.LBB46:
 121:src/../h/riscv.hpp **** }
 122:src/../h/riscv.hpp **** 
 123:src/../h/riscv.hpp **** inline void Riscv::w_sepc(uint64 sepc)
 124:src/../h/riscv.hpp **** {
 125:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sepc, %[sepc]" : : [sepc] "r"(sepc));
 126:src/../h/riscv.hpp **** }
 127:src/../h/riscv.hpp **** 
 128:src/../h/riscv.hpp **** inline uint64 Riscv::r_stvec()
 129:src/../h/riscv.hpp **** {
 130:src/../h/riscv.hpp ****     uint64 volatile stvec;
 131:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stvec], stvec" : [stvec] "=r"(stvec));
 132:src/../h/riscv.hpp ****     return stvec;
 133:src/../h/riscv.hpp **** }
 134:src/../h/riscv.hpp **** 
 135:src/../h/riscv.hpp **** inline void Riscv::w_stvec(uint64 stvec)
 136:src/../h/riscv.hpp **** {
 137:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stvec, %[stvec]" : : [stvec] "r"(stvec));
GAS LISTING /tmp/ccQdnIdT.s 			page 9


 138:src/../h/riscv.hpp **** }
 139:src/../h/riscv.hpp **** 
 140:src/../h/riscv.hpp **** inline uint64 Riscv::r_stval()
 141:src/../h/riscv.hpp **** {
 142:src/../h/riscv.hpp ****     uint64 volatile stval;
 143:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[stval], stval" : [stval] "=r"(stval));
 144:src/../h/riscv.hpp ****     return stval;
 145:src/../h/riscv.hpp **** }
 146:src/../h/riscv.hpp **** 
 147:src/../h/riscv.hpp **** inline void Riscv::w_stval(uint64 stval)
 148:src/../h/riscv.hpp **** {
 149:src/../h/riscv.hpp ****     __asm__ volatile ("csrw stval, %[stval]" : : [stval] "r"(stval));
 150:src/../h/riscv.hpp **** }
 151:src/../h/riscv.hpp **** 
 152:src/../h/riscv.hpp **** inline void Riscv::ms_sip(uint64 mask)
 153:src/../h/riscv.hpp **** {
 154:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sip, %[mask]" : : [mask] "r"(mask));
 155:src/../h/riscv.hpp **** }
 156:src/../h/riscv.hpp **** 
 157:src/../h/riscv.hpp **** inline void Riscv::mc_sip(uint64 mask)
 158:src/../h/riscv.hpp **** {
 159:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sip, %[mask]" : : [mask] "r"(mask));
 160:src/../h/riscv.hpp **** }
 161:src/../h/riscv.hpp **** 
 162:src/../h/riscv.hpp **** inline uint64 Riscv::r_sip()
 163:src/../h/riscv.hpp **** {
 164:src/../h/riscv.hpp ****     uint64 volatile sip;
 165:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sip], sip" : [sip] "=r"(sip));
 166:src/../h/riscv.hpp ****     return sip;
 167:src/../h/riscv.hpp **** }
 168:src/../h/riscv.hpp **** 
 169:src/../h/riscv.hpp **** inline void Riscv::w_sip(uint64 sip)
 170:src/../h/riscv.hpp **** {
 171:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sip, %[sip]" : : [sip] "r"(sip));
 172:src/../h/riscv.hpp **** }
 173:src/../h/riscv.hpp **** 
 174:src/../h/riscv.hpp **** inline void Riscv::ms_sstatus(uint64 mask)
 175:src/../h/riscv.hpp **** {
 176:src/../h/riscv.hpp ****     __asm__ volatile ("csrs sstatus, %[mask]" : : [mask] "r"(mask));
 177:src/../h/riscv.hpp **** }
 178:src/../h/riscv.hpp **** 
 179:src/../h/riscv.hpp **** inline void Riscv::mc_sstatus(uint64 mask)
 180:src/../h/riscv.hpp **** {
 181:src/../h/riscv.hpp ****     __asm__ volatile ("csrc sstatus, %[mask]" : : [mask] "r"(mask));
 182:src/../h/riscv.hpp **** }
 183:src/../h/riscv.hpp **** 
 184:src/../h/riscv.hpp **** inline uint64 Riscv::r_sstatus()
 185:src/../h/riscv.hpp **** {
 186:src/../h/riscv.hpp ****     uint64 volatile sstatus;
 133              		.loc 2 186 5
 187:src/../h/riscv.hpp ****     __asm__ volatile ("csrr %[sstatus], sstatus" : [sstatus] "=r"(sstatus));
 134              		.loc 2 187 5
 135              		.loc 2 187 76 is_stmt 0
 136              	#APP
 137              	# 187 "src/../h/riscv.hpp" 1
 188              	    return sstatus;
 138              		csrr a5, sstatus
GAS LISTING /tmp/ccQdnIdT.s 			page 10


 139              	# 0 "" 2
 140              	#NO_APP
 141 0094 2330F4FC 		sd	a5,-64(s0)
 142              		.loc 2 188 5 is_stmt 1
 143              		.loc 2 188 12 is_stmt 0
 144 0098 033904FC 		ld	s2,-64(s0)
 145              	.LVL4:
 146              	.LBE46:
 147              	.LBE45:
  23:src/riscv.cpp ****         uint64 a0 = r_a0();
 148              		.loc 1 23 9 is_stmt 1
 149              	.LBB47:
 150              	.LBB48:
 189:src/../h/riscv.hpp **** }
 190:src/../h/riscv.hpp **** 
 191:src/../h/riscv.hpp **** inline void Riscv::w_sstatus(uint64 sstatus)
 192:src/../h/riscv.hpp **** {
 193:src/../h/riscv.hpp ****     __asm__ volatile ("csrw sstatus, %[sstatus]" : : [sstatus] "r"(sstatus));
 194:src/../h/riscv.hpp **** }
 195:src/../h/riscv.hpp **** 
 196:src/../h/riscv.hpp **** 
 197:src/../h/riscv.hpp **** inline uint64 Riscv::r_a0()
 198:src/../h/riscv.hpp **** {
 199:src/../h/riscv.hpp ****     uint64 volatile a0;
 151              		.loc 2 199 5
 200:src/../h/riscv.hpp ****     __asm__ volatile ("mv %[a0], a0" : [a0] "=r"(a0));
 152              		.loc 2 200 5
 153              		.loc 2 200 54 is_stmt 0
 154              	#APP
 155              	# 200 "src/../h/riscv.hpp" 1
 201              	    return a0;
 156              		mv a5, a0
 157              	# 0 "" 2
 158              	#NO_APP
 159 00a0 233CF4FA 		sd	a5,-72(s0)
 160              		.loc 2 201 5 is_stmt 1
 161              		.loc 2 201 12 is_stmt 0
 162 00a4 833784FB 		ld	a5,-72(s0)
 163              	.LVL5:
 164              	.LBE48:
 165              	.LBE47:
  24:src/riscv.cpp ****         if (a0 == 0x0000000000000001UL){
 166              		.loc 1 24 9 is_stmt 1
 167              	.LBB49:
 168 00a8 13071000 		li	a4,1
 169              	.LVL6:
 170 00ac 6386E706 		beq	a5,a4,.L33
 171              	.LBE49:
 172              	.LBE42:
 173              	.LBE159:
  33:src/riscv.cpp ****         else if (a0 == 0x0000000000000002UL){
 174              		.loc 1 33 14
 175              	.LBB160:
 176              	.LBB146:
 177              	.LBB131:
 178              	.LBB50:
 179 00b0 13072000 		li	a4,2
GAS LISTING /tmp/ccQdnIdT.s 			page 11


 180 00b4 638CE708 		beq	a5,a4,.L34
 181              	.LBE50:
 182              	.LBE131:
 183              	.LBE146:
 184              	.LBE160:
  44:src/riscv.cpp ****         else if (a0 == 0x0000000000000011UL){
 185              		.loc 1 44 14
 186              	.LBB161:
 187              	.LBB147:
 188              	.LBB132:
 189              	.LBB120:
 190              	.LBB51:
 191 00b8 13071001 		li	a4,17
 192 00bc 6382E70A 		beq	a5,a4,.L35
 193              	.LBE51:
 194              	.LBE120:
 195              	.LBE132:
 196              	.LBE147:
 197              	.LBE161:
  61:src/riscv.cpp ****         else if (a0 == 0x0000000000000012UL){
 198              		.loc 1 61 14
 199              	.LBB162:
 200              	.LBB148:
 201              	.LBB133:
 202              	.LBB121:
 203              	.LBB110:
 204              	.LBB52:
 205 00c0 13072001 		li	a4,18
 206 00c4 6386E70C 		beq	a5,a4,.L36
 207              	.LBE52:
 208              	.LBE110:
 209              	.LBE121:
 210              	.LBE133:
 211              	.LBE148:
 212              	.LBE162:
  67:src/riscv.cpp ****         else if (a0 == 0x0000000000000013UL){
 213              		.loc 1 67 14
 214              	.LBB163:
 215              	.LBB149:
 216              	.LBB134:
 217              	.LBB122:
 218              	.LBB111:
 219              	.LBB100:
 220              	.LBB53:
 221 00c8 13073001 		li	a4,19
 222 00cc 638AE70C 		beq	a5,a4,.L37
 223              	.LBE53:
 224              	.LBE100:
 225              	.LBE111:
 226              	.LBE122:
 227              	.LBE134:
 228              	.LBE149:
 229              	.LBE163:
  73:src/riscv.cpp ****         else if (a0 == 0x0000000000000014UL){
 230              		.loc 1 73 14
 231              	.LBB164:
 232              	.LBB150:
GAS LISTING /tmp/ccQdnIdT.s 			page 12


 233              	.LBB135:
 234              	.LBB123:
 235              	.LBB112:
 236              	.LBB101:
 237              	.LBB92:
 238              	.LBB54:
 239 00d0 13074001 		li	a4,20
 240 00d4 6382E70E 		beq	a5,a4,.L38
 241              	.LBE54:
 242              	.LBE92:
 243              	.LBE101:
 244              	.LBE112:
 245              	.LBE123:
 246              	.LBE135:
 247              	.LBE150:
 248              	.LBE164:
  79:src/riscv.cpp ****         else if (a0 == 0x0000000000000015UL){
 249              		.loc 1 79 14
 250              	.LBB165:
 251              	.LBB151:
 252              	.LBB136:
 253              	.LBB124:
 254              	.LBB113:
 255              	.LBB102:
 256              	.LBB93:
 257              	.LBB86:
 258              	.LBB55:
 259 00d8 13075001 		li	a4,21
 260 00dc 6388E70E 		beq	a5,a4,.L39
 261              	.LBE55:
 262              	.LBE86:
 263              	.LBE93:
 264              	.LBE102:
 265              	.LBE113:
 266              	.LBE124:
 267              	.LBE136:
 268              	.LBE151:
 269              	.LBE165:
  94:src/riscv.cpp ****         else if (a0 == 0x0000000000000021UL) {
 270              		.loc 1 94 14
 271              	.LBB166:
 272              	.LBB152:
 273              	.LBB137:
 274              	.LBB125:
 275              	.LBB114:
 276              	.LBB103:
 277              	.LBB94:
 278              	.LBB87:
 279              	.LBB80:
 280              	.LBB56:
 281 00e0 13071002 		li	a4,33
 282 00e4 638CE710 		beq	a5,a4,.L40
 283              	.LBE56:
 284              	.LBE80:
 285              	.LBE87:
 286              	.LBE94:
 287              	.LBE103:
GAS LISTING /tmp/ccQdnIdT.s 			page 13


 288              	.LBE114:
 289              	.LBE125:
 290              	.LBE137:
 291              	.LBE152:
 292              	.LBE166:
 108:src/riscv.cpp ****         else if (a0 == 0x0000000000000022UL) {
 293              		.loc 1 108 14
 294              	.LBB167:
 295              	.LBB153:
 296              	.LBB138:
 297              	.LBB126:
 298              	.LBB115:
 299              	.LBB104:
 300              	.LBB95:
 301              	.LBB88:
 302              	.LBB81:
 303              	.LBB74:
 304              	.LBB57:
 305 00e8 13072002 		li	a4,34
 306 00ec 6380E714 		beq	a5,a4,.L41
 307              	.LBE57:
 308              	.LBE74:
 309              	.LBE81:
 310              	.LBE88:
 311              	.LBE95:
 312              	.LBE104:
 313              	.LBE115:
 314              	.LBE126:
 315              	.LBE138:
 316              	.LBE153:
 317              	.LBE167:
 125:src/riscv.cpp ****         else if (a0 == 0x0000000000000023UL) {
 318              		.loc 1 125 14
 319              	.LBB168:
 320              	.LBB154:
 321              	.LBB139:
 322              	.LBB127:
 323              	.LBB116:
 324              	.LBB105:
 325              	.LBB96:
 326              	.LBB89:
 327              	.LBB82:
 328              	.LBB75:
 329              	.LBB69:
 330              	.LBB58:
 331 00f0 13073002 		li	a4,35
 332 00f4 638EE714 		beq	a5,a4,.L42
 333              	.LBE58:
 334              	.LBE69:
 335              	.LBE75:
 336              	.LBE82:
 337              	.LBE89:
 338              	.LBE96:
 339              	.LBE105:
 340              	.LBE116:
 341              	.LBE127:
 342              	.LBE139:
GAS LISTING /tmp/ccQdnIdT.s 			page 14


 343              	.LBE154:
 344              	.LBE168:
 143:src/riscv.cpp ****         else if (a0 == 0x0000000000000024UL) {
 345              		.loc 1 143 14
 346              	.LBB169:
 347              	.LBB155:
 348              	.LBB140:
 349              	.LBB128:
 350              	.LBB117:
 351              	.LBB106:
 352              	.LBB97:
 353              	.LBB90:
 354              	.LBB83:
 355              	.LBB76:
 356              	.LBB70:
 357              	.LBB65:
 358              	.LBB59:
 359 00f8 13074002 		li	a4,36
 360 00fc 6396E702 		bne	a5,a4,.L6
 361              	.LBB60:
 146:src/riscv.cpp ****             uint64 a;
 362              		.loc 1 146 13
 147:src/riscv.cpp ****             Ksemaphore* sem;
 363              		.loc 1 147 13
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 364              		.loc 1 148 13
 148:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(sem));
 365              		.loc 1 148 63 is_stmt 0
 366              	#APP
 367              	# 148 "src/riscv.cpp" 1
 368              		mv a0, a7
 369              	# 0 "" 2
 370              	.LVL7:
 149:src/riscv.cpp ****             if(sem!= nullptr) {
 371              		.loc 1 149 13 is_stmt 1
 372              	#NO_APP
 373 0104 63060516 		beqz	a0,.L29
 150:src/riscv.cpp ****                 a = sem->signal();
 374              		.loc 1 150 17
 150:src/riscv.cpp ****                 a = sem->signal();
 375              		.loc 1 150 32 is_stmt 0
 376 0108 97000000 		call	_ZN10Ksemaphore6signalEv@plt
 376      E7800000 
 377              	.LVL8:
 378              	.L21:
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 379              		.loc 1 155 13 is_stmt 1
 155:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 380              		.loc 1 155 50 is_stmt 0
 381              	#APP
 382              	# 155 "src/riscv.cpp" 1
 383              		mv a0, a0
 384              	# 0 "" 2
 385              	#NO_APP
 386              	.LBE60:
 387 0114 6F004001 		j	.L6
 388              	.LVL9:
GAS LISTING /tmp/ccQdnIdT.s 			page 15


 389              	.L33:
 390              	.LBE59:
 391              	.LBE65:
 392              	.LBE70:
 393              	.LBE76:
 394              	.LBE83:
 395              	.LBE90:
 396              	.LBE97:
 397              	.LBE106:
 398              	.LBE117:
 399              	.LBE128:
 400              	.LBB129:
  26:src/riscv.cpp ****             size_t a7;
 401              		.loc 1 26 13 is_stmt 1
  27:src/riscv.cpp ****             void *a;
 402              		.loc 1 27 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 403              		.loc 1 28 13
  28:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 404              		.loc 1 28 62 is_stmt 0
 405              	#APP
 406              	# 28 "src/riscv.cpp" 1
 407              		mv a0, a7
 408              	# 0 "" 2
 409              	.LVL10:
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 410              		.loc 1 30 13 is_stmt 1
  30:src/riscv.cpp ****             a=MemoryAllocator::malloc(a7);
 411              		.loc 1 30 38 is_stmt 0
 412              	#NO_APP
 413 011c 97000000 		call	_ZN15MemoryAllocator6mallocEm@plt
 413      E7800000 
 414              	.LVL11:
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 415              		.loc 1 31 13 is_stmt 1
  31:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 416              		.loc 1 31 50 is_stmt 0
 417              	#APP
 418              	# 31 "src/riscv.cpp" 1
 419              		mv a0, a0
 420              	# 0 "" 2
 421              	.LVL12:
 422              	#NO_APP
 423              	.L6:
 424              	.LBE129:
 425              	.LBE140:
 160:src/riscv.cpp ****         w_sstatus(sstatus);
 426              		.loc 1 160 9 is_stmt 1
 427              	.LBB141:
 428              	.LBB142:
 193:src/../h/riscv.hpp **** }
 429              		.loc 2 193 5
 193:src/../h/riscv.hpp **** }
 430              		.loc 2 193 77 is_stmt 0
 431              	#APP
 432              	# 193 "src/../h/riscv.hpp" 1
 433              		csrw sstatus, s2
GAS LISTING /tmp/ccQdnIdT.s 			page 16


 434              	# 0 "" 2
 435              	.LVL13:
 436              	#NO_APP
 437              	.LBE142:
 438              	.LBE141:
 161:src/riscv.cpp ****         w_sepc(sepc);
 439              		.loc 1 161 9 is_stmt 1
 440              	.LBB143:
 441              	.LBB144:
 125:src/../h/riscv.hpp **** }
 442              		.loc 2 125 5
 125:src/../h/riscv.hpp **** }
 443              		.loc 2 125 65 is_stmt 0
 444              	#APP
 445              	# 125 "src/../h/riscv.hpp" 1
 446              		csrw sepc, s1
 447              	# 0 "" 2
 448              	.LVL14:
 449              	#NO_APP
 450              	.L3:
 451              	.LBE144:
 452              	.LBE143:
 453              	.LBE155:
 454              	.LBE169:
 455              		.loc 1 186 1
 456 0130 83308104 		ld	ra,72(sp)
 457              		.cfi_remember_state
 458              		.cfi_restore 1
 459 0134 03340104 		ld	s0,64(sp)
 460              		.cfi_restore 8
 461              		.cfi_def_cfa 2, 80
 462 0138 83348103 		ld	s1,56(sp)
 463              		.cfi_restore 9
 464 013c 03390103 		ld	s2,48(sp)
 465              		.cfi_restore 18
 466 0140 83398102 		ld	s3,40(sp)
 467              		.cfi_restore 19
 468 0144 13010105 		addi	sp,sp,80
 469              		.cfi_def_cfa_offset 0
 470 0148 67800000 		jr	ra
 471              	.LVL15:
 472              	.L34:
 473              		.cfi_restore_state
 474              	.LBB170:
 475              	.LBB156:
 476              	.LBB145:
 477              	.LBB130:
 478              	.LBB118:
  35:src/riscv.cpp ****             void* a7;
 479              		.loc 1 35 13 is_stmt 1
  36:src/riscv.cpp ****             uint64 a;
 480              		.loc 1 36 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 481              		.loc 1 37 13
  37:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 482              		.loc 1 37 62 is_stmt 0
 483              	#APP
GAS LISTING /tmp/ccQdnIdT.s 			page 17


 484              	# 37 "src/riscv.cpp" 1
 485              		mv a0, a7
 486              	# 0 "" 2
 487              	.LVL16:
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 488              		.loc 1 39 13 is_stmt 1
  39:src/riscv.cpp ****             a=MemoryAllocator::free(a7);
 489              		.loc 1 39 36 is_stmt 0
 490              	#NO_APP
 491 0150 97000000 		call	_ZN15MemoryAllocator4freeEPv@plt
 491      E7800000 
 492              	.LVL17:
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 493              		.loc 1 40 13 is_stmt 1
  40:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 494              		.loc 1 40 50 is_stmt 0
 495              	#APP
 496              	# 40 "src/riscv.cpp" 1
 497              		mv a0, a0
 498              	# 0 "" 2
 499              	#NO_APP
 500              	.LBE118:
 501 015c 6FF0DFFC 		j	.L6
 502              	.LVL18:
 503              	.L35:
 504              	.LBB119:
 505              	.LBB107:
  47:src/riscv.cpp ****             TCB** tcb;
 506              		.loc 1 47 13 is_stmt 1
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 507              		.loc 1 48 13
  48:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 508              		.loc 1 48 63 is_stmt 0
 509              	#APP
 510              	# 48 "src/riscv.cpp" 1
 511              		mv s3, a1
 512              	# 0 "" 2
 513              	.LVL19:
  49:src/riscv.cpp ****             Body a2;
 514              		.loc 1 49 13 is_stmt 1
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 515              		.loc 1 50 13
  50:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 516              		.loc 1 50 62 is_stmt 0
 517              	# 50 "src/riscv.cpp" 1
 518              		mv a0, a2
 519              	# 0 "" 2
 520              	.LVL20:
  52:src/riscv.cpp ****             void* a7;
 521              		.loc 1 52 13 is_stmt 1
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 522              		.loc 1 53 13
  53:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 523              		.loc 1 53 62 is_stmt 0
 524              	# 53 "src/riscv.cpp" 1
 525              		mv a1, a7
 526              	# 0 "" 2
GAS LISTING /tmp/ccQdnIdT.s 			page 18


 527              	.LVL21:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 528              		.loc 1 55 13 is_stmt 1
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 529              		.loc 1 55 37 is_stmt 0
 530              	#NO_APP
 531 016c 97000000 		call	_ZN3TCB12createThreadEPFvPvES0_@plt
 531      E7800000 
 532              	.LVL22:
  55:src/riscv.cpp ****             *tcb = TCB::createThread(a2, a7);
 533              		.loc 1 55 18
 534 0174 23B0A900 		sd	a0,0(s3)
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 535              		.loc 1 56 13 is_stmt 1
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 536              		.loc 1 56 31 is_stmt 0
 537 0178 63880900 		beqz	s3,.L24
 538 017c 93070000 		li	a5,0
 539              	.L9:
 540              	.LVL23:
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 541              		.loc 1 58 13 is_stmt 1 discriminator 4
  58:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 542              		.loc 1 58 51 is_stmt 0 discriminator 4
 543              	#APP
 544              	# 58 "src/riscv.cpp" 1
 545              		mv a0, a5
 546              	# 0 "" 2
 547              	#NO_APP
 548              	.LBE107:
 549 0184 6FF05FFA 		j	.L6
 550              	.LVL24:
 551              	.L24:
 552              	.LBB108:
  56:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 553              		.loc 1 56 31
 554 0188 9307F0FF 		li	a5,-1
 555 018c 6FF05FFF 		j	.L9
 556              	.LVL25:
 557              	.L36:
 558              	.LBE108:
 559              	.LBB109:
 560              	.LBB98:
  63:src/riscv.cpp ****             uint64 a;
 561              		.loc 1 63 13 is_stmt 1
  64:src/riscv.cpp ****             a=TCB::exitThread();
 562              		.loc 1 64 13
  64:src/riscv.cpp ****             a=TCB::exitThread();
 563              		.loc 1 64 30 is_stmt 0
 564 0190 97000000 		call	_ZN3TCB10exitThreadEv@plt
 564      E7800000 
 565              	.LVL26:
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 566              		.loc 1 65 13 is_stmt 1
  65:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 567              		.loc 1 65 50 is_stmt 0
 568              	#APP
GAS LISTING /tmp/ccQdnIdT.s 			page 19


 569              	# 65 "src/riscv.cpp" 1
 570              		mv a0, a0
 571              	# 0 "" 2
 572              	#NO_APP
 573              	.LBE98:
 574 019c 6FF0DFF8 		j	.L6
 575              	.LVL27:
 576              	.L37:
 577              	.LBB99:
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 578              		.loc 1 69 13 is_stmt 1
  69:src/riscv.cpp ****             TCB::timeSliceCounter = 0;
 579              		.loc 1 69 35 is_stmt 0
 580 01a0 97070000 		la	a5,_ZN3TCB16timeSliceCounterE
 580      83B70700 
 581              	.LVL28:
 582 01a8 23B00700 		sd	zero,0(a5)
  70:src/riscv.cpp ****             TCB::dispatch();
 583              		.loc 1 70 13 is_stmt 1
  70:src/riscv.cpp ****             TCB::dispatch();
 584              		.loc 1 70 26 is_stmt 0
 585 01ac 97000000 		call	_ZN3TCB8dispatchEv@plt
 585      E7800000 
 586              	.LVL29:
 587 01b4 6FF05FF7 		j	.L6
 588              	.LVL30:
 589              	.L38:
 590              	.LBB91:
 591              	.LBB84:
  75:src/riscv.cpp ****             TCB** tcb;
 592              		.loc 1 75 13 is_stmt 1
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 593              		.loc 1 76 13
  76:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 594              		.loc 1 76 63 is_stmt 0
 595              	#APP
 596              	# 76 "src/riscv.cpp" 1
 597              		mv a5, a1
 598              	# 0 "" 2
 599              	.LVL31:
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
 600              		.loc 1 77 13 is_stmt 1
  77:src/riscv.cpp ****             Scheduler::put(*tcb);
 601              		.loc 1 77 27 is_stmt 0
 602              	#NO_APP
 603 01bc 03B50700 		ld	a0,0(a5)
 604 01c0 97000000 		call	_ZN9Scheduler3putEP3TCB@plt
 604      E7800000 
 605              	.LVL32:
 606              	.LBE84:
 607 01c8 6FF01FF6 		j	.L6
 608              	.LVL33:
 609              	.L39:
 610              	.LBB85:
 611              	.LBB77:
  81:src/riscv.cpp ****             TCB** tcb;
 612              		.loc 1 81 13 is_stmt 1
GAS LISTING /tmp/ccQdnIdT.s 			page 20


  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 613              		.loc 1 82 13
  82:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(tcb));
 614              		.loc 1 82 63 is_stmt 0
 615              	#APP
 616              	# 82 "src/riscv.cpp" 1
 617              		mv s3, a1
 618              	# 0 "" 2
 619              	.LVL34:
  83:src/riscv.cpp ****             Body a2;
 620              		.loc 1 83 13 is_stmt 1
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 621              		.loc 1 84 13
  84:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 622              		.loc 1 84 62 is_stmt 0
 623              	# 84 "src/riscv.cpp" 1
 624              		mv a0, a2
 625              	# 0 "" 2
 626              	.LVL35:
  86:src/riscv.cpp ****             void* a7;
 627              		.loc 1 86 13 is_stmt 1
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 628              		.loc 1 87 13
  87:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 629              		.loc 1 87 62 is_stmt 0
 630              	# 87 "src/riscv.cpp" 1
 631              		mv a1, a7
 632              	# 0 "" 2
 633              	.LVL36:
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 634              		.loc 1 89 13 is_stmt 1
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 635              		.loc 1 89 62 is_stmt 0
 636              	#NO_APP
 637 01d8 97000000 		call	_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_@plt
 637      E7800000 
 638              	.LVL37:
  89:src/riscv.cpp ****             *tcb = TCB::createThreadWithoutPuttingInScheduler(a2, a7);
 639              		.loc 1 89 18
 640 01e0 23B0A900 		sd	a0,0(s3)
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 641              		.loc 1 90 13 is_stmt 1
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 642              		.loc 1 90 31 is_stmt 0
 643 01e4 63880900 		beqz	s3,.L25
 644 01e8 93070000 		li	a5,0
 645              	.L14:
 646              	.LVL38:
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 647              		.loc 1 92 13 is_stmt 1 discriminator 4
  92:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a0));
 648              		.loc 1 92 51 is_stmt 0 discriminator 4
 649              	#APP
 650              	# 92 "src/riscv.cpp" 1
 651              		mv a0, a5
 652              	# 0 "" 2
 653              	#NO_APP
GAS LISTING /tmp/ccQdnIdT.s 			page 21


 654              	.LBE77:
 655 01f0 6FF09FF3 		j	.L6
 656              	.LVL39:
 657              	.L25:
 658              	.LBB78:
  90:src/riscv.cpp ****             a0=(tcb!= nullptr)?0 : -1;
 659              		.loc 1 90 31
 660 01f4 9307F0FF 		li	a5,-1
 661 01f8 6FF05FFF 		j	.L14
 662              	.LVL40:
 663              	.L40:
 664              	.LBE78:
 665              	.LBB79:
 666              	.LBB71:
  97:src/riscv.cpp ****             unsigned a2;
 667              		.loc 1 97 13 is_stmt 1
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 668              		.loc 1 98 13
  98:src/riscv.cpp ****             __asm__ volatile ("mv %[a2], a2" : [a2] "=r"(a2));
 669              		.loc 1 98 62 is_stmt 0
 670              	#APP
 671              	# 98 "src/riscv.cpp" 1
 672              		mv a0, a2
 673              	# 0 "" 2
 674              	#NO_APP
 675 0200 1B050500 		sext.w	a0,a0
 676              	.LVL41:
 100:src/riscv.cpp ****             Ksemaphore** sem;
 677              		.loc 1 100 13 is_stmt 1
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 678              		.loc 1 101 13
 101:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 679              		.loc 1 101 63 is_stmt 0
 680              	#APP
 681              	# 101 "src/riscv.cpp" 1
 682              		mv s3, a1
 683              	# 0 "" 2
 684              	.LVL42:
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 685              		.loc 1 102 13 is_stmt 1
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 686              		.loc 1 102 47 is_stmt 0
 687              	#NO_APP
 688 0208 97000000 		call	_ZN10Ksemaphore15createSemaphoreEj@plt
 688      E7800000 
 689              	.LVL43:
 102:src/riscv.cpp ****             *sem = Ksemaphore::createSemaphore(a2);
 690              		.loc 1 102 18
 691 0210 23B0A900 		sd	a0,0(s3)
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 692              		.loc 1 104 13 is_stmt 1
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 693              		.loc 1 104 38 is_stmt 0
 694 0214 63880900 		beqz	s3,.L26
 695 0218 93070000 		li	a5,0
 696              	.L16:
 697              	.LVL44:
GAS LISTING /tmp/ccQdnIdT.s 			page 22


 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 698              		.loc 1 105 13 is_stmt 1 discriminator 4
 105:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 699              		.loc 1 105 50 is_stmt 0 discriminator 4
 700              	#APP
 701              	# 105 "src/riscv.cpp" 1
 702              		mv a0, a5
 703              	# 0 "" 2
 704              	#NO_APP
 705              	.LBE71:
 706 0220 6FF09FF0 		j	.L6
 707              	.LVL45:
 708              	.L26:
 709              	.LBB72:
 104:src/riscv.cpp ****             uint64 a= (sem!= nullptr)?0: -1;
 710              		.loc 1 104 38
 711 0224 9307F0FF 		li	a5,-1
 712 0228 6FF05FFF 		j	.L16
 713              	.LVL46:
 714              	.L41:
 715              	.LBE72:
 716              	.LBB73:
 717              	.LBB66:
 111:src/riscv.cpp ****             uint64 a;
 718              		.loc 1 111 13 is_stmt 1
 112:src/riscv.cpp ****             Ksemaphore* sem;
 719              		.loc 1 112 13
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 720              		.loc 1 113 13
 113:src/riscv.cpp ****             __asm__ volatile ("mv %[a1], a1" : [a1] "=r"(sem));
 721              		.loc 1 113 63 is_stmt 0
 722              	#APP
 723              	# 113 "src/riscv.cpp" 1
 724              		mv a0, a1
 725              	# 0 "" 2
 726              	.LVL47:
 115:src/riscv.cpp ****             a=0;
 727              		.loc 1 115 13 is_stmt 1
 116:src/riscv.cpp ****             if(sem== nullptr){
 728              		.loc 1 116 13
 729              	#NO_APP
 730 0230 630C0500 		beqz	a0,.L27
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 731              		.loc 1 120 17
 120:src/riscv.cpp ****                 sem->closeSemaphore();
 732              		.loc 1 120 36 is_stmt 0
 733 0234 97000000 		call	_ZN10Ksemaphore14closeSemaphoreEv@plt
 733      E7800000 
 734              	.LVL48:
 115:src/riscv.cpp ****             a=0;
 735              		.loc 1 115 14
 736 023c 93070000 		li	a5,0
 737              	.L18:
 738              	.LVL49:
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 739              		.loc 1 122 13 is_stmt 1
 122:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
GAS LISTING /tmp/ccQdnIdT.s 			page 23


 740              		.loc 1 122 50 is_stmt 0
 741              	#APP
 742              	# 122 "src/riscv.cpp" 1
 743              		mv a0, a5
 744              	# 0 "" 2
 745              	#NO_APP
 746              	.LBE66:
 747 0244 6FF05FEE 		j	.L6
 748              	.LVL50:
 749              	.L27:
 750              	.LBB67:
 117:src/riscv.cpp ****                 a=1;
 751              		.loc 1 117 18
 752 0248 93071000 		li	a5,1
 753              	.LVL51:
 754 024c 6FF05FFF 		j	.L18
 755              	.LVL52:
 756              	.L42:
 757              	.LBE67:
 758              	.LBB68:
 759              	.LBB62:
 128:src/riscv.cpp ****             int a;
 760              		.loc 1 128 13 is_stmt 1
 129:src/riscv.cpp ****             Ksemaphore* a7;
 761              		.loc 1 129 13
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 762              		.loc 1 130 13
 130:src/riscv.cpp ****             __asm__ volatile ("mv %[a7], a7" : [a7] "=r"(a7));
 763              		.loc 1 130 62 is_stmt 0
 764              	#APP
 765              	# 130 "src/riscv.cpp" 1
 766              		mv a0, a7
 767              	# 0 "" 2
 768              	.LVL53:
 132:src/riscv.cpp ****             if(a7!= nullptr){
 769              		.loc 1 132 13 is_stmt 1
 770              	#NO_APP
 771 0254 630A0500 		beqz	a0,.L28
 133:src/riscv.cpp ****                 a = a7->wait();
 772              		.loc 1 133 17
 133:src/riscv.cpp ****                 a = a7->wait();
 773              		.loc 1 133 29 is_stmt 0
 774 0258 97000000 		call	_ZN10Ksemaphore4waitEv@plt
 774      E7800000 
 775              	.LVL54:
 776              	.L20:
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 777              		.loc 1 140 13 is_stmt 1
 140:src/riscv.cpp ****             __asm__ volatile("mv a0, %0"::"r"(a));
 778              		.loc 1 140 50 is_stmt 0
 779              	#APP
 780              	# 140 "src/riscv.cpp" 1
 781              		mv a0, a0
 782              	# 0 "" 2
 783              	#NO_APP
 784              	.LBE62:
 785 0264 6FF05FEC 		j	.L6
GAS LISTING /tmp/ccQdnIdT.s 			page 24


 786              	.LVL55:
 787              	.L28:
 788              	.LBB63:
 136:src/riscv.cpp ****                 a=-1;
 789              		.loc 1 136 18
 790 0268 1305F0FF 		li	a0,-1
 791              	.LVL56:
 792 026c 6FF05FFF 		j	.L20
 793              	.LVL57:
 794              	.L29:
 795              	.LBE63:
 796              	.LBB64:
 797              	.LBB61:
 152:src/riscv.cpp ****                 a=1;
 798              		.loc 1 152 18
 799 0270 13051000 		li	a0,1
 800              	.LVL58:
 801 0274 6FF0DFE9 		j	.L21
 802              	.LVL59:
 803              	.L32:
 804              	.LBE61:
 805              	.LBE64:
 806              	.LBE68:
 807              	.LBE73:
 808              	.LBE79:
 809              	.LBE85:
 810              	.LBE91:
 811              	.LBE99:
 812              	.LBE109:
 813              	.LBE119:
 814              	.LBE130:
 815              	.LBE145:
 816              	.LBE156:
 177:src/riscv.cpp ****         mc_sip(SIP_SSIP);
 817              		.loc 1 177 9 is_stmt 1
 818              	.LBB157:
 819              	.LBB158:
 159:src/../h/riscv.hpp **** }
 820              		.loc 2 159 5
 159:src/../h/riscv.hpp **** }
 821              		.loc 2 159 64 is_stmt 0
 822 0278 93072000 		li	a5,2
 823              	#APP
 824              	# 159 "src/../h/riscv.hpp" 1
 160:src/../h/riscv.hpp **** 
 825              		csrc sip, a5
 826              	# 0 "" 2
 827              		.loc 2 160 1
 828              	#NO_APP
 829 0280 6FF01FEB 		j	.L3
 830              	.LBE158:
 831              	.LBE157:
 832              	.LBE170:
 833              		.cfi_endproc
 834              	.LFE48:
 836              	.Letext0:
 837              		.file 3 "src/../h/../h/../lib/hw.h"
GAS LISTING /tmp/ccQdnIdT.s 			page 25


 838              		.file 4 "src/../h/../h/MemoryAllocator.hpp"
 839              		.file 5 "src/../h/../h/scheduler.hpp"
 840              		.file 6 "src/../h/../h/list.hpp"
 841              		.file 7 "src/../h/../h/TCB.hpp"
 842              		.file 8 "src/../h/../h/Ksemaphore.hpp"
 843              		.file 9 "src/../h/../lib/console.h"
GAS LISTING /tmp/ccQdnIdT.s 			page 26


DEFINED SYMBOLS
                            *ABS*:0000000000000000 riscv.cpp
     /tmp/ccQdnIdT.s:9      .text:0000000000000000 _ZN5Riscv10popSppSpieEv
     /tmp/ccQdnIdT.s:13     .text:0000000000000000 .L0 
     /tmp/ccQdnIdT.s:14     .text:0000000000000000 .L0 
     /tmp/ccQdnIdT.s:15     .text:0000000000000004 .L0 
     /tmp/ccQdnIdT.s:17     .text:0000000000000008 .L0 
     /tmp/ccQdnIdT.s:19     .text:000000000000000c .L0 
     /tmp/ccQdnIdT.s:21     .text:000000000000000c .L0 
       src/riscv.cpp:9      .text:000000000000000c .L0 
     /tmp/ccQdnIdT.s:27     .text:0000000000000010 .L0 
       src/riscv.cpp:10     .text:0000000000000010 .L0 
     /tmp/ccQdnIdT.s:33     .text:0000000000000014 .L0 
     /tmp/ccQdnIdT.s:34     .text:0000000000000018 .L0 
     /tmp/ccQdnIdT.s:35     .text:0000000000000018 .L0 
     /tmp/ccQdnIdT.s:37     .text:000000000000001c .L0 
     /tmp/ccQdnIdT.s:39     .text:0000000000000020 .L0 
     /tmp/ccQdnIdT.s:45     .text:0000000000000020 _ZN5Riscv20handleSupervisorTrapEv
     /tmp/ccQdnIdT.s:48     .text:0000000000000020 .L0 
     /tmp/ccQdnIdT.s:49     .text:0000000000000020 .L0 
     /tmp/ccQdnIdT.s:50     .text:0000000000000024 .L0 
     /tmp/ccQdnIdT.s:56     .text:0000000000000038 .L0 
     /tmp/ccQdnIdT.s:57     .text:0000000000000038 .L0 
     /tmp/ccQdnIdT.s:58     .text:0000000000000038 .L0 
     /tmp/ccQdnIdT.s:59     .text:0000000000000038 .L0 
     /tmp/ccQdnIdT.s:60     .text:0000000000000038 .L0 
     /tmp/ccQdnIdT.s:62     .text:000000000000003c .L0 
     /tmp/ccQdnIdT.s:67     .text:000000000000003c .L0 
     /tmp/ccQdnIdT.s:68     .text:000000000000003c .L0 
     /tmp/ccQdnIdT.s:69     .text:000000000000003c .L0 
  src/../h/riscv.hpp:107    .text:000000000000003c .L0 
     /tmp/ccQdnIdT.s:77     .text:0000000000000044 .L0 
     /tmp/ccQdnIdT.s:78     .text:0000000000000044 .L0 
     /tmp/ccQdnIdT.s:84     .text:0000000000000048 .L0 
     /tmp/ccQdnIdT.s:85     .text:0000000000000048 .L0 
     /tmp/ccQdnIdT.s:87     .text:000000000000004c .L0 
     /tmp/ccQdnIdT.s:90     .text:0000000000000054 .L0 
     /tmp/ccQdnIdT.s:95     .text:0000000000000064 .L0 
     /tmp/ccQdnIdT.s:100    .text:0000000000000074 .L0 
     /tmp/ccQdnIdT.s:101    .text:0000000000000074 .L0 
     /tmp/ccQdnIdT.s:105    .text:000000000000007c .L0 
     /tmp/ccQdnIdT.s:113    .text:0000000000000080 .L0 
     /tmp/ccQdnIdT.s:114    .text:0000000000000080 .L0 
     /tmp/ccQdnIdT.s:115    .text:0000000000000080 .L0 
  src/../h/riscv.hpp:119    .text:0000000000000080 .L0 
     /tmp/ccQdnIdT.s:123    .text:0000000000000088 .L0 
     /tmp/ccQdnIdT.s:124    .text:0000000000000088 .L0 
     /tmp/ccQdnIdT.s:128    .text:000000000000008c .L0 
     /tmp/ccQdnIdT.s:133    .text:0000000000000090 .L0 
     /tmp/ccQdnIdT.s:134    .text:0000000000000090 .L0 
     /tmp/ccQdnIdT.s:135    .text:0000000000000090 .L0 
  src/../h/riscv.hpp:187    .text:0000000000000090 .L0 
     /tmp/ccQdnIdT.s:143    .text:0000000000000098 .L0 
     /tmp/ccQdnIdT.s:144    .text:0000000000000098 .L0 
     /tmp/ccQdnIdT.s:151    .text:000000000000009c .L0 
     /tmp/ccQdnIdT.s:152    .text:000000000000009c .L0 
     /tmp/ccQdnIdT.s:153    .text:000000000000009c .L0 
GAS LISTING /tmp/ccQdnIdT.s 			page 27


  src/../h/riscv.hpp:200    .text:000000000000009c .L0 
     /tmp/ccQdnIdT.s:161    .text:00000000000000a4 .L0 
     /tmp/ccQdnIdT.s:162    .text:00000000000000a4 .L0 
     /tmp/ccQdnIdT.s:168    .text:00000000000000a8 .L0 
     /tmp/ccQdnIdT.s:179    .text:00000000000000b0 .L0 
     /tmp/ccQdnIdT.s:191    .text:00000000000000b8 .L0 
     /tmp/ccQdnIdT.s:205    .text:00000000000000c0 .L0 
     /tmp/ccQdnIdT.s:221    .text:00000000000000c8 .L0 
     /tmp/ccQdnIdT.s:239    .text:00000000000000d0 .L0 
     /tmp/ccQdnIdT.s:259    .text:00000000000000d8 .L0 
     /tmp/ccQdnIdT.s:281    .text:00000000000000e0 .L0 
     /tmp/ccQdnIdT.s:305    .text:00000000000000e8 .L0 
     /tmp/ccQdnIdT.s:331    .text:00000000000000f0 .L0 
     /tmp/ccQdnIdT.s:359    .text:00000000000000f8 .L0 
     /tmp/ccQdnIdT.s:363    .text:0000000000000100 .L0 
     /tmp/ccQdnIdT.s:364    .text:0000000000000100 .L0 
     /tmp/ccQdnIdT.s:365    .text:0000000000000100 .L0 
       src/riscv.cpp:148    .text:0000000000000100 .L0 
     /tmp/ccQdnIdT.s:373    .text:0000000000000104 .L0 
     /tmp/ccQdnIdT.s:375    .text:0000000000000108 .L0 
     /tmp/ccQdnIdT.s:376    .text:0000000000000108 .L0 
     /tmp/ccQdnIdT.s:380    .text:0000000000000110 .L0 
       src/riscv.cpp:155    .text:0000000000000110 .L0 
     /tmp/ccQdnIdT.s:402    .text:0000000000000118 .L0 
     /tmp/ccQdnIdT.s:403    .text:0000000000000118 .L0 
     /tmp/ccQdnIdT.s:404    .text:0000000000000118 .L0 
       src/riscv.cpp:28     .text:0000000000000118 .L0 
     /tmp/ccQdnIdT.s:411    .text:000000000000011c .L0 
     /tmp/ccQdnIdT.s:413    .text:000000000000011c .L0 
     /tmp/ccQdnIdT.s:416    .text:0000000000000124 .L0 
       src/riscv.cpp:31     .text:0000000000000124 .L0 
     /tmp/ccQdnIdT.s:429    .text:0000000000000128 .L0 
     /tmp/ccQdnIdT.s:430    .text:0000000000000128 .L0 
  src/../h/riscv.hpp:193    .text:0000000000000128 .L0 
     /tmp/ccQdnIdT.s:442    .text:000000000000012c .L0 
     /tmp/ccQdnIdT.s:443    .text:000000000000012c .L0 
  src/../h/riscv.hpp:125    .text:000000000000012c .L0 
     /tmp/ccQdnIdT.s:456    .text:0000000000000130 .L0 
     /tmp/ccQdnIdT.s:457    .text:0000000000000134 .L0 
     /tmp/ccQdnIdT.s:458    .text:0000000000000134 .L0 
     /tmp/ccQdnIdT.s:460    .text:0000000000000138 .L0 
     /tmp/ccQdnIdT.s:461    .text:0000000000000138 .L0 
     /tmp/ccQdnIdT.s:463    .text:000000000000013c .L0 
     /tmp/ccQdnIdT.s:465    .text:0000000000000140 .L0 
     /tmp/ccQdnIdT.s:467    .text:0000000000000144 .L0 
     /tmp/ccQdnIdT.s:469    .text:0000000000000148 .L0 
     /tmp/ccQdnIdT.s:473    .text:000000000000014c .L0 
     /tmp/ccQdnIdT.s:480    .text:000000000000014c .L0 
     /tmp/ccQdnIdT.s:481    .text:000000000000014c .L0 
     /tmp/ccQdnIdT.s:482    .text:000000000000014c .L0 
       src/riscv.cpp:37     .text:000000000000014c .L0 
     /tmp/ccQdnIdT.s:489    .text:0000000000000150 .L0 
     /tmp/ccQdnIdT.s:491    .text:0000000000000150 .L0 
     /tmp/ccQdnIdT.s:494    .text:0000000000000158 .L0 
       src/riscv.cpp:40     .text:0000000000000158 .L0 
     /tmp/ccQdnIdT.s:507    .text:0000000000000160 .L0 
     /tmp/ccQdnIdT.s:508    .text:0000000000000160 .L0 
GAS LISTING /tmp/ccQdnIdT.s 			page 28


       src/riscv.cpp:48     .text:0000000000000160 .L0 
     /tmp/ccQdnIdT.s:515    .text:0000000000000164 .L0 
     /tmp/ccQdnIdT.s:516    .text:0000000000000164 .L0 
       src/riscv.cpp:50     .text:0000000000000164 .L0 
     /tmp/ccQdnIdT.s:522    .text:0000000000000168 .L0 
     /tmp/ccQdnIdT.s:523    .text:0000000000000168 .L0 
       src/riscv.cpp:53     .text:0000000000000168 .L0 
     /tmp/ccQdnIdT.s:529    .text:000000000000016c .L0 
     /tmp/ccQdnIdT.s:531    .text:000000000000016c .L0 
     /tmp/ccQdnIdT.s:534    .text:0000000000000174 .L0 
     /tmp/ccQdnIdT.s:536    .text:0000000000000178 .L0 
     /tmp/ccQdnIdT.s:537    .text:0000000000000178 .L0 
     /tmp/ccQdnIdT.s:542    .text:0000000000000180 .L0 
       src/riscv.cpp:58     .text:0000000000000180 .L0 
     /tmp/ccQdnIdT.s:554    .text:0000000000000188 .L0 
     /tmp/ccQdnIdT.s:562    .text:0000000000000190 .L0 
     /tmp/ccQdnIdT.s:563    .text:0000000000000190 .L0 
     /tmp/ccQdnIdT.s:564    .text:0000000000000190 .L0 
     /tmp/ccQdnIdT.s:567    .text:0000000000000198 .L0 
       src/riscv.cpp:65     .text:0000000000000198 .L0 
     /tmp/ccQdnIdT.s:579    .text:00000000000001a0 .L0 
     /tmp/ccQdnIdT.s:580    .text:00000000000001a0 .L0 
     /tmp/ccQdnIdT.s:584    .text:00000000000001ac .L0 
     /tmp/ccQdnIdT.s:585    .text:00000000000001ac .L0 
     /tmp/ccQdnIdT.s:593    .text:00000000000001b8 .L0 
     /tmp/ccQdnIdT.s:594    .text:00000000000001b8 .L0 
       src/riscv.cpp:76     .text:00000000000001b8 .L0 
     /tmp/ccQdnIdT.s:601    .text:00000000000001bc .L0 
     /tmp/ccQdnIdT.s:603    .text:00000000000001bc .L0 
     /tmp/ccQdnIdT.s:613    .text:00000000000001cc .L0 
     /tmp/ccQdnIdT.s:614    .text:00000000000001cc .L0 
       src/riscv.cpp:82     .text:00000000000001cc .L0 
     /tmp/ccQdnIdT.s:621    .text:00000000000001d0 .L0 
     /tmp/ccQdnIdT.s:622    .text:00000000000001d0 .L0 
       src/riscv.cpp:84     .text:00000000000001d0 .L0 
     /tmp/ccQdnIdT.s:628    .text:00000000000001d4 .L0 
     /tmp/ccQdnIdT.s:629    .text:00000000000001d4 .L0 
       src/riscv.cpp:87     .text:00000000000001d4 .L0 
     /tmp/ccQdnIdT.s:635    .text:00000000000001d8 .L0 
     /tmp/ccQdnIdT.s:637    .text:00000000000001d8 .L0 
     /tmp/ccQdnIdT.s:640    .text:00000000000001e0 .L0 
     /tmp/ccQdnIdT.s:642    .text:00000000000001e4 .L0 
     /tmp/ccQdnIdT.s:643    .text:00000000000001e4 .L0 
     /tmp/ccQdnIdT.s:648    .text:00000000000001ec .L0 
       src/riscv.cpp:92     .text:00000000000001ec .L0 
     /tmp/ccQdnIdT.s:660    .text:00000000000001f4 .L0 
     /tmp/ccQdnIdT.s:668    .text:00000000000001fc .L0 
     /tmp/ccQdnIdT.s:669    .text:00000000000001fc .L0 
       src/riscv.cpp:98     .text:00000000000001fc .L0 
     /tmp/ccQdnIdT.s:678    .text:0000000000000204 .L0 
     /tmp/ccQdnIdT.s:679    .text:0000000000000204 .L0 
       src/riscv.cpp:101    .text:0000000000000204 .L0 
     /tmp/ccQdnIdT.s:686    .text:0000000000000208 .L0 
     /tmp/ccQdnIdT.s:688    .text:0000000000000208 .L0 
     /tmp/ccQdnIdT.s:691    .text:0000000000000210 .L0 
     /tmp/ccQdnIdT.s:693    .text:0000000000000214 .L0 
     /tmp/ccQdnIdT.s:694    .text:0000000000000214 .L0 
GAS LISTING /tmp/ccQdnIdT.s 			page 29


     /tmp/ccQdnIdT.s:699    .text:000000000000021c .L0 
       src/riscv.cpp:105    .text:000000000000021c .L0 
     /tmp/ccQdnIdT.s:711    .text:0000000000000224 .L0 
     /tmp/ccQdnIdT.s:719    .text:000000000000022c .L0 
     /tmp/ccQdnIdT.s:720    .text:000000000000022c .L0 
     /tmp/ccQdnIdT.s:721    .text:000000000000022c .L0 
       src/riscv.cpp:113    .text:000000000000022c .L0 
     /tmp/ccQdnIdT.s:728    .text:0000000000000230 .L0 
     /tmp/ccQdnIdT.s:730    .text:0000000000000230 .L0 
     /tmp/ccQdnIdT.s:732    .text:0000000000000234 .L0 
     /tmp/ccQdnIdT.s:733    .text:0000000000000234 .L0 
     /tmp/ccQdnIdT.s:736    .text:000000000000023c .L0 
     /tmp/ccQdnIdT.s:740    .text:0000000000000240 .L0 
       src/riscv.cpp:122    .text:0000000000000240 .L0 
     /tmp/ccQdnIdT.s:752    .text:0000000000000248 .L0 
     /tmp/ccQdnIdT.s:761    .text:0000000000000250 .L0 
     /tmp/ccQdnIdT.s:762    .text:0000000000000250 .L0 
     /tmp/ccQdnIdT.s:763    .text:0000000000000250 .L0 
       src/riscv.cpp:130    .text:0000000000000250 .L0 
     /tmp/ccQdnIdT.s:771    .text:0000000000000254 .L0 
     /tmp/ccQdnIdT.s:773    .text:0000000000000258 .L0 
     /tmp/ccQdnIdT.s:774    .text:0000000000000258 .L0 
     /tmp/ccQdnIdT.s:778    .text:0000000000000260 .L0 
       src/riscv.cpp:140    .text:0000000000000260 .L0 
     /tmp/ccQdnIdT.s:790    .text:0000000000000268 .L0 
     /tmp/ccQdnIdT.s:799    .text:0000000000000270 .L0 
     /tmp/ccQdnIdT.s:820    .text:0000000000000278 .L0 
     /tmp/ccQdnIdT.s:821    .text:0000000000000278 .L0 
     /tmp/ccQdnIdT.s:822    .text:0000000000000278 .L0 
     /tmp/ccQdnIdT.s:829    .text:0000000000000280 .L0 
     /tmp/ccQdnIdT.s:833    .text:0000000000000284 .L0 
     /tmp/ccQdnIdT.s:844    .text:0000000000000284 .L0 
     /tmp/ccQdnIdT.s:580    .text:00000000000001a0 .L0 
     /tmp/ccQdnIdT.s:107    .text:0000000000000080 .L31
     /tmp/ccQdnIdT.s:803    .text:0000000000000278 .L32
     /tmp/ccQdnIdT.s:450    .text:0000000000000130 .L3
     /tmp/ccQdnIdT.s:389    .text:0000000000000118 .L33
     /tmp/ccQdnIdT.s:472    .text:000000000000014c .L34
     /tmp/ccQdnIdT.s:503    .text:0000000000000160 .L35
     /tmp/ccQdnIdT.s:557    .text:0000000000000190 .L36
     /tmp/ccQdnIdT.s:576    .text:00000000000001a0 .L37
     /tmp/ccQdnIdT.s:589    .text:00000000000001b8 .L38
     /tmp/ccQdnIdT.s:609    .text:00000000000001cc .L39
     /tmp/ccQdnIdT.s:663    .text:00000000000001fc .L40
     /tmp/ccQdnIdT.s:714    .text:000000000000022c .L41
     /tmp/ccQdnIdT.s:756    .text:0000000000000250 .L42
     /tmp/ccQdnIdT.s:423    .text:0000000000000128 .L6
     /tmp/ccQdnIdT.s:794    .text:0000000000000270 .L29
     /tmp/ccQdnIdT.s:551    .text:0000000000000188 .L24
     /tmp/ccQdnIdT.s:539    .text:0000000000000180 .L9
     /tmp/ccQdnIdT.s:657    .text:00000000000001f4 .L25
     /tmp/ccQdnIdT.s:645    .text:00000000000001ec .L14
     /tmp/ccQdnIdT.s:708    .text:0000000000000224 .L26
     /tmp/ccQdnIdT.s:696    .text:000000000000021c .L16
     /tmp/ccQdnIdT.s:749    .text:0000000000000248 .L27
     /tmp/ccQdnIdT.s:737    .text:0000000000000240 .L18
     /tmp/ccQdnIdT.s:787    .text:0000000000000268 .L28
GAS LISTING /tmp/ccQdnIdT.s 			page 30


     /tmp/ccQdnIdT.s:776    .text:0000000000000260 .L20
     /tmp/ccQdnIdT.s:378    .text:0000000000000110 .L21
     /tmp/ccQdnIdT.s:2570   .debug_abbrev:0000000000000000 .Ldebug_abbrev0
     /tmp/ccQdnIdT.s:4341   .debug_str:000000000000096a .LASF179
     /tmp/ccQdnIdT.s:4397   .debug_str:0000000000000bcf .LASF180
     /tmp/ccQdnIdT.s:4135   .debug_str:00000000000002e9 .LASF181
     /tmp/ccQdnIdT.s:5      .text:0000000000000000 .Ltext0
     /tmp/ccQdnIdT.s:836    .text:0000000000000284 .Letext0
     /tmp/ccQdnIdT.s:4041   .debug_line:0000000000000000 .Ldebug_line0
     /tmp/ccQdnIdT.s:4161   .debug_str:00000000000003be .LASF0
     /tmp/ccQdnIdT.s:4191   .debug_str:00000000000004bb .LASF1
     /tmp/ccQdnIdT.s:4287   .debug_str:00000000000007ec .LASF2
     /tmp/ccQdnIdT.s:4293   .debug_str:000000000000081c .LASF4
     /tmp/ccQdnIdT.s:4169   .debug_str:00000000000003f2 .LASF3
     /tmp/ccQdnIdT.s:4057   .debug_str:0000000000000072 .LASF5
     /tmp/ccQdnIdT.s:4255   .debug_str:00000000000006d1 .LASF6
     /tmp/ccQdnIdT.s:4181   .debug_str:000000000000047c .LASF7
     /tmp/ccQdnIdT.s:4133   .debug_str:00000000000002d9 .LASF8
     /tmp/ccQdnIdT.s:4143   .debug_str:000000000000033f .LASF9
     /tmp/ccQdnIdT.s:4081   .debug_str:0000000000000133 .LASF10
     /tmp/ccQdnIdT.s:4125   .debug_str:0000000000000289 .LASF11
     /tmp/ccQdnIdT.s:4095   .debug_str:0000000000000187 .LASF12
     /tmp/ccQdnIdT.s:4079   .debug_str:0000000000000123 .LASF13
     /tmp/ccQdnIdT.s:4329   .debug_str:0000000000000937 .LASF14
     /tmp/ccQdnIdT.s:4111   .debug_str:00000000000001e7 .LASF15
     /tmp/ccQdnIdT.s:4315   .debug_str:00000000000008a8 .LASF16
     /tmp/ccQdnIdT.s:4251   .debug_str:00000000000006b5 .LASF30
     /tmp/ccQdnIdT.s:4067   .debug_str:00000000000000b3 .LASF62
     /tmp/ccQdnIdT.s:4083   .debug_str:0000000000000142 .LASF17
     /tmp/ccQdnIdT.s:4065   .debug_str:00000000000000ae .LASF18
     /tmp/ccQdnIdT.s:4189   .debug_str:00000000000004b6 .LASF19
     /tmp/ccQdnIdT.s:4085   .debug_str:0000000000000147 .LASF20
     /tmp/ccQdnIdT.s:4233   .debug_str:000000000000063b .LASF21
     /tmp/ccQdnIdT.s:4311   .debug_str:0000000000000891 .LASF22
     /tmp/ccQdnIdT.s:4151   .debug_str:0000000000000370 .LASF23
     /tmp/ccQdnIdT.s:4257   .debug_str:00000000000006e4 .LASF25
     /tmp/ccQdnIdT.s:4349   .debug_str:0000000000000a57 .LASF24
     /tmp/ccQdnIdT.s:4109   .debug_str:00000000000001c6 .LASF26
     /tmp/ccQdnIdT.s:4391   .debug_str:0000000000000b9e .LASF84
     /tmp/ccQdnIdT.s:4223   .debug_str:00000000000005e4 .LASF86
     /tmp/ccQdnIdT.s:4043   .debug_str:0000000000000000 .LASF32
     /tmp/ccQdnIdT.s:4197   .debug_str:00000000000004df .LASF34
     /tmp/ccQdnIdT.s:4355   .debug_str:0000000000000a85 .LASF27
     /tmp/ccQdnIdT.s:4171   .debug_str:0000000000000404 .LASF28
     /tmp/ccQdnIdT.s:4337   .debug_str:000000000000095d .LASF29
     /tmp/ccQdnIdT.s:4131   .debug_str:00000000000002cf .LASF31
     /tmp/ccQdnIdT.s:4417   .debug_str:0000000000000c98 .LASF33
     /tmp/ccQdnIdT.s:4071   .debug_str:00000000000000cf .LASF35
     /tmp/ccQdnIdT.s:4047   .debug_str:000000000000000c .LASF36
     /tmp/ccQdnIdT.s:4249   .debug_str:00000000000006a2 .LASF37
     /tmp/ccQdnIdT.s:4309   .debug_str:0000000000000880 .LASF38
     /tmp/ccQdnIdT.s:4093   .debug_str:000000000000017e .LASF39
     /tmp/ccQdnIdT.s:4405   .debug_str:0000000000000c08 .LASF40
     /tmp/ccQdnIdT.s:4409   .debug_str:0000000000000c3b .LASF182
     /tmp/ccQdnIdT.s:4153   .debug_str:0000000000000376 .LASF183
     /tmp/ccQdnIdT.s:4399   .debug_str:0000000000000bdd .LASF41
     /tmp/ccQdnIdT.s:4179   .debug_str:000000000000045f .LASF42
GAS LISTING /tmp/ccQdnIdT.s 			page 31


     /tmp/ccQdnIdT.s:4377   .debug_str:0000000000000b54 .LASF43
     /tmp/ccQdnIdT.s:4363   .debug_str:0000000000000ab9 .LASF184
     /tmp/ccQdnIdT.s:4321   .debug_str:00000000000008d8 .LASF44
     /tmp/ccQdnIdT.s:4225   .debug_str:0000000000000610 .LASF45
     /tmp/ccQdnIdT.s:4317   .debug_str:00000000000008be .LASF46
     /tmp/ccQdnIdT.s:4123   .debug_str:0000000000000272 .LASF54
     /tmp/ccQdnIdT.s:4289   .debug_str:00000000000007fa .LASF185
     /tmp/ccQdnIdT.s:4281   .debug_str:00000000000007ba .LASF186
     /tmp/ccQdnIdT.s:4263   .debug_str:000000000000072c .LASF47
     /tmp/ccQdnIdT.s:4235   .debug_str:0000000000000640 .LASF48
     /tmp/ccQdnIdT.s:4187   .debug_str:00000000000004ad .LASF49
     /tmp/ccQdnIdT.s:4075   .debug_str:00000000000000ef .LASF50
     /tmp/ccQdnIdT.s:4211   .debug_str:0000000000000575 .LASF51
     /tmp/ccQdnIdT.s:4115   .debug_str:0000000000000223 .LASF52
     /tmp/ccQdnIdT.s:4253   .debug_str:00000000000006c5 .LASF53
     /tmp/ccQdnIdT.s:4379   .debug_str:0000000000000b5e .LASF55
     /tmp/ccQdnIdT.s:4425   .debug_str:0000000000000cc1 .LASF56
     /tmp/ccQdnIdT.s:4411   .debug_str:0000000000000c4f .LASF57
     /tmp/ccQdnIdT.s:4305   .debug_str:0000000000000861 .LASF58
     /tmp/ccQdnIdT.s:4221   .debug_str:00000000000005c7 .LASF59
     /tmp/ccQdnIdT.s:4277   .debug_str:00000000000007ac .LASF60
     /tmp/ccQdnIdT.s:4051   .debug_str:0000000000000024 .LASF61
     /tmp/ccQdnIdT.s:4333   .debug_str:000000000000094a .LASF63
     /tmp/ccQdnIdT.s:4073   .debug_str:00000000000000e1 .LASF97
     /tmp/ccQdnIdT.s:4201   .debug_str:000000000000050a .LASF99
     /tmp/ccQdnIdT.s:4091   .debug_str:0000000000000172 .LASF90
     /tmp/ccQdnIdT.s:4295   .debug_str:0000000000000823 .LASF64
     /tmp/ccQdnIdT.s:4055   .debug_str:0000000000000066 .LASF65
     /tmp/ccQdnIdT.s:4335   .debug_str:0000000000000952 .LASF66
     /tmp/ccQdnIdT.s:4229   .debug_str:000000000000061c .LASF67
     /tmp/ccQdnIdT.s:4069   .debug_str:00000000000000c3 .LASF68
     /tmp/ccQdnIdT.s:4357   .debug_str:0000000000000a8a .LASF69
     /tmp/ccQdnIdT.s:4199   .debug_str:00000000000004fd .LASF70
     /tmp/ccQdnIdT.s:4367   .debug_str:0000000000000ae2 .LASF71
     /tmp/ccQdnIdT.s:4245   .debug_str:000000000000068c .LASF174
     /tmp/ccQdnIdT.s:4271   .debug_str:000000000000077d .LASF72
     /tmp/ccQdnIdT.s:4217   .debug_str:000000000000059f .LASF73
     /tmp/ccQdnIdT.s:4227   .debug_str:0000000000000615 .LASF74
     /tmp/ccQdnIdT.s:4063   .debug_str:000000000000009d .LASF75
     /tmp/ccQdnIdT.s:4139   .debug_str:0000000000000317 .LASF76
     /tmp/ccQdnIdT.s:4215   .debug_str:0000000000000592 .LASF77
     /tmp/ccQdnIdT.s:4327   .debug_str:000000000000092a .LASF78
     /tmp/ccQdnIdT.s:4369   .debug_str:0000000000000afb .LASF79
     /tmp/ccQdnIdT.s:4113   .debug_str:00000000000001fd .LASF80
     /tmp/ccQdnIdT.s:4323   .debug_str:00000000000008dd .LASF81
     /tmp/ccQdnIdT.s:4121   .debug_str:0000000000000263 .LASF82
     /tmp/ccQdnIdT.s:4351   .debug_str:0000000000000a61 .LASF83
     /tmp/ccQdnIdT.s:4195   .debug_str:00000000000004d9 .LASF85
     /tmp/ccQdnIdT.s:4345   .debug_str:0000000000000a3d .LASF87
     /tmp/ccQdnIdT.s:4413   .debug_str:0000000000000c6a .LASF88
     /tmp/ccQdnIdT.s:4407   .debug_str:0000000000000c1a .LASF89
     /tmp/ccQdnIdT.s:4339   .debug_str:0000000000000962 .LASF187
     /tmp/ccQdnIdT.s:4265   .debug_str:000000000000073f .LASF91
     /tmp/ccQdnIdT.s:4045   .debug_str:0000000000000007 .LASF92
     /tmp/ccQdnIdT.s:4101   .debug_str:00000000000001ac .LASF93
     /tmp/ccQdnIdT.s:4353   .debug_str:0000000000000a7d .LASF94
     /tmp/ccQdnIdT.s:4347   .debug_str:0000000000000a4d .LASF95
GAS LISTING /tmp/ccQdnIdT.s 			page 32


     /tmp/ccQdnIdT.s:4313   .debug_str:000000000000089f .LASF96
     /tmp/ccQdnIdT.s:4097   .debug_str:0000000000000197 .LASF188
     /tmp/ccQdnIdT.s:4053   .debug_str:000000000000003e .LASF189
     /tmp/ccQdnIdT.s:4103   .debug_str:00000000000001b2 .LASF98
     /tmp/ccQdnIdT.s:4177   .debug_str:000000000000044c .LASF100
     /tmp/ccQdnIdT.s:4207   .debug_str:0000000000000543 .LASF101
     /tmp/ccQdnIdT.s:4365   .debug_str:0000000000000abe .LASF102
     /tmp/ccQdnIdT.s:4419   .debug_str:0000000000000ca5 .LASF103
     /tmp/ccQdnIdT.s:4261   .debug_str:0000000000000716 .LASF104
     /tmp/ccQdnIdT.s:4303   .debug_str:0000000000000850 .LASF105
     /tmp/ccQdnIdT.s:4279   .debug_str:00000000000007b5 .LASF106
     /tmp/ccQdnIdT.s:4193   .debug_str:00000000000004ce .LASF107
     /tmp/ccQdnIdT.s:4243   .debug_str:0000000000000678 .LASF108
     /tmp/ccQdnIdT.s:4105   .debug_str:00000000000001bb .LASF109
     /tmp/ccQdnIdT.s:4077   .debug_str:000000000000010c .LASF110
     /tmp/ccQdnIdT.s:4331   .debug_str:0000000000000943 .LASF111
     /tmp/ccQdnIdT.s:4061   .debug_str:0000000000000084 .LASF112
     /tmp/ccQdnIdT.s:4149   .debug_str:000000000000036a .LASF113
     /tmp/ccQdnIdT.s:4209   .debug_str:000000000000055c .LASF114
     /tmp/ccQdnIdT.s:4283   .debug_str:00000000000007d1 .LASF115
     /tmp/ccQdnIdT.s:4127   .debug_str:0000000000000298 .LASF116
     /tmp/ccQdnIdT.s:4343   .debug_str:0000000000000a2e .LASF117
     /tmp/ccQdnIdT.s:4269   .debug_str:000000000000075b .LASF118
     /tmp/ccQdnIdT.s:4159   .debug_str:00000000000003b8 .LASF119
     /tmp/ccQdnIdT.s:4203   .debug_str:0000000000000523 .LASF120
     /tmp/ccQdnIdT.s:4049   .debug_str:000000000000001c .LASF121
     /tmp/ccQdnIdT.s:4371   .debug_str:0000000000000b1b .LASF122
     /tmp/ccQdnIdT.s:4307   .debug_str:000000000000086c .LASF123
     /tmp/ccQdnIdT.s:4393   .debug_str:0000000000000bb2 .LASF124
     /tmp/ccQdnIdT.s:4239   .debug_str:000000000000065b .LASF125
     /tmp/ccQdnIdT.s:4381   .debug_str:0000000000000b7c .LASF126
     /tmp/ccQdnIdT.s:4185   .debug_str:00000000000004a2 .LASF190
     /tmp/ccQdnIdT.s:4173   .debug_str:0000000000000421 .LASF127
     /tmp/ccQdnIdT.s:4119   .debug_str:000000000000025a .LASF128
     /tmp/ccQdnIdT.s:4403   .debug_str:0000000000000bff .LASF129
     /tmp/ccQdnIdT.s:4147   .debug_str:000000000000035f .LASF130
     /tmp/ccQdnIdT.s:4157   .debug_str:00000000000003a0 .LASF131
     /tmp/ccQdnIdT.s:4301   .debug_str:0000000000000842 .LASF132
     /tmp/ccQdnIdT.s:4117   .debug_str:000000000000023f .LASF133
     /tmp/ccQdnIdT.s:4163   .debug_str:00000000000003cb .LASF134
     /tmp/ccQdnIdT.s:4373   .debug_str:0000000000000b35 .LASF135
     /tmp/ccQdnIdT.s:4361   .debug_str:0000000000000ab0 .LASF136
     /tmp/ccQdnIdT.s:4213   .debug_str:000000000000057d .LASF140
     /tmp/ccQdnIdT.s:4421   .debug_str:0000000000000cb0 .LASF137
     /tmp/ccQdnIdT.s:4241   .debug_str:0000000000000663 .LASF138
     /tmp/ccQdnIdT.s:4267   .debug_str:0000000000000754 .LASF139
     /tmp/ccQdnIdT.s:4273   .debug_str:0000000000000785 .LASF141
     /tmp/ccQdnIdT.s:4237   .debug_str:0000000000000654 .LASF142
     /tmp/ccQdnIdT.s:4183   .debug_str:000000000000048f .LASF143
     /tmp/ccQdnIdT.s:4395   .debug_str:0000000000000bc7 .LASF144
     /tmp/ccQdnIdT.s:4325   .debug_str:0000000000000916 .LASF145
     /tmp/ccQdnIdT.s:4231   .debug_str:0000000000000633 .LASF146
     /tmp/ccQdnIdT.s:4129   .debug_str:00000000000002bb .LASF147
     /tmp/ccQdnIdT.s:4205   .debug_str:000000000000053b .LASF148
     /tmp/ccQdnIdT.s:4275   .debug_str:0000000000000798 .LASF149
     /tmp/ccQdnIdT.s:4423   .debug_str:0000000000000cb9 .LASF150
     /tmp/ccQdnIdT.s:4167   .debug_str:00000000000003de .LASF151
GAS LISTING /tmp/ccQdnIdT.s 			page 33


     /tmp/ccQdnIdT.s:4099   .debug_str:00000000000001a5 .LASF152
     /tmp/ccQdnIdT.s:4297   .debug_str:0000000000000828 .LASF153
     /tmp/ccQdnIdT.s:4299   .debug_str:000000000000083b .LASF154
     /tmp/ccQdnIdT.s:4089   .debug_str:000000000000015f .LASF155
     /tmp/ccQdnIdT.s:4107   .debug_str:00000000000001c0 .LASF156
     /tmp/ccQdnIdT.s:4155   .debug_str:000000000000038e .LASF157
     /tmp/ccQdnIdT.s:4165   .debug_str:00000000000003d8 .LASF158
     /tmp/ccQdnIdT.s:4145   .debug_str:000000000000034d .LASF159
     /tmp/ccQdnIdT.s:4059   .debug_str:0000000000000079 .LASF160
     /tmp/ccQdnIdT.s:4291   .debug_str:0000000000000804 .LASF161
     /tmp/ccQdnIdT.s:4285   .debug_str:00000000000007e1 .LASF162
     /tmp/ccQdnIdT.s:4415   .debug_str:0000000000000c80 .LASF163
     /tmp/ccQdnIdT.s:4385   .debug_str:0000000000000b87 .LASF164
     /tmp/ccQdnIdT.s:4401   .debug_str:0000000000000be9 .LASF165
     /tmp/ccQdnIdT.s:4087   .debug_str:0000000000000155 .LASF166
     /tmp/ccQdnIdT.s:4219   .debug_str:00000000000005b1 .LASF167
     /tmp/ccQdnIdT.s:4389   .debug_str:0000000000000b99 .LASF168
     /tmp/ccQdnIdT.s:4247   .debug_str:0000000000000691 .LASF169
     /tmp/ccQdnIdT.s:4359   .debug_str:0000000000000aa1 .LASF170
     /tmp/ccQdnIdT.s:4141   .debug_str:0000000000000323 .LASF171
     /tmp/ccQdnIdT.s:4259   .debug_str:0000000000000701 .LASF172
     /tmp/ccQdnIdT.s:4175   .debug_str:000000000000042a .LASF173
     /tmp/ccQdnIdT.s:46     .text:0000000000000020 .LFB48
     /tmp/ccQdnIdT.s:834    .text:0000000000000284 .LFE48
     /tmp/ccQdnIdT.s:4319   .debug_str:00000000000008d1 .LASF175
     /tmp/ccQdnIdT.s:3609   .debug_loc:0000000000000000 .LLST0
     /tmp/ccQdnIdT.s:3977   .debug_ranges:0000000000000000 .Ldebug_ranges0
     /tmp/ccQdnIdT.s:4383   .debug_str:0000000000000b82 .LASF176
     /tmp/ccQdnIdT.s:3696   .debug_loc:0000000000000145 .LLST1
     /tmp/ccQdnIdT.s:4387   .debug_str:0000000000000b91 .LASF177
     /tmp/ccQdnIdT.s:3707   .debug_loc:000000000000017b .LLST2
     /tmp/ccQdnIdT.s:3718   .debug_loc:00000000000001b1 .LLST3
     /tmp/ccQdnIdT.s:400    .text:0000000000000118 .LBB129
     /tmp/ccQdnIdT.s:424    .text:0000000000000128 .LBE129
     /tmp/ccQdnIdT.s:3781   .debug_loc:00000000000002de .LLST23
     /tmp/ccQdnIdT.s:3788   .debug_loc:0000000000000301 .LLST24
     /tmp/ccQdnIdT.s:414    .text:0000000000000124 .LVL11
     /tmp/ccQdnIdT.s:478    .text:000000000000014c .LBB118
     /tmp/ccQdnIdT.s:500    .text:000000000000015c .LBE118
     /tmp/ccQdnIdT.s:3795   .debug_loc:0000000000000324 .LLST21
     /tmp/ccQdnIdT.s:3802   .debug_loc:0000000000000347 .LLST22
     /tmp/ccQdnIdT.s:492    .text:0000000000000158 .LVL17
     /tmp/ccQdnIdT.s:3809   .debug_loc:000000000000036a .LLST18
     /tmp/ccQdnIdT.s:3816   .debug_loc:000000000000038d .LLST19
     /tmp/ccQdnIdT.s:3823   .debug_loc:00000000000003b0 .LLST20
     /tmp/ccQdnIdT.s:532    .text:0000000000000174 .LVL22
     /tmp/ccQdnIdT.s:560    .text:0000000000000190 .LBB98
     /tmp/ccQdnIdT.s:573    .text:000000000000019c .LBE98
     /tmp/ccQdnIdT.s:3830   .debug_loc:00000000000003d3 .LLST17
     /tmp/ccQdnIdT.s:565    .text:0000000000000198 .LVL26
     /tmp/ccQdnIdT.s:591    .text:00000000000001b8 .LBB84
     /tmp/ccQdnIdT.s:606    .text:00000000000001c8 .LBE84
     /tmp/ccQdnIdT.s:3837   .debug_loc:00000000000003f6 .LLST16
     /tmp/ccQdnIdT.s:605    .text:00000000000001c8 .LVL32
     /tmp/ccQdnIdT.s:3844   .debug_loc:0000000000000419 .LLST13
     /tmp/ccQdnIdT.s:3851   .debug_loc:000000000000043c .LLST14
     /tmp/ccQdnIdT.s:3858   .debug_loc:000000000000045f .LLST15
GAS LISTING /tmp/ccQdnIdT.s 			page 34


     /tmp/ccQdnIdT.s:638    .text:00000000000001e0 .LVL37
     /tmp/ccQdnIdT.s:3865   .debug_loc:0000000000000482 .LLST10
     /tmp/ccQdnIdT.s:3872   .debug_loc:00000000000004a5 .LLST11
     /tmp/ccQdnIdT.s:3879   .debug_loc:00000000000004c8 .LLST12
     /tmp/ccQdnIdT.s:689    .text:0000000000000210 .LVL43
     /tmp/ccQdnIdT.s:3886   .debug_loc:00000000000004eb .LLST8
     /tmp/ccQdnIdT.s:3903   .debug_loc:0000000000000536 .LLST9
     /tmp/ccQdnIdT.s:734    .text:000000000000023c .LVL48
     /tmp/ccQdnIdT.s:3914   .debug_loc:000000000000056c .LLST6
     /tmp/ccQdnIdT.s:3921   .debug_loc:000000000000058f .LLST7
     /tmp/ccQdnIdT.s:775    .text:0000000000000260 .LVL54
     /tmp/ccQdnIdT.s:3932   .debug_loc:00000000000005c5 .LLST4
     /tmp/ccQdnIdT.s:3939   .debug_loc:00000000000005e8 .LLST5
     /tmp/ccQdnIdT.s:377    .text:0000000000000110 .LVL8
     /tmp/ccQdnIdT.s:111    .text:0000000000000080 .LBB43
     /tmp/ccQdnIdT.s:126    .text:000000000000008c .LBE43
     /tmp/ccQdnIdT.s:131    .text:0000000000000090 .LBB45
     /tmp/ccQdnIdT.s:147    .text:000000000000009c .LBE45
     /tmp/ccQdnIdT.s:149    .text:000000000000009c .LBB47
     /tmp/ccQdnIdT.s:165    .text:00000000000000a8 .LBE47
     /tmp/ccQdnIdT.s:427    .text:0000000000000128 .LBB141
     /tmp/ccQdnIdT.s:438    .text:000000000000012c .LBE141
     /tmp/ccQdnIdT.s:3950   .debug_loc:000000000000061e .LLST25
     /tmp/ccQdnIdT.s:440    .text:000000000000012c .LBB143
     /tmp/ccQdnIdT.s:452    .text:0000000000000130 .LBE143
     /tmp/ccQdnIdT.s:3957   .debug_loc:0000000000000641 .LLST26
     /tmp/ccQdnIdT.s:586    .text:00000000000001b4 .LVL29
     /tmp/ccQdnIdT.s:64     .text:000000000000003c .LBB39
     /tmp/ccQdnIdT.s:81     .text:0000000000000048 .LBE39
     /tmp/ccQdnIdT.s:818    .text:0000000000000278 .LBB157
     /tmp/ccQdnIdT.s:831    .text:0000000000000284 .LBE157
     /tmp/ccQdnIdT.s:102    .text:000000000000007c .LVL1
     /tmp/ccQdnIdT.s:10     .text:0000000000000000 .LFB47
     /tmp/ccQdnIdT.s:40     .text:0000000000000020 .LFE47
     /tmp/ccQdnIdT.s:4375   .debug_str:0000000000000b4f .LASF178
     /tmp/ccQdnIdT.s:4137   .debug_str:0000000000000307 .LASF191
     /tmp/ccQdnIdT.s:79     .text:0000000000000048 .LVL0
     /tmp/ccQdnIdT.s:106    .text:0000000000000080 .LVL2
     /tmp/ccQdnIdT.s:169    .text:00000000000000ac .LVL6
     /tmp/ccQdnIdT.s:388    .text:0000000000000118 .LVL9
     /tmp/ccQdnIdT.s:471    .text:000000000000014c .LVL15
     /tmp/ccQdnIdT.s:502    .text:0000000000000160 .LVL18
     /tmp/ccQdnIdT.s:556    .text:0000000000000190 .LVL25
     /tmp/ccQdnIdT.s:575    .text:00000000000001a0 .LVL27
     /tmp/ccQdnIdT.s:588    .text:00000000000001b8 .LVL30
     /tmp/ccQdnIdT.s:608    .text:00000000000001cc .LVL33
     /tmp/ccQdnIdT.s:662    .text:00000000000001fc .LVL40
     /tmp/ccQdnIdT.s:713    .text:000000000000022c .LVL46
     /tmp/ccQdnIdT.s:748    .text:0000000000000248 .LVL50
     /tmp/ccQdnIdT.s:786    .text:0000000000000268 .LVL55
     /tmp/ccQdnIdT.s:802    .text:0000000000000278 .LVL59
     /tmp/ccQdnIdT.s:129    .text:0000000000000090 .LVL3
     /tmp/ccQdnIdT.s:448    .text:0000000000000130 .LVL14
     /tmp/ccQdnIdT.s:145    .text:000000000000009c .LVL4
     /tmp/ccQdnIdT.s:163    .text:00000000000000a8 .LVL5
     /tmp/ccQdnIdT.s:540    .text:0000000000000180 .LVL23
     /tmp/ccQdnIdT.s:550    .text:0000000000000188 .LVL24
GAS LISTING /tmp/ccQdnIdT.s 			page 35


     /tmp/ccQdnIdT.s:581    .text:00000000000001a8 .LVL28
     /tmp/ccQdnIdT.s:599    .text:00000000000001bc .LVL31
     /tmp/ccQdnIdT.s:646    .text:00000000000001ec .LVL38
     /tmp/ccQdnIdT.s:656    .text:00000000000001f4 .LVL39
     /tmp/ccQdnIdT.s:753    .text:000000000000024c .LVL51
     /tmp/ccQdnIdT.s:755    .text:0000000000000250 .LVL52
     /tmp/ccQdnIdT.s:409    .text:000000000000011c .LVL10
     /tmp/ccQdnIdT.s:421    .text:0000000000000128 .LVL12
     /tmp/ccQdnIdT.s:487    .text:0000000000000150 .LVL16
     /tmp/ccQdnIdT.s:513    .text:0000000000000164 .LVL19
     /tmp/ccQdnIdT.s:520    .text:0000000000000168 .LVL20
     /tmp/ccQdnIdT.s:527    .text:000000000000016c .LVL21
     /tmp/ccQdnIdT.s:619    .text:00000000000001d0 .LVL34
     /tmp/ccQdnIdT.s:626    .text:00000000000001d4 .LVL35
     /tmp/ccQdnIdT.s:633    .text:00000000000001d8 .LVL36
     /tmp/ccQdnIdT.s:676    .text:0000000000000204 .LVL41
     /tmp/ccQdnIdT.s:684    .text:0000000000000208 .LVL42
     /tmp/ccQdnIdT.s:697    .text:000000000000021c .LVL44
     /tmp/ccQdnIdT.s:707    .text:0000000000000224 .LVL45
     /tmp/ccQdnIdT.s:726    .text:0000000000000230 .LVL47
     /tmp/ccQdnIdT.s:738    .text:0000000000000240 .LVL49
     /tmp/ccQdnIdT.s:768    .text:0000000000000254 .LVL53
     /tmp/ccQdnIdT.s:791    .text:000000000000026c .LVL56
     /tmp/ccQdnIdT.s:370    .text:0000000000000104 .LVL7
     /tmp/ccQdnIdT.s:793    .text:0000000000000270 .LVL57
     /tmp/ccQdnIdT.s:800    .text:0000000000000274 .LVL58
     /tmp/ccQdnIdT.s:435    .text:000000000000012c .LVL13
     /tmp/ccQdnIdT.s:845    .debug_info:0000000000000000 .Ldebug_info0
     /tmp/ccQdnIdT.s:109    .text:0000000000000080 .LBB42
     /tmp/ccQdnIdT.s:172    .text:00000000000000b0 .LBE42
     /tmp/ccQdnIdT.s:176    .text:00000000000000b0 .LBB146
     /tmp/ccQdnIdT.s:183    .text:00000000000000b8 .LBE146
     /tmp/ccQdnIdT.s:187    .text:00000000000000b8 .LBB147
     /tmp/ccQdnIdT.s:196    .text:00000000000000c0 .LBE147
     /tmp/ccQdnIdT.s:200    .text:00000000000000c0 .LBB148
     /tmp/ccQdnIdT.s:211    .text:00000000000000c8 .LBE148
     /tmp/ccQdnIdT.s:215    .text:00000000000000c8 .LBB149
     /tmp/ccQdnIdT.s:228    .text:00000000000000d0 .LBE149
     /tmp/ccQdnIdT.s:232    .text:00000000000000d0 .LBB150
     /tmp/ccQdnIdT.s:247    .text:00000000000000d8 .LBE150
     /tmp/ccQdnIdT.s:251    .text:00000000000000d8 .LBB151
     /tmp/ccQdnIdT.s:268    .text:00000000000000e0 .LBE151
     /tmp/ccQdnIdT.s:272    .text:00000000000000e0 .LBB152
     /tmp/ccQdnIdT.s:291    .text:00000000000000e8 .LBE152
     /tmp/ccQdnIdT.s:295    .text:00000000000000e8 .LBB153
     /tmp/ccQdnIdT.s:316    .text:00000000000000f0 .LBE153
     /tmp/ccQdnIdT.s:320    .text:00000000000000f0 .LBB154
     /tmp/ccQdnIdT.s:343    .text:00000000000000f8 .LBE154
     /tmp/ccQdnIdT.s:347    .text:00000000000000f8 .LBB155
     /tmp/ccQdnIdT.s:453    .text:0000000000000130 .LBE155
     /tmp/ccQdnIdT.s:475    .text:000000000000014c .LBB156
     /tmp/ccQdnIdT.s:816    .text:0000000000000278 .LBE156
     /tmp/ccQdnIdT.s:361    .text:0000000000000100 .LBB60
     /tmp/ccQdnIdT.s:386    .text:0000000000000114 .LBE60
     /tmp/ccQdnIdT.s:797    .text:0000000000000270 .LBB61
     /tmp/ccQdnIdT.s:804    .text:0000000000000278 .LBE61
     /tmp/ccQdnIdT.s:759    .text:0000000000000250 .LBB62
GAS LISTING /tmp/ccQdnIdT.s 			page 36


     /tmp/ccQdnIdT.s:784    .text:0000000000000264 .LBE62
     /tmp/ccQdnIdT.s:788    .text:0000000000000268 .LBB63
     /tmp/ccQdnIdT.s:795    .text:0000000000000270 .LBE63
     /tmp/ccQdnIdT.s:717    .text:000000000000022c .LBB66
     /tmp/ccQdnIdT.s:746    .text:0000000000000244 .LBE66
     /tmp/ccQdnIdT.s:750    .text:0000000000000248 .LBB67
     /tmp/ccQdnIdT.s:757    .text:0000000000000250 .LBE67
     /tmp/ccQdnIdT.s:666    .text:00000000000001fc .LBB71
     /tmp/ccQdnIdT.s:705    .text:0000000000000220 .LBE71
     /tmp/ccQdnIdT.s:709    .text:0000000000000224 .LBB72
     /tmp/ccQdnIdT.s:715    .text:000000000000022c .LBE72
     /tmp/ccQdnIdT.s:611    .text:00000000000001cc .LBB77
     /tmp/ccQdnIdT.s:654    .text:00000000000001f0 .LBE77
     /tmp/ccQdnIdT.s:658    .text:00000000000001f4 .LBB78
     /tmp/ccQdnIdT.s:664    .text:00000000000001fc .LBE78
     /tmp/ccQdnIdT.s:505    .text:0000000000000160 .LBB107
     /tmp/ccQdnIdT.s:548    .text:0000000000000184 .LBE107
     /tmp/ccQdnIdT.s:552    .text:0000000000000188 .LBB108
     /tmp/ccQdnIdT.s:558    .text:0000000000000190 .LBE108

UNDEFINED SYMBOLS
console_handler
_ZN10Ksemaphore6signalEv
_ZN15MemoryAllocator6mallocEm
_ZN15MemoryAllocator4freeEPv
_ZN3TCB12createThreadEPFvPvES0_
_ZN3TCB10exitThreadEv
_ZN3TCB16timeSliceCounterE
_ZN3TCB8dispatchEv
_ZN9Scheduler3putEP3TCB
_ZN3TCB37createThreadWithoutPuttingInSchedulerEPFvPvES0_
_ZN10Ksemaphore15createSemaphoreEj
_ZN10Ksemaphore14closeSemaphoreEv
_ZN10Ksemaphore4waitEv
